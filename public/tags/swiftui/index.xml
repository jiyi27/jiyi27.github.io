<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swiftui on 为霜的博客</title>
    <link>https://blog.jiyi27.com/tags/swiftui/</link>
    <description>Recent content in Swiftui on 为霜的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 09 Jul 2024 20:55:10 +0000</lastBuildDate><atom:link href="https://blog.jiyi27.com/tags/swiftui/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SwiftUI Containers</title>
      <link>https://blog.jiyi27.com/posts/ios/swiftui/010-containers/</link>
      <pubDate>Tue, 09 Jul 2024 20:55:10 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/ios/swiftui/010-containers/</guid>
      <description>&lt;h2 id=&#34;1--lazyvgrid&#34;&gt;1.  LazyVGrid&lt;/h2&gt;
&lt;h3 id=&#34;11-column-layout-algorithm&#34;&gt;1.1. Column Layout Algorithm&lt;/h3&gt;
&lt;p&gt;The column layout algorithm runs in two steps. It takes the remaining width, and distributes it among the columns, similar to &lt;a href=&#34;https://www.swiftuifieldguide.com/layout/hstack/&#34;&gt;HStack&lt;/a&gt;. These are the steps to distribute the space:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始设置: 首先, 系统计算出可用的总宽度, 通常是 LazyVGrid 的容器宽度。&lt;/li&gt;
&lt;li&gt;For each column but the last, the spacing is subtracted from the remaining width. 系统会从总宽度中减去除最后一列外所有列之间的间距。例如,如果有3列,只需要减去2个间距的宽度。&lt;/li&gt;
&lt;li&gt;The columns are given their width in order, but all the fixed width columns come first.&lt;/li&gt;
&lt;li&gt;For each column, we propose the remaining width divided by the number of remaining columns, and subtract the returned column width from the remainder. 对于每一个灵活宽度的列: a. 系统计算当前剩余宽度除以剩余的列数。 b. 将这个值作为建议宽度提供给列。 c. 列可能会接受这个宽度,或者要求更小的宽度。 d. 系统从剩余宽度中减去列实际使用的宽度。重复进行&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of the column types responds differently to the proposed width:&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1--lazyvgrid&#34;&gt;1.  LazyVGrid&lt;/h2&gt;
&lt;h3 id=&#34;11-column-layout-algorithm&#34;&gt;1.1. Column Layout Algorithm&lt;/h3&gt;
&lt;p&gt;The column layout algorithm runs in two steps. It takes the remaining width, and distributes it among the columns, similar to &lt;a href=&#34;https://www.swiftuifieldguide.com/layout/hstack/&#34;&gt;HStack&lt;/a&gt;. These are the steps to distribute the space:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始设置: 首先, 系统计算出可用的总宽度, 通常是 LazyVGrid 的容器宽度。&lt;/li&gt;
&lt;li&gt;For each column but the last, the spacing is subtracted from the remaining width. 系统会从总宽度中减去除最后一列外所有列之间的间距。例如,如果有3列,只需要减去2个间距的宽度。&lt;/li&gt;
&lt;li&gt;The columns are given their width in order, but all the fixed width columns come first.&lt;/li&gt;
&lt;li&gt;For each column, we propose the remaining width divided by the number of remaining columns, and subtract the returned column width from the remainder. 对于每一个灵活宽度的列: a. 系统计算当前剩余宽度除以剩余的列数。 b. 将这个值作为建议宽度提供给列。 c. 列可能会接受这个宽度,或者要求更小的宽度。 d. 系统从剩余宽度中减去列实际使用的宽度。重复进行&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of the column types responds differently to the proposed width:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A fixed column discards the proposed width and always becomes the fixed size.&lt;/li&gt;
&lt;li&gt;An adaptive column accepts the proposed width.&lt;/li&gt;
&lt;li&gt;A flexible column becomes the proposed width, clamped to its constraints.  flexible column 会采用建议宽度,但会被限制在其约束范围内.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After all columns have a width, the grid will expand the adaptive columns. For each adaptive column, it will take the column&amp;rsquo;s width and try to fit in as many columns as possible (given the constraints).&lt;/p&gt;
&lt;h3 id=&#34;12-flexible-vs-adaptive&#34;&gt;1.2. Flexible vs Adaptive&lt;/h3&gt;
&lt;p&gt;Flexible 列着重于分配可用空间，保持列数不变。&lt;/p&gt;
&lt;p&gt;Adaptive 列着重于它们会根据可用空间自动调整列数 (一般都会指定最小尺寸), 如果空间不足，后面的 grid item 换行到下一行。&lt;/p&gt;
&lt;p&gt;若grid里只有 adaptive 列, 则所有列均分屏幕宽度高度, 即每个 grid item 大小相同:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/07/288b4b8a2dfbe9aa1b7c380afdfd937a.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;References: &lt;a href=&#34;https://www.swiftuifieldguide.com/layout/lazyvgrid/&#34;&gt;LazyVGrid - SwiftUI Field Guide&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>SwiftUI UNUserNotificationCenterDelegate, UIApplicationDelegate, UISceneDelegate 协议</title>
      <link>https://blog.jiyi27.com/posts/ios/swiftui/009-some-delegates/</link>
      <pubDate>Wed, 03 Jul 2024 10:37:20 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/ios/swiftui/009-some-delegates/</guid>
      <description>&lt;h2 id=&#34;1-unusernotificationcenterdelegate--uiapplicationdelegate&#34;&gt;1. UNUserNotificationCenterDelegate &amp;amp; UIApplicationDelegate&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;UNUserNotificationCenterDelegate&lt;/code&gt; 时, 要记得初始化, 因为其方法都是在特定条件下被系统自动调用的, 如果你不告诉系统谁是你的 通知代表, 系统只会调用默认 通知代表的方法, 即什么都不做.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;更新: 最简单的初始化方法, 放在@main的View的 init 函数中: &lt;code&gt;UNUserNotificationCenter.current().delegate = yourDelegate.self&lt;/code&gt; 即可, 下面只是为了解释 UNUserNotificationCenterDelegate 和 UIApplicationDelegate 是如何使用的, 另外 UIApplicationDelegate 的一些方法也都被 SceneDelegate 取代了, 了解更多: &lt;a href=&#34;https://stackoverflow.com/a/56508769/16317008&#34;&gt;https://stackoverflow.com/a/56508769/16317008&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;初始化方法一, 在实现 UNUserNotificationCenterDelegate 接口的类的 init() 函数中指定, 然后在程序启动时创建改该类的实例 (间接调用 init 函数)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotificationDelegate&lt;/span&gt;: NSObject, UNUserNotificationCenterDelegate {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 单例模式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; shared = NotificationDelegate()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;init&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;init&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 告诉系统谁是你的 通知代表 是谁&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UNUserNotificationCenter.current().delegate = &lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userNotificationCenter&lt;/span&gt;(willPresent notification...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// In App, no sound, just banner.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        completionHandler([.banner])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AppDelegate&lt;/span&gt;: NSObject, UIApplicationDelegate {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 应用 launch (杀后台再进) 时被调用, 从后台切入不会被调用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;application&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;) -&amp;gt; Bool {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 确保 NotificationDelegate 的 init 函数被调用, 即初始化 NotificationDelegate.shared&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; = NotificationDelegate.shared
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 进入前台 active 的时候被调用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;applicationWillEnterForeground&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; application: UIApplication) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aaa&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        NotificationManager.clearBadges()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;todolistApp&lt;/span&gt;: App {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// ApplicationDelegate 被指定为 AppDelegate, 程序启动会调用其application(...) 函数, 也就会初始化 NotificationDelegate.shared&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @UIApplicationDelegateAdaptor(AppDelegate.&lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; appDeleagte
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;init&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        NotificationManager.requestNotificationPermission()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some Scene {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WindowGroup {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            HomeView()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;方法二, 合并  UNUserNotificationCenterDelegate 和 UIApplicationDelegate&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-unusernotificationcenterdelegate--uiapplicationdelegate&#34;&gt;1. UNUserNotificationCenterDelegate &amp;amp; UIApplicationDelegate&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;UNUserNotificationCenterDelegate&lt;/code&gt; 时, 要记得初始化, 因为其方法都是在特定条件下被系统自动调用的, 如果你不告诉系统谁是你的 通知代表, 系统只会调用默认 通知代表的方法, 即什么都不做.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;更新: 最简单的初始化方法, 放在@main的View的 init 函数中: &lt;code&gt;UNUserNotificationCenter.current().delegate = yourDelegate.self&lt;/code&gt; 即可, 下面只是为了解释 UNUserNotificationCenterDelegate 和 UIApplicationDelegate 是如何使用的, 另外 UIApplicationDelegate 的一些方法也都被 SceneDelegate 取代了, 了解更多: &lt;a href=&#34;https://stackoverflow.com/a/56508769/16317008&#34;&gt;https://stackoverflow.com/a/56508769/16317008&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;初始化方法一, 在实现 UNUserNotificationCenterDelegate 接口的类的 init() 函数中指定, 然后在程序启动时创建改该类的实例 (间接调用 init 函数)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotificationDelegate&lt;/span&gt;: NSObject, UNUserNotificationCenterDelegate {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 单例模式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; shared = NotificationDelegate()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;init&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;init&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 告诉系统谁是你的 通知代表 是谁&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UNUserNotificationCenter.current().delegate = &lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userNotificationCenter&lt;/span&gt;(willPresent notification...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// In App, no sound, just banner.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        completionHandler([.banner])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AppDelegate&lt;/span&gt;: NSObject, UIApplicationDelegate {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 应用 launch (杀后台再进) 时被调用, 从后台切入不会被调用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;application&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;) -&amp;gt; Bool {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 确保 NotificationDelegate 的 init 函数被调用, 即初始化 NotificationDelegate.shared&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; = NotificationDelegate.shared
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 进入前台 active 的时候被调用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;applicationWillEnterForeground&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; application: UIApplication) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aaa&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        NotificationManager.clearBadges()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;todolistApp&lt;/span&gt;: App {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// ApplicationDelegate 被指定为 AppDelegate, 程序启动会调用其application(...) 函数, 也就会初始化 NotificationDelegate.shared&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @UIApplicationDelegateAdaptor(AppDelegate.&lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; appDeleagte
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;init&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        NotificationManager.requestNotificationPermission()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some Scene {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WindowGroup {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            HomeView()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;方法二, 合并  UNUserNotificationCenterDelegate 和 UIApplicationDelegate&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UIKit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AppDelegate&lt;/span&gt;: NSObject, UIApplicationDelegate, UNUserNotificationCenterDelegate {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;MARK:&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; - UIApplicationDelegate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 应用 launch (杀后台再进) 时被调用, 从后台切入不会被调用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;application&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;) -&amp;gt; Bool {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 这行代码很重要&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        UNUserNotificationCenter.current().delegate = &lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;applicationWillEnterForeground&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; application: UIApplication) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        NotificationManager.clearBadges()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;MARK:&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; - UNUserNotificationCenterDelegate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Tells the delegate how to handle a notification that arrived while the app was running in the foreground. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userNotificationCenter&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; center: UNUserNotificationCenter,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                willPresent notification: UNNotification,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -&amp;gt; Void) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// In App, no sound, just banner.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        completionHandler([.banner])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// When there is a notification, and user click the notification, this function will be called.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userNotificationCenter&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; center: UNUserNotificationCenter,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                didReceive response: UNNotificationResponse,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                withCompletionHandler completionHandler: @escaping () -&amp;gt; Void) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        completionHandler()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// @main...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@UIApplicationDelegateAdaptor(AppDelegate.&lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; appDeleagte
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;UIApplicationDelegate,  UNUserNotificationCenterDelegate 的方法都是在特定场景被自动调用的, 我们只需要写好方法体内的逻辑就好了, 要做的就是指定 UIApplicationDelegate 是谁, UNUserNotificationCenterDelegate  是谁:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 指定 UNUserNotificationCenterDelegate &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;UNUserNotificationCenter.current().delegate = &lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 指定 UIApplicationDelegate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@UIApplicationDelegateAdaptor(AppDelegate.&lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; appDeleagte
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;2-uiapplicationdelegate-不起作用&#34;&gt;2. UIApplicationDelegate 不起作用?&lt;/h2&gt;
&lt;p&gt;我们的类实现了  &lt;code&gt;application(...)&lt;/code&gt; 和 &lt;code&gt;applicationWillEnterForeground(...)&lt;/code&gt;, 每次重启应用时, &lt;code&gt;application(...)&lt;/code&gt; 确实被调用了, 但是每次切入进软件 (background -&amp;gt; foreground) 时,  applicationWillEnterForeground() 并没有按预期被调用,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AppDelegate&lt;/span&gt;: NSObject, UIApplicationDelegate {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 应用 launch (杀后台再进) 时被调用, 从后台切入不会被调用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;application&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;) -&amp;gt; Bool {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aaa&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;applicationWillEnterForeground&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; application: UIApplication) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        NotificationManager.clearBadges()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;找到了&lt;a href=&#34;https://stackoverflow.com/a/56508769/16317008&#34;&gt;答案&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how it works: If you have an &amp;ldquo;&lt;strong&gt;Application Scene Manifest&lt;/strong&gt;&amp;rdquo; in your &lt;code&gt;Info.plist&lt;/code&gt; and your app delegate has a &lt;code&gt;configurationForConnectingSceneSession&lt;/code&gt; method, the &lt;code&gt;UIApplication&lt;/code&gt; won&amp;rsquo;t send background and foreground lifecycle messages to your app delegate. That means the code in these methods won&amp;rsquo;t run:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;applicationDidBecomeActive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;applicationWillResignActive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;applicationDidEnterBackground&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;applicationWillEnterForeground&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The app delegate will still receive the &lt;code&gt;willFinishLaunchingWithOptions:&lt;/code&gt; and &lt;code&gt;didFinishLaunchingWithOptions:&lt;/code&gt; method calls so any code in those methods will work as before.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/07/27b6cf8dbd446ef169f0d7ced56bbb5d.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我把 Application Scene Manifest 删除了, 依然不能正常工作, 好奇怪, 打算直接用 onReceive 或者复杂的情况使用 SceneDelegate.&lt;/p&gt;
&lt;p&gt;更新: 可能没办法根除 scene 吧? 刚开始学习, 太复杂了, 还是留着以后解决吧,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// @main...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some Scene {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WindowGroup {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        HomeView()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-app-三个状态的区别&#34;&gt;3. APP 三个状态的区别&lt;/h2&gt;
&lt;p&gt;再看一下 applicationWillEnterForeground 文档:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In iOS 4.0 and later, UIKit calls this method as part of the transition from the &lt;strong&gt;background&lt;/strong&gt; to the &lt;strong&gt;active&lt;/strong&gt; state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/documentation/uikit/uiapplication/state/&#34;&gt;Apple Documents&lt;/a&gt;对 state 的表述等于没说, 看到一个&lt;a href=&#34;https://stackoverflow.com/a/40001368/16317008&#34;&gt;很好解释&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UIApplicationState.Active&lt;/code&gt; - App is running in foreground. Simple.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UIApplicationState.Inactive&lt;/code&gt; - E.g. App was in the background and is opening through a push notification (transitioning atm). Or the control/notification center is presented above your app. You kind of see it, is in foreground.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UIApplicationState.Background&lt;/code&gt; - App is in the background, but still running. E.g. playing music. Then - this can take a while or not (depending on process you are running in background), but in one point your app is killed. You will see app&amp;rsquo;s snapshot and icon between minimized apps, but the app will be &lt;strong&gt;launch&lt;/strong&gt; again first.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意, launch 和 简单的从后台切入到app页面不一样,&lt;/p&gt;
&lt;h2 id=&#34;4-uiscenedelegate&#34;&gt;4. UISceneDelegate&lt;/h2&gt;
&lt;p&gt;Before iOS 13, the main entry point for your app was the AppDelegate, and it was in charge of many logic and state handling. Now the work of the AppDelegate has been split, between the AppDelegate and the SceneDelegate [1 Dev].&lt;/p&gt;
&lt;p&gt;The AppDelegate being only responsible for the initial app setup, the SceneDelegate will handle and manage the way your app is shown [1 Dev].&lt;/p&gt;
&lt;p&gt;As an app could have multiple instances, a SceneDelegate will be called every time an instance of your app is created [1 Dev].&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t create &lt;code&gt;UISceneDelegate&lt;/code&gt; objects directly. Instead, specify the name of your custom delegate class as part of the configuration data for your scenes.&lt;/p&gt;
&lt;p&gt;You can specify this information in your app’s &lt;code&gt;Info.plist&lt;/code&gt; file, &lt;strong&gt;or&lt;/strong&gt; in the UISceneConfiguration object you return from your app delegate’s &lt;code&gt;application:configurationForConnectingSceneSession:options:&lt;/code&gt; method [2 App].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For the adivice of Apple Docs, we can write code like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AppDelegate&lt;/span&gt;: NSObject, UIApplicationDelegate {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;application&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; application: UIApplication, configurationForConnecting connectingSceneSession: UISceneSession, options: UIScene.ConnectionOptions) -&amp;gt; UISceneConfiguration {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sceneConfig = UISceneConfiguration(name: &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, sessionRole: connectingSceneSession.role)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sceneConfig.delegateClass = SceneDelegate.&lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sceneConfig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SceneDelegate&lt;/span&gt;: NSObject, UIWindowSceneDelegate {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sceneWillEnterForeground&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; scene: UIScene) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;App is entering the foreground&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyApp&lt;/span&gt;: App {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @UIApplicationDelegateAdaptor(AppDelegate.&lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; appDelegate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5-conclusion&#34;&gt;5. Conclusion&lt;/h2&gt;
&lt;p&gt;After iOS 13, the management responsibilities for app states were subdivided. Previously, all tasks were handled by the AppDelegate, but now they are divided between the AppDelegate and the SceneDelegate. The AppDelegate primarily handles initial setup, such as startup initialization, while the SceneDelegate manages the logic for scene transitions, such as moving the app from the foreground to the background, or from an active state to an inactive state.&lt;/p&gt;
&lt;p&gt;If you have setup tasks, asign them to AppDelegate, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AppDelegate&lt;/span&gt;: NSObject, UIApplicationDelegate {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Get called when app launchs, launch is not simply from background to foreground.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;application&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; application: UIApplication, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;) -&amp;gt; Bool {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        NotificationManager.requestNotificationPermission()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Specify user notification delegate.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        UNUserNotificationCenter.current().delegate = &lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;application&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; application: UIApplication, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     configurationForConnecting connectingSceneSession: UISceneSession, options: UIScene.ConnectionOptions) -&amp;gt; UISceneConfiguration {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Specify scene delegate.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sceneConfig = UISceneConfiguration(name: &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, sessionRole: connectingSceneSession.role)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sceneConfig.delegateClass = SceneDelegate.&lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sceneConfig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want do something for scene transitions, implement SceneDelegate.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1Dev] &lt;a href=&#34;https://dev.to/kevinmaarek/add-a-scene-delegate-to-your-current-project-5on&#34;&gt;Add a Scene Delegate to your current project - DEV Community&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2App] &lt;a href=&#34;https://developer.apple.com/documentation/uikit/uiscenedelegate?language=objc&#34;&gt;UISceneDelegate | Apple Developer Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;举例解释如何在 SwiftUI 中使用 UISceneDelegate 的 &lt;strong&gt;sceneWillEnterForeground() 方法&lt;/strong&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Bugs</title>
      <link>https://blog.jiyi27.com/posts/ios/swiftui/008-errors/</link>
      <pubDate>Wed, 26 Jun 2024 21:55:30 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/ios/swiftui/008-errors/</guid>
      <description>&lt;h3 id=&#34;1-textfield-on-long-press&#34;&gt;1. TextField on Long-Press&lt;/h3&gt;
&lt;p&gt;Error: this application, or a library it uses, has passed an invalid numeric value (NaN, or not-a-number) to CoreGraphics API and this value is being ignored. Please fix this problem.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://forums.developer.apple.com/forums/thread/738726&#34;&gt;Invalid Numeric Value (NaN) Error … | Apple Developer Forums&lt;/a&gt;&lt;/p&gt;</description>
      <content>&lt;h3 id=&#34;1-textfield-on-long-press&#34;&gt;1. TextField on Long-Press&lt;/h3&gt;
&lt;p&gt;Error: this application, or a library it uses, has passed an invalid numeric value (NaN, or not-a-number) to CoreGraphics API and this value is being ignored. Please fix this problem.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://forums.developer.apple.com/forums/thread/738726&#34;&gt;Invalid Numeric Value (NaN) Error … | Apple Developer Forums&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>UIKit in SwiftUI</title>
      <link>https://blog.jiyi27.com/posts/ios/swiftui/007-uikit/</link>
      <pubDate>Sat, 08 Jun 2024 21:55:30 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/ios/swiftui/007-uikit/</guid>
      <description>&lt;h2 id=&#34;1-uiviewcontrollerrepresentable&#34;&gt;1. UIViewControllerRepresentable&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;UIViewControllerRepresentable&lt;/code&gt; is a view that represents a UIKit view controller. Use a &lt;a href=&#34;https://developer.apple.com/documentation/swiftui/uiviewcontrollerrepresentable&#34;&gt;&lt;code&gt;UIViewControllerRepresentable&lt;/code&gt;&lt;/a&gt; instance to create and manage a &lt;a href=&#34;https://developer.apple.com/documentation/uikit/uiviewcontroller&#34;&gt;&lt;code&gt;UIViewController&lt;/code&gt;&lt;/a&gt; object in your SwiftUI interface.&lt;/p&gt;
&lt;p&gt;SwiftUI cannot use &lt;code&gt;SFSafariViewController&lt;/code&gt; directly, so we wrap it in a &lt;code&gt;UIViewControllerRepresentable&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SwiftUI&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SafariServices&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SafariView&lt;/span&gt;: UIViewControllerRepresentable {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; url: URL
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// typealias Context = UIViewControllerRepresentableContext&amp;lt;Self&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;makeUIViewController&lt;/span&gt;(context: Context) -&amp;gt; SFSafariViewController {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SFSafariViewController(url: url)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;updateUIViewController&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; uiViewController: SFSafariViewController, context: Context) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// This method is usually left empty for SFSafariViewController.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/09bfd9ae3e90671f9516329428798591.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-uiviewcontrollerrepresentable&#34;&gt;1. UIViewControllerRepresentable&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;UIViewControllerRepresentable&lt;/code&gt; is a view that represents a UIKit view controller. Use a &lt;a href=&#34;https://developer.apple.com/documentation/swiftui/uiviewcontrollerrepresentable&#34;&gt;&lt;code&gt;UIViewControllerRepresentable&lt;/code&gt;&lt;/a&gt; instance to create and manage a &lt;a href=&#34;https://developer.apple.com/documentation/uikit/uiviewcontroller&#34;&gt;&lt;code&gt;UIViewController&lt;/code&gt;&lt;/a&gt; object in your SwiftUI interface.&lt;/p&gt;
&lt;p&gt;SwiftUI cannot use &lt;code&gt;SFSafariViewController&lt;/code&gt; directly, so we wrap it in a &lt;code&gt;UIViewControllerRepresentable&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SwiftUI&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SafariServices&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SafariView&lt;/span&gt;: UIViewControllerRepresentable {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; url: URL
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// typealias Context = UIViewControllerRepresentableContext&amp;lt;Self&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;makeUIViewController&lt;/span&gt;(context: Context) -&amp;gt; SFSafariViewController {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SFSafariViewController(url: url)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;updateUIViewController&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; uiViewController: SFSafariViewController, context: Context) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// This method is usually left empty for SFSafariViewController.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/09bfd9ae3e90671f9516329428798591.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-delegate-pattern&#34;&gt;2. Delegate Pattern&lt;/h2&gt;
&lt;p&gt;The Delegate Pattern, a common design pattern in traditional iOS development with UIKit, involves defining a protocol that outlines the responsibilities that can be delegated to another class or structure. This pattern allows for the separation of responsibilities, enhancing modularity and reusability of code.&lt;/p&gt;
&lt;p&gt;通过在 UIViewControllerRepresentable 中嵌入 UIViewController 来实现在 SwiftUI 中使用 UIKit 的组件, 前者是 SwiftUI View, 后者其实就是 UIKit 的组件. UIKit 通常把不同功能的代码进行分类, 因此又在 UIViewController 中弄了个 Delegate 协议, 然后让 UIViewControllerRepresentable 创建个协调者实现这个协议, 这样 这个协调者就能在 UIkit 和 SwiftUI 组件间传递信息, 真的是离谱这个设计（¯﹃¯）&lt;/p&gt;
&lt;p&gt;忘了说, 协议在 Swift 语法里其实就是其他语言里的 接口, 即只声明一些函数, 由继承该协议的类进行实现, 可以实现多态&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/9da1df8146b465d5381307c38da4f103.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-do-not-pass-reference-of-a-view&#34;&gt;3. Do not Pass Reference of a View&lt;/h2&gt;
&lt;p&gt;I would definitely &lt;em&gt;not&lt;/em&gt; recommend using references to SwiftUI views via &lt;code&gt;self&lt;/code&gt;, passing them to other views. SwiftUI views are transient and you shouldn&amp;rsquo;t rely on a reference like this. You can, however, pass closures back and forth or bindings like you suggested. Check original: &lt;a href=&#34;https://stackoverflow.com/questions/70219779/is-delegate-pattern-a-good-approach-in-swiftui&#34;&gt;ios - Is delegate pattern a good approach in SwiftUI? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Predefined Styles SwiftUI</title>
      <link>https://blog.jiyi27.com/posts/ios/swiftui/005-predefined-styles/</link>
      <pubDate>Fri, 07 Jun 2024 22:02:30 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/ios/swiftui/005-predefined-styles/</guid>
      <description>&lt;h2 id=&#34;1-color&#34;&gt;1. Color&lt;/h2&gt;
&lt;h3 id=&#34;11-colorred-vs-red&#34;&gt;1.1 &lt;code&gt;Color.red&lt;/code&gt; vs &lt;code&gt;.red&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;background()&lt;/code&gt; 应该传入 &lt;code&gt;Color.red&lt;/code&gt; 而不是直接 &lt;code&gt;.red&lt;/code&gt;, 否则显示可能会不符合预期, 这和 &lt;a href=&#34;https://docs.swift.org/swift-book/documentation/the-swift-programming-language/expressions/#Implicit-Member-Expression&#34;&gt;Implicit Member Expression&lt;/a&gt; 有关系.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Swift 的类型推断能力意味着编译器能够自动理解表达式的类型而无需显式声明。在 SwiftUI 的视图中，很多属性（如 &lt;code&gt;foregroundColor&lt;/code&gt;）期望的是一个 &lt;code&gt;Color&lt;/code&gt; 类型。当你提供 &lt;code&gt;.primary&lt;/code&gt; 时，Swift 知道这个上下文需要一个 &lt;code&gt;Color&lt;/code&gt; 实例，因此它会查找 &lt;code&gt;Color&lt;/code&gt; 类型中名为 &lt;code&gt;primary&lt;/code&gt; 的静态属性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如下定义所示, 调用 foregroundColor 时就可以直接使用 &lt;code&gt;.red&lt;/code&gt;, 不必指定类型, 而 background 却不行,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foregroundColor&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; color: Color?) -&amp;gt; some View
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;background&lt;/span&gt;&amp;lt;S&amp;gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; style: S,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ignoresSafeAreaEdges edges: Edge.Set = .all
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) -&amp;gt; some View &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; S : ShapeStyle
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;12-auto-color&#34;&gt;1.2. Auto Color&lt;/h3&gt;
&lt;p&gt;If you &lt;strong&gt;want the &lt;code&gt;foregroundStyle&lt;/code&gt; color to adapt automatically&lt;/strong&gt; &lt;strong&gt;to the system theme&lt;/strong&gt; (such as light mode and dark mode), you can use some predefined colors like &lt;code&gt;.primary&lt;/code&gt;, &lt;code&gt;.secondary&lt;/code&gt;, &lt;code&gt;.label&lt;/code&gt;, etc. These colors will automatically adjust according to different themes. However, it&amp;rsquo;s important to note that using system colors like &lt;code&gt;.label&lt;/code&gt; directly in &lt;code&gt;foregroundStyle&lt;/code&gt; might encounter issues because &lt;code&gt;foregroundStyle&lt;/code&gt; is more commonly used to define composite styles or gradients, rather than just a single color.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-color&#34;&gt;1. Color&lt;/h2&gt;
&lt;h3 id=&#34;11-colorred-vs-red&#34;&gt;1.1 &lt;code&gt;Color.red&lt;/code&gt; vs &lt;code&gt;.red&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;background()&lt;/code&gt; 应该传入 &lt;code&gt;Color.red&lt;/code&gt; 而不是直接 &lt;code&gt;.red&lt;/code&gt;, 否则显示可能会不符合预期, 这和 &lt;a href=&#34;https://docs.swift.org/swift-book/documentation/the-swift-programming-language/expressions/#Implicit-Member-Expression&#34;&gt;Implicit Member Expression&lt;/a&gt; 有关系.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Swift 的类型推断能力意味着编译器能够自动理解表达式的类型而无需显式声明。在 SwiftUI 的视图中，很多属性（如 &lt;code&gt;foregroundColor&lt;/code&gt;）期望的是一个 &lt;code&gt;Color&lt;/code&gt; 类型。当你提供 &lt;code&gt;.primary&lt;/code&gt; 时，Swift 知道这个上下文需要一个 &lt;code&gt;Color&lt;/code&gt; 实例，因此它会查找 &lt;code&gt;Color&lt;/code&gt; 类型中名为 &lt;code&gt;primary&lt;/code&gt; 的静态属性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如下定义所示, 调用 foregroundColor 时就可以直接使用 &lt;code&gt;.red&lt;/code&gt;, 不必指定类型, 而 background 却不行,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foregroundColor&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; color: Color?) -&amp;gt; some View
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;background&lt;/span&gt;&amp;lt;S&amp;gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; style: S,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ignoresSafeAreaEdges edges: Edge.Set = .all
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) -&amp;gt; some View &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; S : ShapeStyle
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;12-auto-color&#34;&gt;1.2. Auto Color&lt;/h3&gt;
&lt;p&gt;If you &lt;strong&gt;want the &lt;code&gt;foregroundStyle&lt;/code&gt; color to adapt automatically&lt;/strong&gt; &lt;strong&gt;to the system theme&lt;/strong&gt; (such as light mode and dark mode), you can use some predefined colors like &lt;code&gt;.primary&lt;/code&gt;, &lt;code&gt;.secondary&lt;/code&gt;, &lt;code&gt;.label&lt;/code&gt;, etc. These colors will automatically adjust according to different themes. However, it&amp;rsquo;s important to note that using system colors like &lt;code&gt;.label&lt;/code&gt; directly in &lt;code&gt;foregroundStyle&lt;/code&gt; might encounter issues because &lt;code&gt;foregroundStyle&lt;/code&gt; is more commonly used to define composite styles or gradients, rather than just a single color.&lt;/p&gt;
&lt;p&gt;考虑到 foregroundColor 已经被 foregroundStyle 替代, 有时候使用 primiary 并不能修改字体颜色, 比如 NavigationLink 默认是蓝色, 此时使用 primiary, 依然会是蓝色, 所以可以使用 label: &lt;code&gt;.foregroundStyle(Color(.label))&lt;/code&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>SwiftUI Modifiers</title>
      <link>https://blog.jiyi27.com/posts/ios/swiftui/004-modifiers/</link>
      <pubDate>Fri, 07 Jun 2024 16:22:30 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/ios/swiftui/004-modifiers/</guid>
      <description>&lt;h2 id=&#34;1-foregroundstyle-and-tint&#34;&gt;1. &lt;code&gt;.foregroundStyle()&lt;/code&gt; and &lt;code&gt;.tint()&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.tint&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Targets: Works mainly on &lt;strong&gt;interactive controls&lt;/strong&gt; like &lt;code&gt;Button&lt;/code&gt;, &lt;code&gt;Toggle&lt;/code&gt;, &lt;code&gt;Picker&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;Effect: Changes the color of text and icons within these controls, but usually &lt;strong&gt;doesn&amp;rsquo;t affect plain &lt;code&gt;Text&lt;/code&gt; views or other non-interactive elements&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.foregroundStyle()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;More versatile, it changes the style (not just the color) of all foreground elements within a view hierarchy, including text, icons, shapes, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/b68b2b854568f35c371b5e1d22b60231.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/918b49e2021b1534f1274e732efe1522.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-other-common-used-modifiers&#34;&gt;2. Other Common Used Modifiers&lt;/h2&gt;
&lt;h3 id=&#34;21-text-modifiers&#34;&gt;2.1. Text Modifiers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.font()&lt;/code&gt;: &lt;code&gt;.largeTitle&lt;/code&gt;, &lt;code&gt;.title&lt;/code&gt;, &lt;code&gt;.title2&lt;/code&gt;, &lt;code&gt;.headline&lt;/code&gt;, &lt;code&gt;.subheadline&lt;/code&gt;, &lt;code&gt;.body&lt;/code&gt;, &lt;code&gt;.footnote&lt;/code&gt;, &lt;code&gt;.font(.system(...))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-image-modifiers&#34;&gt;2.2. Image Modifiers&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.resizable()&lt;/code&gt;, &lt;code&gt;.scaledToFit()&lt;/code&gt;, &lt;code&gt;.scaledToFill()&lt;/code&gt;, &lt;code&gt;aspectRatio(contentMode: .fill)&lt;/code&gt;, &lt;code&gt;imageScale()&lt;/code&gt;&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-foregroundstyle-and-tint&#34;&gt;1. &lt;code&gt;.foregroundStyle()&lt;/code&gt; and &lt;code&gt;.tint()&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.tint&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Targets: Works mainly on &lt;strong&gt;interactive controls&lt;/strong&gt; like &lt;code&gt;Button&lt;/code&gt;, &lt;code&gt;Toggle&lt;/code&gt;, &lt;code&gt;Picker&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;Effect: Changes the color of text and icons within these controls, but usually &lt;strong&gt;doesn&amp;rsquo;t affect plain &lt;code&gt;Text&lt;/code&gt; views or other non-interactive elements&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.foregroundStyle()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;More versatile, it changes the style (not just the color) of all foreground elements within a view hierarchy, including text, icons, shapes, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/b68b2b854568f35c371b5e1d22b60231.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/918b49e2021b1534f1274e732efe1522.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-other-common-used-modifiers&#34;&gt;2. Other Common Used Modifiers&lt;/h2&gt;
&lt;h3 id=&#34;21-text-modifiers&#34;&gt;2.1. Text Modifiers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.font()&lt;/code&gt;: &lt;code&gt;.largeTitle&lt;/code&gt;, &lt;code&gt;.title&lt;/code&gt;, &lt;code&gt;.title2&lt;/code&gt;, &lt;code&gt;.headline&lt;/code&gt;, &lt;code&gt;.subheadline&lt;/code&gt;, &lt;code&gt;.body&lt;/code&gt;, &lt;code&gt;.footnote&lt;/code&gt;, &lt;code&gt;.font(.system(...))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-image-modifiers&#34;&gt;2.2. Image Modifiers&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.resizable()&lt;/code&gt;, &lt;code&gt;.scaledToFit()&lt;/code&gt;, &lt;code&gt;.scaledToFill()&lt;/code&gt;, &lt;code&gt;aspectRatio(contentMode: .fill)&lt;/code&gt;, &lt;code&gt;imageScale()&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.frame()&lt;/code&gt; must be used after &lt;code&gt;.resizable()&lt;/code&gt;, because image is not resizable by default.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.scaledToFit()&lt;/code&gt; and &lt;code&gt;.scaledToFill()&lt;/code&gt; should be used before &lt;code&gt;.frame()&lt;/code&gt;, if used after &lt;code&gt;.frame()&lt;/code&gt;, it will not work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-padding&#34;&gt;3. &lt;code&gt;padding()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Adds an equal padding amount to specific edges of this view.&lt;/p&gt;
&lt;p&gt;padding 不要理解成 css 中的 padding 内边距, 在 swiftui 中它更像是一个外边距, 应用哪个 view 上面, 就会为其产生外边距, 而不是内侧. 我们看一下 padding 的词典解释: soft material such as foam or cloth used to pad or stuff something. 填充的东西, 比如在亚马逊买的杯子, 快递盒子里面有个泡沫, 泡沫里面才是 杯子, 而这个泡沫就是被子的 padding. 所以应用 padding modifier 的顺序也是至关重要.&lt;/p&gt;
&lt;p&gt;原理: The &lt;code&gt;padding&lt;/code&gt; modifier adds padding to a view. It does so by taking the proposed size and subtracting the padding.&lt;/p&gt;
&lt;p&gt;解释:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SwiftUI布局是一个自上而下的过程, 父视图向 padding 提议一个可用的尺寸（proposed size）如 30&lt;/li&gt;
&lt;li&gt;&lt;code&gt;padding&lt;/code&gt; 收到 proposed size: 30, 会减去 16(默认) = 14, 将 proposed size = 14 传给子视图&lt;/li&gt;
&lt;li&gt;原始视图基于这个较小的建议尺寸来决定自己的大小 (可以遵从或者不遵从, 取决与 view 的类型和应用的 modifier, 如 &lt;code&gt;.fixedSize()&lt;/code&gt; 就会让 view 一直 report 理想的尺寸, 而不是父视图 propose 的尺寸)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/07/a882160400235c6d24501f1d7da567c0.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/07/5307d95b2a1819df63696dff31854401.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-aspectratio1-contentmode-fit-和--resizable&#34;&gt;4. &lt;code&gt;.aspectRatio(1, contentMode: .fit)&lt;/code&gt; 和  &lt;code&gt;.resizable()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;.aspectRatio()&lt;/code&gt; 最常见的就是和 &lt;code&gt;.resizable()&lt;/code&gt; 一起使用.&lt;/p&gt;
&lt;h3 id=&#34;41-resizable&#34;&gt;4.1. &lt;code&gt;.resizable()&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resizable&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    capInsets: EdgeInsets = EdgeInsets(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resizingMode: Image.ResizingMode = .stretch
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) -&amp;gt; Image
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// stretch: A mode to enlarge or reduce the size of an image so that it fills the available space.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以应用了 resizable 的图片, 大小是根据可以用空间改变的, 这里的可用空间也可以理解为父视图为其 propose 的尺寸.&lt;/p&gt;
&lt;p&gt;如下, 图片默认, 是不接受父视图的 propose size, 只会 report 自己的 size.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/07/deec310feffb04bd8358afc2160c004c.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;加上 resizable, 图片便会接受 proposed size, 而  &lt;code&gt;aspectRatio(...)&lt;/code&gt; 刚好就是修改 proposed size 的 (根据指定比例), 它俩天生一对.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/07/0b21372a47e485e9de0514800f46357b.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;比如我让图片的比例显示为正方形:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/07/34929a01980bc6d950df3cb460b6b702.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;虽然是正方形了, 宽高比为 1:1, 可能会问, 不是说 &lt;code&gt;resizable()&lt;/code&gt; 让图片接受 propose size 吗, 为什么还是超出了 frame, 你仔细看清楚, 图片的直接上级是  &lt;code&gt;aspectRatio(...)&lt;/code&gt; 而不是 &lt;code&gt;VStack&lt;/code&gt; 的 &lt;code&gt;frame&lt;/code&gt;, frame 给 vstack 一个 propose size, 然后 vstack 再把这个 size 传递给 &lt;code&gt;aspectRatio(...)&lt;/code&gt;, 即 width: 200, height: 300, 然后我们给 &lt;code&gt;aspectRatio(...)&lt;/code&gt; 的参数是 .fill, 宽高比为 1, 所以 &lt;code&gt;aspectRatio(...)&lt;/code&gt; 修改 propose size 为 300 * 300 给 image, 因此呈现了现在的结果, 此时可以配合 &lt;code&gt;.clipShape()&lt;/code&gt; 剪切掉图片多余的部分.&lt;/p&gt;
&lt;h3 id=&#34;42-aspectratio&#34;&gt;4.2. &lt;code&gt;aspectRatio(...)&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一个参数是宽高比（可选）, 若不提供, 则向上级 report 子视图理想的宽高比.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二个参数 &lt;code&gt;contentMode&lt;/code&gt;: A flag indicating whether this view should fit or fill the parent context.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看个例子就明白了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/07/ac21acd601632c0d4631b04101704a54.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/07/6030eaef9667219db109b234fc47f51b.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: In the initial image example, we didn&amp;rsquo;t specify a fixed aspect ratio. By leaving the parameter off, the underlying view&amp;rsquo;s &lt;a href=&#34;https://www.swiftuifieldguide.com/layout/ideal-size/&#34;&gt;ideal size&lt;/a&gt; is used to compute the aspect ratio. To compute the ideal size, the aspect ratio first proposes a &lt;code&gt; nil×nil&lt;/code&gt; size to its child. The child&amp;rsquo;s ideal size is used as the aspect ratio, and the aspect ratio then either fits or fills a rectangle with the computed ratio within its proposal. &lt;a href=&#34;https://arc.net/l/quote/soiifgxm&#34;&gt;swiftuifieldguide.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;.fill&lt;/code&gt; 常与&lt;code&gt;.clipShape()&lt;/code&gt;搭配使用.  &lt;strong&gt;当你想确保 frame 被完全填满, 不留空白时使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fit&lt;/code&gt; 适应  frame, 当打算显示整个图像, 不丢失任何部分时使用&lt;/p&gt;
&lt;h3 id=&#34;43-gotchas-httpswwwswiftuifieldguidecomlayoutaspect-ratiogotchas&#34;&gt;4.3. &lt;a href=&#34;https://www.swiftuifieldguide.com/layout/aspect-ratio/#gotchas&#34;&gt;Gotchas &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Perhaps surprisingly, the aspect ratio modifier only changes the &lt;em&gt;proposal&lt;/em&gt;. For example, in &lt;a href=&#34;https://www.swiftuifieldguide.com/layout/aspect-ratio/#gotchas&#34;&gt;the view below&lt;/a&gt;, it&amp;rsquo;ll propose a square size to the text. However, as we can see from the border, the aspect ratio directly &lt;em&gt;reports&lt;/em&gt; its child&amp;rsquo;s size, and it doesn&amp;rsquo;t report a square size.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/07/c75f7a5823677fad634f98958e21c3eb.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面这句话中的 proposal 和 report 是什么?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The essence of SwiftUI&amp;rsquo;s layout system is very simple: a parent &lt;strong&gt;proposes&lt;/strong&gt; a size to its child, and the child &lt;strong&gt;reports&lt;/strong&gt; a size.&lt;/p&gt;
&lt;p&gt;发现一个&lt;a href=&#34;https://www.swiftuifieldguide.com/layout/introduction/#proposing&#34;&gt;动画&lt;/a&gt;很清楚的解释了这一过程, 可以去查看, 如果不是很理解可以看这个视频: &lt;a href=&#34;https://www.youtube.com/watch?v=04fzFk367Dg&amp;amp;t=28s&#34;&gt;How layout works in SwiftUI &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All SwiftUI layout happens in three simple steps, and understanding these steps is the key to getting great layouts every time. The steps are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A parent view proposes a size for its child.&lt;/li&gt;
&lt;li&gt;Based on that information, the child then chooses its own size and the parent &lt;em&gt;must&lt;/em&gt; respect that choice.&lt;/li&gt;
&lt;li&gt;The parent then positions the child in its coordinate space.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;再看最上面那句话: the aspect ratio modifier only changes the &lt;em&gt;proposal&lt;/em&gt;, 显然这是在说 aspect ratio modifier 只会偷偷修改建议尺寸的大小(比例), 但是孩子上报的尺寸 他会如实上报, 即我把我的建议尺寸给你, 接不接受就看你自己了. 且 swiftui 的逻辑是, 上级视图必须无条件接受(上报)下级尺寸的报告.&lt;/p&gt;
&lt;p&gt;了解更多: &lt;a href=&#34;https://www.swiftuifieldguide.com/layout/aspect-ratio/#gotchas&#34;&gt;Aspect Ratio - SwiftUI Field Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.swiftuifieldguide.com/layout/aspect-ratio/&#34;&gt;Aspect Ratio - SwiftUI Field Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.swiftuifieldguide.com/layout/introduction/&#34;&gt;Introduction - SwiftUI Field Guide&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-flexible-frames&#34;&gt;5. Flexible Frames&lt;/h3&gt;
&lt;p&gt;A flexible frame allows us to specify a minimum, ideal, and maximum value for each dimension. We can think of a frame as a “wrapper” view around its child that can &lt;strong&gt;both change the proposal to its child and change the reported size&lt;/strong&gt;. One the most common usages is using &lt;code&gt;maxWidth: .infinity&lt;/code&gt; to fill up the available width.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One the most common usages is using &lt;code&gt;maxWidth: .infinity&lt;/code&gt; to fill up the available width. 注意, 是 maxWidth 不是 width.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;frame 的默认宽度是其子视图的 report width,  若指定 &lt;code&gt;maxWidth: .infinity&lt;/code&gt; , 则 frame 会填满父视图, 若父视图宽度小于子视图的 report width, frame 的宽度将保持在 子视图的 report width, 类似 [child&amp;rsquo;s report width, .infinity)&lt;/p&gt;
&lt;p&gt;可以使用 &lt;code&gt;minWidth: 0&lt;/code&gt;, 无条件接受父视图的宽度,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If we want to unconditionally accept the proposed width (regardless of the content&amp;rsquo;s width), we can specify a minimum width of &lt;code&gt;0&lt;/code&gt; and a maximum width of &lt;code&gt;.infinity&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;References: &lt;a href=&#34;https://www.swiftuifieldguide.com/layout/flexible-frames/&#34;&gt;Flexible Frames - SwiftUI Field Guide&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-实例分析&#34;&gt;5. 实例分析&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/07/2cbd400fbd4b67eb7cbb16d3235f2c3f.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;前面了提到了 &lt;code&gt;.resizable()&lt;/code&gt; 的默认行为: A mode to enlarge or reduce the size of an image so that it fills the available space. 宽度被 LazyVGrid 平均分配好了(两列), 图片想要填满屏幕, 就被纵向拉伸, 变成上图的样子.&lt;/p&gt;
&lt;p&gt;加下来我们使用 &lt;code&gt;.aspectRatio(contentMode: .fill)&lt;/code&gt;, 前面也提到了 &lt;code&gt;.aspectRatio()&lt;/code&gt; 会根据比例修改 propose size, 我们没有指定比例, 所以比例就是原图的比例, 因为宽度确定了, 所以为了保持原图的比例, 图片自然就变得没那么长了. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/07/33b3eaa93f02824289f4472a95509ed1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可是为啥宽度不一样呢? 很简单, 左边的图比较宽, LazyVGrid 会给每行分配相同的高度,  也就是两张图的  &lt;code&gt;.aspectRatio()&lt;/code&gt;  接受到的高度是相同的, 但是比例不同(各自图片的比例),   &lt;code&gt;.aspectRatio()&lt;/code&gt;  会根据现在的宽度高度和比例来修改修改后的 propose size (如192*158) 肯定也不同,  &lt;code&gt;.resizable() &lt;/code&gt; 会完全接受 propose size, 所以两张图的宽度不同,&lt;/p&gt;
&lt;p&gt;想让宽度相同, 可以给相同的比例:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/07/2a6f50eb50ed95c4d5c54953f00f771e.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/07/4b789f645112c205d5649edeb6029025.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;但如果我们不想让图片被拉伸,  想保持原图的比例呢, 那就使用 Flexible Frame, 提供 minWidth: 0, 意思是无条件接受上级propose width, 因为我们两列都是 flexible: &lt;code&gt;[.init(.flexible()), .init(.flexible())]&lt;/code&gt;, LazyVGrid 分配的宽度自然也相同, frame 就得到了相同的宽度,  前面提到了 frame 会修改 report size from child, 也就是说无论 child 的尺寸是多少, frame 都会向上级报告自己的尺寸,&lt;/p&gt;
&lt;p&gt;当然  &lt;code&gt;.aspectRatio()&lt;/code&gt;  会修改 frame 传递的尺寸, 因为有比例存在, 这没关系, 我们最后在 frame 上使用 clip 就好了.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/07/05aacc4a64e76ac0a4216217e3d0e03f.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/07/dfa3cc016b54ca0f77e016dcf1de53b3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>SwiftUI Views</title>
      <link>https://blog.jiyi27.com/posts/ios/swiftui/006-reuse-views/</link>
      <pubDate>Thu, 06 Jun 2024 21:55:30 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/ios/swiftui/006-reuse-views/</guid>
      <description>&lt;h2 id=&#34;1-custom-button&#34;&gt;1. Custom Button&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AFButton&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; title: String
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Text(title)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .font(.title2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .fontWeight(.semibold)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .frame(width: &lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;, height: &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .background(Color.red)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .foregroundColor(.white)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .clipShape(RoundedRectangle(cornerSize: CGSize(width: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, height: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ---------------------------------&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Button {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    isShowingSafariView = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} label: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    AFButton(title: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Learn More&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/0ae5d310c2858d87849da41815dcdf22.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/9c65f6e30f91557aafbd388f268c4bea.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-system-button&#34;&gt;2. System Button&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/793f52e618bd81d76dd8d2c3e2aa8345.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-sheet&#34;&gt;3. Sheet&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/2499a584512d308df3ef3d8080cc3651.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Learn more: &lt;a href=&#34;https://developer.apple.com/documentation/swiftui/view/sheet%28ispresented:ondismiss:content:%29&#34;&gt;sheet(isPresented:onDismiss:content:) | Apple Developer Documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-label--infinity&#34;&gt;4. Label &amp;amp; &lt;code&gt;.infinity&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;指定宽度或高度时使用, 填充宽度或者高度整个屏幕, 无论屏幕多宽或者多高,&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-custom-button&#34;&gt;1. Custom Button&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AFButton&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; title: String
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Text(title)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .font(.title2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .fontWeight(.semibold)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .frame(width: &lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;, height: &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .background(Color.red)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .foregroundColor(.white)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .clipShape(RoundedRectangle(cornerSize: CGSize(width: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, height: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ---------------------------------&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Button {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    isShowingSafariView = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} label: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    AFButton(title: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Learn More&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/0ae5d310c2858d87849da41815dcdf22.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/9c65f6e30f91557aafbd388f268c4bea.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-system-button&#34;&gt;2. System Button&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/793f52e618bd81d76dd8d2c3e2aa8345.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-sheet&#34;&gt;3. Sheet&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/2499a584512d308df3ef3d8080cc3651.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Learn more: &lt;a href=&#34;https://developer.apple.com/documentation/swiftui/view/sheet%28ispresented:ondismiss:content:%29&#34;&gt;sheet(isPresented:onDismiss:content:) | Apple Developer Documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-label--infinity&#34;&gt;4. Label &amp;amp; &lt;code&gt;.infinity&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;指定宽度或高度时使用, 填充宽度或者高度整个屏幕, 无论屏幕多宽或者多高,&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/2c32221b7ca5738e95775e5f1dc9b81e.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Property Wrappers - SwiftUI</title>
      <link>https://blog.jiyi27.com/posts/ios/swiftui/002-property-wrappers/</link>
      <pubDate>Sun, 02 Jun 2024 16:32:10 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/ios/swiftui/002-property-wrappers/</guid>
      <description>&lt;h2 id=&#34;1-state&#34;&gt;1. @State&lt;/h2&gt;
&lt;h3 id=&#34;11-basic-concepts&#34;&gt;1.1. Basic Concepts&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;@State&lt;/code&gt; is a property wrapper struct that just wraps any value to make sure your view will refresh or redraw &lt;strong&gt;whenever that value changes&lt;/strong&gt;. References: &lt;a href=&#34;https://stackoverflow.com/a/59616812/16317008&#34;&gt;https://stackoverflow.com/a/59616812/16317008&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Always declare state as private,&lt;/strong&gt; and place it in the highest view in the view hierarchy that needs access to the value. Learn more: &lt;a href=&#34;https://stackoverflow.com/a/72946113/16317008&#34;&gt;https://stackoverflow.com/a/72946113/16317008&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;@State 修饰的变量声明的时候要初始化, 因为 @State 一般都会被 private 修饰, 在外部通过 init() 初始化会报错, 而 @Binding 修饰的变量声明时不应该有值, 因为它要接受外部的 binding 值, 以便可以修改, 正如&lt;a href=&#34;https://arc.net/l/quote/itwvjdmw&#34;&gt;文档&lt;/a&gt;所表述: A binding connects a property to a source of truth stored elsewhere, instead of storing data directly.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-state&#34;&gt;1. @State&lt;/h2&gt;
&lt;h3 id=&#34;11-basic-concepts&#34;&gt;1.1. Basic Concepts&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;@State&lt;/code&gt; is a property wrapper struct that just wraps any value to make sure your view will refresh or redraw &lt;strong&gt;whenever that value changes&lt;/strong&gt;. References: &lt;a href=&#34;https://stackoverflow.com/a/59616812/16317008&#34;&gt;https://stackoverflow.com/a/59616812/16317008&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Always declare state as private,&lt;/strong&gt; and place it in the highest view in the view hierarchy that needs access to the value. Learn more: &lt;a href=&#34;https://stackoverflow.com/a/72946113/16317008&#34;&gt;https://stackoverflow.com/a/72946113/16317008&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;@State 修饰的变量声明的时候要初始化, 因为 @State 一般都会被 private 修饰, 在外部通过 init() 初始化会报错, 而 @Binding 修饰的变量声明时不应该有值, 因为它要接受外部的 binding 值, 以便可以修改, 正如&lt;a href=&#34;https://arc.net/l/quote/itwvjdmw&#34;&gt;文档&lt;/a&gt;所表述: A binding connects a property to a source of truth stored elsewhere, instead of storing data directly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@State &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; isPlaying: Bool = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@State &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; itemList = [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Item(name: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Apple&amp;#34;&lt;/span&gt;, count: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Item(name: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Banana&amp;#34;&lt;/span&gt;, count: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Item(name: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cherry&amp;#34;&lt;/span&gt;, count: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Binding &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; isPlaying: Bool 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;@State 既可以修饰单个值也可以修饰数组, 若想监控数组里元素的属性变化更新页面, 则元素的类型必须是 &lt;code&gt;@Observable&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/07/4d2c6bbeba01837b4aba7998f8a1458e.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;12-step-further&#34;&gt;1.2. Step Further&lt;/h3&gt;
&lt;p&gt;看到&lt;a href=&#34;https://onevcat.com/2021/01/swiftui-state/&#34;&gt;一篇文章&lt;/a&gt;可以帮助理解State: 在 SwiftUI 中, 我们使用 &lt;code&gt;@State&lt;/code&gt; 进行私有状态管理，并驱动 &lt;code&gt;View&lt;/code&gt; 的显示，下面的 &lt;code&gt;ContentView&lt;/code&gt; 将在点击加号按钮时将显示的数字 +1：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @State &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; value = &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        VStack(alignment: .leading) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\(&lt;/span&gt;value&lt;span style=&#34;color:#e6db74&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Button(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;) { value &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当我们想要将这个状态值传递给下层子 View 的时候，直接在子 View 中声明一个变量就可以了:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DetailView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; number: Int
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\(&lt;/span&gt;number&lt;span style=&#34;color:#e6db74&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @State &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; value = &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        VStack(alignment: .leading) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            DetailView(number: value)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Button(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;) { value &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;ContentView&lt;/code&gt; 中的 &lt;code&gt;@State value&lt;/code&gt; 发生改变时，&lt;em&gt;&lt;code&gt;ContentView.body&lt;/code&gt; 被重新求值，&lt;code&gt;DetailView&lt;/code&gt; 将被重新创建&lt;/em&gt;，包含新数字的 &lt;code&gt;Text&lt;/code&gt; 被重新渲染。&lt;/p&gt;
&lt;p&gt;另外还有一些想说的, 看下面代码:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/07/3b1b8f7d3bab518149631f08b510d54c.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;每次点击按钮, DetailView 的数字也会变化, 这就意味着每次 ContentView 被重新渲染的时候, 它的子 view 也被重新渲染了, 可是根据&lt;a href=&#34;https://arc.net/l/quote/ekwiznyu&#34;&gt;官方文档&lt;/a&gt;表述: When the @State value changes, SwiftUI updates the parts of the view hierarchy that depend on the value. 可是子 view &lt;code&gt;DetailView&lt;/code&gt; 并没有依赖 @State value, 为什么还会被更新呢, 难道说每次 view 更新都会带着更新他的所有子 views? 答案是: 对的, 所以每次我们要把一个View分成好多 subviews, 这样才能更好的控制更新的粒度, 而不是每次更新都全部重建, 了解更多: &lt;a href=&#34;https://stackoverflow.com/questions/78635057/why-does-one-child-view-in-swiftui-re-render-on-parent-state-change-but-another&#34;&gt;swift - Why does one child view in SwiftUI re-render on parent state change but another doesn&amp;rsquo;t? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SwiftData 补充: &lt;code&gt;@Model&lt;/code&gt; = &lt;code&gt;@Model&lt;/code&gt; + &lt;code&gt;@Observable&lt;/code&gt;, &lt;code&gt;@Query&lt;/code&gt; = &lt;code&gt;@State&lt;/code&gt; +  &lt;code&gt;@Query&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;另外修改 &lt;code&gt;@Query&lt;/code&gt; 标记的数组内的元素属性, 框架会自动保存到数据库, 但肯能会延迟, 想要立即生效, 需要使用 context强制立刻保存.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2-published&#34;&gt;2. @Published&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️ The &lt;code&gt;@Observable&lt;/code&gt; Macro was first introduced during WWDC 2023 to replace &lt;code&gt;ObservableObject&lt;/code&gt; and its &lt;code&gt;@Published&lt;/code&gt; parameters. It is now recommended to use the &lt;code&gt;Observable&lt;/code&gt; macro to create observable objects. &lt;a href=&#34;https://www.youtube.com/watch?v=EK7SthdWV2w&amp;amp;t=306s&#34;&gt;Click to learn more&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In practical terms, that means &lt;strong&gt;whenever an object with a property marked&lt;/strong&gt; &lt;code&gt;@Published&lt;/code&gt; is changed, all views using that object will be reloaded to reflect those changes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/429b5b2b4d2b2bb43f74563fa5c27715.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/02e6f5fb20d45ebdc1f70a677f0d42f4.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Learn more: &lt;a href=&#34;https://www.youtube.com/watch?v=EK7SthdWV2w&amp;amp;t=306s&#34;&gt;SwiftUI Data Flow in iOS 17 - Observation &amp;amp; @Observable - YouTube&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MVVM: &lt;a href=&#34;https://www.youtube.com/watch?v=FwGMU_Grnf8&#34;&gt;SwiftUI - Intro to MVVM | Example Refactor | Model View ViewModel&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-binding-vs-bindable&#34;&gt;3. @Binding vs @Bindable&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;SwiftData: @Bindable 即可将修改数据的数据实时保存到数据库 不用调用 context 其它函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@Binding 用于创建对&lt;strong&gt;某个值&lt;/strong&gt;的引用，允许子视图修改父视图中的状态。它主要用于简单的值类型，如 Bool、Int、String 等。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ParentView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @State &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; isOn = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        VStack {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Switch is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\(&lt;/span&gt;isOn ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;on&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;off&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ChildView(isOn: &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;isOn)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ChildView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Binding &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; isOn: Bool
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Toggle(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Toggle Switch&amp;#34;&lt;/span&gt;, isOn: &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;isOn)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有时候也可以直接传递引用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Book 是 class 不是 struct&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @State &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; book = Book()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        BookCheckoutView(book: book) &lt;span style=&#34;color:#75715e&#34;&gt;// 直接传递引用给子视图&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BookCheckoutView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; book: Book
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Button(book.isAvailable ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Check out book&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Return book&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            book.isAvailable.toggle()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;@Bindable 是在 iOS 17 中引入的，用于处理遵循 Observable 协议的&lt;strong&gt;引用类型对象&lt;/strong&gt;。它允许在视图中直接绑定到可观察对象的属性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Observable &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserProfile&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; name: String = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; age: Int = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ProfileView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Bindable &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; profile: UserProfile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Form {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// 绑定 profile 的 name 和 age 属性, 与上面 Book 例子不同, 这里绑定的是对象的属性, 而不是修改&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            TextField(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;, text: &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;profile.name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Stepper(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Age: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\(&lt;/span&gt;profile.age&lt;span style=&#34;color:#e6db74&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, value: &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;profile.age)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @State &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; userProfile = UserProfile()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ProfileView(profile: userProfile)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文档说的很详细: &lt;a href=&#34;https://developer.apple.com/documentation/swiftui/state&#34;&gt;State | Apple Developer Documentation&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>零碎知识 &#43; 踩坑 - SwiftUI</title>
      <link>https://blog.jiyi27.com/posts/ios/swiftui/003-nuggets-swiftui/</link>
      <pubDate>Fri, 31 May 2024 16:17:30 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/ios/swiftui/003-nuggets-swiftui/</guid>
      <description>&lt;h3 id=&#34;1-使用-hstack-水平排列&#34;&gt;1. 使用 HStack 水平排列&lt;/h3&gt;
&lt;p&gt;注意: Button 直接放入 VStack, 默认会在中间,&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/2f90b40d6bfa9c748e1f9dce5ec3a737.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-擅用三元操作符&#34;&gt;2. 擅用三元操作符&lt;/h3&gt;
&lt;p&gt;刚开始想到的是新增一个 buttonName 属性, button 被点击时根据 showChild 来修改 buttonName 的值, 这样太麻烦了.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/e782ef3efeb84ce96b8952fa9ee20d46.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-navigationlink-内-button-点击不会生效&#34;&gt;3. NavigationLink 内 Button 点击不会生效&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NavigationLink (destination: ...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ReminderCatagoryView(reminderCount: allReminders.count, catagoryName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ReminderCatagoryView {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some view {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Image(systemName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag.slash&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .onTapGesture(perform: onDropped) &lt;span style=&#34;color:#75715e&#34;&gt;// 使用onTapGesture&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4-隐藏-navigationlink-的箭头&#34;&gt;4. 隐藏 NavigationLink 的箭头&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;List { 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ForEach(elements) { element &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ZStack {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            CustomView(element: element)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            NavigationLink(destination: DestinationView()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                EmptyView()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }.opacity(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/a/68779379/16317008&#34;&gt;https://stackoverflow.com/a/68779379/16317008&lt;/a&gt;&lt;/p&gt;</description>
      <content>&lt;h3 id=&#34;1-使用-hstack-水平排列&#34;&gt;1. 使用 HStack 水平排列&lt;/h3&gt;
&lt;p&gt;注意: Button 直接放入 VStack, 默认会在中间,&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/2f90b40d6bfa9c748e1f9dce5ec3a737.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-擅用三元操作符&#34;&gt;2. 擅用三元操作符&lt;/h3&gt;
&lt;p&gt;刚开始想到的是新增一个 buttonName 属性, button 被点击时根据 showChild 来修改 buttonName 的值, 这样太麻烦了.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/e782ef3efeb84ce96b8952fa9ee20d46.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-navigationlink-内-button-点击不会生效&#34;&gt;3. NavigationLink 内 Button 点击不会生效&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NavigationLink (destination: ...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ReminderCatagoryView(reminderCount: allReminders.count, catagoryName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ReminderCatagoryView {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some view {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Image(systemName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag.slash&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .onTapGesture(perform: onDropped) &lt;span style=&#34;color:#75715e&#34;&gt;// 使用onTapGesture&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4-隐藏-navigationlink-的箭头&#34;&gt;4. 隐藏 NavigationLink 的箭头&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;List { 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ForEach(elements) { element &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ZStack {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            CustomView(element: element)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            NavigationLink(destination: DestinationView()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                EmptyView()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }.opacity(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/a/68779379/16317008&#34;&gt;https://stackoverflow.com/a/68779379/16317008&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-使用-swiftdata-predicate-的-view-不可以直接放到-navigationstack-中&#34;&gt;5. 使用 SwiftData &lt;code&gt;Predicate&lt;/code&gt; 的 View 不可以直接放到 NavigationStack 中&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 加一层 DummyView()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        NavigationStack {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            DummyView()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DummyView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ListsView()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ListsView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Environment(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;.modelContext) &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; modelContext
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Query(filter: #Predicate&amp;lt;Item&amp;gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; }) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;6-list-item-宽度填满屏幕&#34;&gt;6. List Item 宽度填满屏幕&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;List {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.listStyle(PlainListStyle())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;7-本地后台通知-badge-数目&#34;&gt;7. 本地后台通知 badge 数目&lt;/h3&gt;
&lt;p&gt;被新出的接口 &lt;code&gt;setBadgeCount(_ newBadgeCount: Int)&lt;/code&gt; 误导了, 想着维护一个本地 count, 每次通知来了增加一, 可是 &lt;code&gt;UNUserNotificationCenterDelegate&lt;/code&gt; 压根没有 &lt;em&gt;应用在后台时 来新通知&lt;/em&gt; 的回调函数, 只有下面这个两个:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;userNotificationCenter(_ center:, willPresent:)&lt;/code&gt;: get called the app was running in the foreground.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;userNotificationCenter(_ center:, didReceive:)&lt;/code&gt;: get called user interact with the notification.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;苦逼的我苦苦思索了一下午不得解, 最后还是用了原来的旧方法:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createNotificationContent&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; reminder: Reminder) -&amp;gt; UNMutableNotificationContent {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; content = UNMutableNotificationContent()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    content.title = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;有任务要做啦&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    content.body = reminder.title
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    content.sound = .&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#39;applicationIconBadgeNumber&amp;#39; was deprecated in iOS 17.0: Use -[UNUserNotificationCenter setBadgeCount:withCompletionHandler:] instead. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    content.badge = NSNumber(value: UIApplication.shared.applicationIconBadgeNumber &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; content
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;8-监控从后台进入主页面事件&#34;&gt;8. 监控从后台进入主页面事件&lt;/h3&gt;
&lt;p&gt;除了 scene delegate, 比较简单的方法是使用 onReceive() modifier,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;todolistApp&lt;/span&gt;: App {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some Scene {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WindowGroup {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            HomeView()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .onReceive(NotificationCenter.&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;.publisher(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;: UIApplication.didBecomeActiveNotification)) { &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    NotificationManager.clearBadges()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;9-强制更新页面&#34;&gt;9. 强制更新页面&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NavigationStack {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .id(refreshID)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .onReceive(willEnterForegroundNotification) { &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        refreshID = UUID()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; willEnterForegroundNotification: NotificationCenter.Publisher {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NotificationCenter.&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;.publisher(&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;: UIApplication.willEnterForegroundNotification)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;10-group&#34;&gt;10. Group&lt;/h3&gt;
&lt;p&gt;However, it performs an important purpose as a transparent layout container: it gives us the ability to add SwiftUI modifiers to multiple views without changing their layout, or send back multiple views without using &lt;code&gt;@ViewBuilder&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.hackingwithswift.com/books/ios-swiftui/using-groups-as-transparent-layout-containers&#34;&gt;Using groups as transparent layout containers - a free Hacking with iOS: SwiftUI Edition tutorial&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;11-navigationstack-modifiers-issues&#34;&gt;11. NavigationStack Modifiers Issues&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Modifier Placement&lt;/strong&gt;: All modifiers should be applied to the direct child view of the NavigationStack, not to the NavigationStack itself. &lt;code&gt;.overly(alignment: .bottomLeading) {...}&lt;/code&gt;, &lt;code&gt;.searchable(text: $searchText)&lt;/code&gt;, &lt;code&gt;.navigationTitle(&amp;quot;...&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Persistent Views&lt;/strong&gt;: Any view or control added directly to the NavigationStack will appear on every page within that navigation context, regardless of how deep you navigate.&lt;/p&gt;
&lt;h3 id=&#34;12-按钮不容易点击成功&#34;&gt;12. 按钮不容易点击成功&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Menu {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    menuContent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} label: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Image(systemName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ellipsis&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .foregroundColor(.secondary)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .padding() &lt;span style=&#34;color:#75715e&#34;&gt;// 增加图标那边距, 直接增加 Menu 内边距无效果. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 或者使用: .frame(width: 44, height: 44)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;13-geometryreader--side-effect-expand-space&#34;&gt;13. &lt;code&gt;GeometryReader&lt;/code&gt;  side effect: expand space&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;GeometryReader&lt;/code&gt; has an interesting side effect that might catch you out at first: the view that gets returned has a flexible preferred size, which means it will expand to take up more space as needed. You can see this in action if you place the &lt;code&gt;GeometryReader&lt;/code&gt; into a &lt;code&gt;VStack&lt;/code&gt; then put some more text below it, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        VStack {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            GeometryReader { proxy &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .frame(width: proxy.size.width &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.9&lt;/span&gt;, height: &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .background(.red)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;More text&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .background(.blue)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;References: &lt;a href=&#34;https://www.hackingwithswift.com/books/ios-swiftui/understanding-frames-and-coordinates-inside-geometryreader&#34;&gt;Understanding frames and coordinates inside GeometryReader&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>SwiftUI Basics - Weather App</title>
      <link>https://blog.jiyi27.com/posts/ios/swiftui/001-basics/</link>
      <pubDate>Mon, 27 May 2024 18:26:30 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/ios/swiftui/001-basics/</guid>
      <description>&lt;h3 id=&#34;1-the-order-of-applying-modifiers-matters&#34;&gt;1. The Order of Applying Modifiers matters&lt;/h3&gt;
&lt;p&gt;可以看出 background 并没有作用在 frame 上, 即每个 modifier 都是返回了一个新的视图, 当前 modifier 都是作用在了前面的视图上, 所以使用 modifier 的顺序会影响最终视图的结果,&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/05/df1383f3a902606d7301b8da47bff81f.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-image--space&#34;&gt;2. Image &amp;amp; Space&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/05/8a5cd0431f346d79496187cf2c56c5ea.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;把 Spacer() 理解成一个双向弹簧, 负责挤压元素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3-background-color---lineargradient&#34;&gt;3. Background Color - LinearGradient&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BackgroundView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; isNight: Bool
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        LinearGradient(gradient: Gradient(colors: [isNight ? .black : .blue, isNight ? .gray : .white]), startPoint:.top, endPoint: .bottom)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .edgesIgnoringSafeArea(.all)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 在 ZStack 中创建背景实例&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ZStack {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BackgroundView(isNight: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 其他组件...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除了 LinearGradient() 还可以使用ContainerRelativeShape()创建背景, 另外颜色也有 &lt;code&gt;.gradient &lt;/code&gt; 属性, 即不用像上面那样手动指定开头结尾了, 比较简洁但失去了定制性.&lt;/p&gt;</description>
      <content>&lt;h3 id=&#34;1-the-order-of-applying-modifiers-matters&#34;&gt;1. The Order of Applying Modifiers matters&lt;/h3&gt;
&lt;p&gt;可以看出 background 并没有作用在 frame 上, 即每个 modifier 都是返回了一个新的视图, 当前 modifier 都是作用在了前面的视图上, 所以使用 modifier 的顺序会影响最终视图的结果,&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/05/df1383f3a902606d7301b8da47bff81f.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-image--space&#34;&gt;2. Image &amp;amp; Space&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/05/8a5cd0431f346d79496187cf2c56c5ea.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;把 Spacer() 理解成一个双向弹簧, 负责挤压元素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3-background-color---lineargradient&#34;&gt;3. Background Color - LinearGradient&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BackgroundView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; isNight: Bool
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        LinearGradient(gradient: Gradient(colors: [isNight ? .black : .blue, isNight ? .gray : .white]), startPoint:.top, endPoint: .bottom)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .edgesIgnoringSafeArea(.all)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 在 ZStack 中创建背景实例&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ZStack {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  BackgroundView(isNight: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 其他组件...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除了 LinearGradient() 还可以使用ContainerRelativeShape()创建背景, 另外颜色也有 &lt;code&gt;.gradient &lt;/code&gt; 属性, 即不用像上面那样手动指定开头结尾了, 比较简洁但失去了定制性.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BackgroundView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; isNight: Bool
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ContainerRelativeShape()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .fill(.blue.gradient) &lt;span style=&#34;color:#75715e&#34;&gt;// 颜色可以用 .gradient&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .ignoresSafeArea()  &lt;span style=&#34;color:#75715e&#34;&gt;// 背景全屏&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4-读文档&#34;&gt;4. 读文档&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Button {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} label: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Change Location&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .frame(width: &lt;span style=&#34;color:#ae81ff&#34;&gt;280&lt;/span&gt;, height: &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .background(.white)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .font(.system(size: &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, weight: .bold, design: .&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .clipShape(RoundedRectangle(cornerSize: CGSize(width: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, height: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看 &lt;code&gt;clipShape&lt;/code&gt; 的签名:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clipShape&lt;/span&gt;&amp;lt;S&amp;gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; shape: S,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    style: FillStyle = FillStyle()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) -&amp;gt; some View &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; S : Shape
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;style 有默认值可以不填, shape 没有默认值, 所以主要看 shape.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shape 为类型 S 即符合 协议 Shape 的任何对象都可以, 那就看看 Shape 协议是什么.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开开发者文档, 找到 Shape 往下拉, 找到 Conforming Types, 可以发现有好多 shape 可以使用,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这里选择 RoundedRectangle, 点击, 查看其初始化函数, 看看怎么创建 RoundedRectangle 对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有两个初始化函数, 这里选择&lt;code&gt;init(cornerSize: CGSize, style: RoundedCornerStyle = .continuous)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两个参数, cornerSize 不可省略, 查看 &lt;code&gt;CGSize&lt;/code&gt; 构造函数: &lt;code&gt;init(width: Float, height: Float)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后创建出圆角矩形: &lt;code&gt;.clipShape(RoundedRectangle(cornerSize: CGSize(width: 10, height: 10)))&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;5-读文档找-modifiers&#34;&gt;5. 读文档找 modifiers&lt;/h3&gt;
&lt;p&gt;首先, 所有的组件都是 View, 所以下面的 modifier 都可以使用, 比如背景图, 字体颜色, 显示形状 等等, 可以在这找, 如果找某个 view 特有的组件, 那就找那个组件, 然后就可以找到属于它的 modifiers,&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/ff88fc0f5cda332ef32c4edd1849c1b4.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/06/72d568dc4c7861264bbe9e1691659a03.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;6-练习代码&#34;&gt;6. 练习代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ContentView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ZStack {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            LinearGradient(gradient: Gradient(colors: [.blue, .white]), startPoint:.top, endPoint: .bottom)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .edgesIgnoringSafeArea(.all)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            VStack {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Halifax, CA&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;// Every modifier wraps the previous view into another view.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .font(.system(size: &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, weight: .medium, design: .&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .foregroundStyle(.white)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .padding()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                VStack(spacing: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;// spacing: space between views in VStack&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    Image(systemName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sun.snow.fill&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        .renderingMode(.original)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        .resizable() &lt;span style=&#34;color:#75715e&#34;&gt;// 让图像可以调整大小&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        .aspectRatio(contentMode: .fit) &lt;span style=&#34;color:#75715e&#34;&gt;// 缩放模式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        .frame(width: &lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;, height: &lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-3°&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        .font(.system(size: &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;, weight: .medium))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        .foregroundStyle(.white)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .padding(.bottom, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                HStack(spacing: &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    WeatherDayView(imageName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;snow&amp;#34;&lt;/span&gt;, dayOfWeek: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TUE&amp;#34;&lt;/span&gt;, temperature: &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    WeatherDayView(imageName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sun.rain.fill&amp;#34;&lt;/span&gt;, dayOfWeek: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WED&amp;#34;&lt;/span&gt;, temperature: &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    WeatherDayView(imageName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sun.max.fill&amp;#34;&lt;/span&gt;, dayOfWeek: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;THU&amp;#34;&lt;/span&gt;, temperature: &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    WeatherDayView(imageName: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wind&amp;#34;&lt;/span&gt;, dayOfWeek: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FRI&amp;#34;&lt;/span&gt;, temperature: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Spacer() &lt;span style=&#34;color:#75715e&#34;&gt;// Fill the remaining space in a VStack, pushing views above to the top.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Button {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                } label: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Change Location&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        .frame(width: &lt;span style=&#34;color:#ae81ff&#34;&gt;280&lt;/span&gt;, height: &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        .background(.white)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        .font(.system(size: &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, weight: .bold, design: .&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        .clipShape(RoundedRectangle(cornerSize: CGSize(width: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, height: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Spacer() &lt;span style=&#34;color:#75715e&#34;&gt;// 想象成弹簧卡在中间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WeatherDayView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; imageName: String
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; dayOfWeek: String
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; temperature: Int
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        VStack {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Text(dayOfWeek)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .font(.system(size: &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, weight: .medium, design: .&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .foregroundStyle(.white)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .padding()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            VStack(spacing: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Image(systemName: imageName)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .renderingMode(.original)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .resizable()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .aspectRatio(contentMode: .fit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .frame(width: &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, height: &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Text(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\(&lt;/span&gt;temperature&lt;span style=&#34;color:#e6db74&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;°&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .font(.system(size: &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, weight: .medium))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .foregroundStyle(.white)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#Preview {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ContentView()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;效果图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2024/05/69f2f45f523c984efcee3d4c6a98feba.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>

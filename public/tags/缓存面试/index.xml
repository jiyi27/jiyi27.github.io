<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>缓存面试 on 为霜的博客</title>
    <link>https://blog.jiyi27.com/tags/%E7%BC%93%E5%AD%98%E9%9D%A2%E8%AF%95/</link>
    <description>Recent content in 缓存面试 on 为霜的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 13 Apr 2025 21:56:20 +0000</lastBuildDate><atom:link href="https://blog.jiyi27.com/tags/%E7%BC%93%E5%AD%98%E9%9D%A2%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis 常见数据类型的使用场景</title>
      <link>https://blog.jiyi27.com/posts/interview/%E7%BC%93%E5%AD%98%E5%92%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/003-redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</link>
      <pubDate>Sun, 13 Apr 2025 21:56:20 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/interview/%E7%BC%93%E5%AD%98%E5%92%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/003-redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</guid>
      <description>&lt;h2 id=&#34;1-string&#34;&gt;1. String&lt;/h2&gt;
&lt;h3 id=&#34;11-缓存热点数据&#34;&gt;1.1. 缓存热点数据&lt;/h3&gt;
&lt;p&gt;在高并发系统中，频繁查询数据库会导致性能瓶颈，使用 Redis String 缓存数据库查询结果（如用户信息、商品详情）可以显著降低数据库压力：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cached_user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; redis_client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;user_id&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; cached_user:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(cached_user)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; db&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(User)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(user_id)  &lt;span style=&#34;color:#75715e&#34;&gt;# 从数据库查询&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    redis_client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setex(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;user_id&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3600&lt;/span&gt;, json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(user))  &lt;span style=&#34;color:#75715e&#34;&gt;# 缓存 1 小时&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; user
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Redis 中习惯在 KEY 中通过 &lt;code&gt;:&lt;/code&gt; 连接字符串, 这样可以清晰的表达出含义, 如: &lt;code&gt;page:view:article:1001&lt;/code&gt;, 就是一个字符串, 不是什么高级的东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;12-分布式锁&#34;&gt;1.2. 分布式锁&lt;/h3&gt;
&lt;p&gt;在分布式系统中，防止多个服务同时操作同一资源（如库存扣减），Redis String 结合 SETNX（set if not exists）实现简单分布式锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SETNX lock:order:12345 &amp;quot;locked&amp;quot;&lt;/code&gt;（如果 key 不存在，则设置成功，表示获取到锁）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXPIRE lock:order:12345 10&lt;/code&gt;（设置超时时间，防止死锁）&lt;/li&gt;
&lt;li&gt;操作完成后 &lt;code&gt;DEL lock:order:12345&lt;/code&gt;（释放锁）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Redis 中，大部分&lt;strong&gt;单个命令&lt;/strong&gt;都是原子操作，像 &lt;code&gt;SET&lt;/code&gt;、&lt;code&gt;INCR&lt;/code&gt;、&lt;code&gt;SETNX&lt;/code&gt;、&lt;code&gt;DEL&lt;/code&gt; 是绝对原子的，因为 Redis 是单线程执行命令的，这意味着 不会有其他操作在命令执行的过程中打断它，当然也有不是原子操作: &lt;code&gt;GETSET&lt;/code&gt;, &lt;code&gt;MGET / MSET&lt;/code&gt;&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-string&#34;&gt;1. String&lt;/h2&gt;
&lt;h3 id=&#34;11-缓存热点数据&#34;&gt;1.1. 缓存热点数据&lt;/h3&gt;
&lt;p&gt;在高并发系统中，频繁查询数据库会导致性能瓶颈，使用 Redis String 缓存数据库查询结果（如用户信息、商品详情）可以显著降低数据库压力：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cached_user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; redis_client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;user_id&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; cached_user:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(cached_user)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; db&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(User)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(user_id)  &lt;span style=&#34;color:#75715e&#34;&gt;# 从数据库查询&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    redis_client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setex(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;user_id&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3600&lt;/span&gt;, json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(user))  &lt;span style=&#34;color:#75715e&#34;&gt;# 缓存 1 小时&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; user
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Redis 中习惯在 KEY 中通过 &lt;code&gt;:&lt;/code&gt; 连接字符串, 这样可以清晰的表达出含义, 如: &lt;code&gt;page:view:article:1001&lt;/code&gt;, 就是一个字符串, 不是什么高级的东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;12-分布式锁&#34;&gt;1.2. 分布式锁&lt;/h3&gt;
&lt;p&gt;在分布式系统中，防止多个服务同时操作同一资源（如库存扣减），Redis String 结合 SETNX（set if not exists）实现简单分布式锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SETNX lock:order:12345 &amp;quot;locked&amp;quot;&lt;/code&gt;（如果 key 不存在，则设置成功，表示获取到锁）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXPIRE lock:order:12345 10&lt;/code&gt;（设置超时时间，防止死锁）&lt;/li&gt;
&lt;li&gt;操作完成后 &lt;code&gt;DEL lock:order:12345&lt;/code&gt;（释放锁）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Redis 中，大部分&lt;strong&gt;单个命令&lt;/strong&gt;都是原子操作，像 &lt;code&gt;SET&lt;/code&gt;、&lt;code&gt;INCR&lt;/code&gt;、&lt;code&gt;SETNX&lt;/code&gt;、&lt;code&gt;DEL&lt;/code&gt; 是绝对原子的，因为 Redis 是单线程执行命令的，这意味着 不会有其他操作在命令执行的过程中打断它，当然也有不是原子操作: &lt;code&gt;GETSET&lt;/code&gt;, &lt;code&gt;MGET / MSET&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;13-计数器&#34;&gt;1.3. 计数器&lt;/h3&gt;
&lt;p&gt;记录网站的访问量、文章的点赞数、商品的浏览量等，Redis String 支持原子操作 INCR 和 DECR，非常适合计数场景&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;INCR article:view:2001  # 文章 ID 2001 浏览量 +1
GET article:view:2001   # 获取当前浏览量
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;14-短链存储&#34;&gt;1.4. 短链存储&lt;/h3&gt;
&lt;p&gt;实现短链接功能，如 &lt;code&gt;https://tinyurl.com/abcd&lt;/code&gt; 映射到 &lt;code&gt;https://example.com/long-url&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generate_short_code&lt;/span&gt;(url):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;生成短链代码（如 6 位随机字符串或基于 URL 的哈希）&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 简单示例：随机 6 位字符&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    characters &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_letters &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digits
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choice(characters) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_short_url&lt;/span&gt;(long_url, expire_seconds&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2592000&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;创建短链并存储&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    short_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; generate_short_code(long_url)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 确保 short_code 唯一，实际中可能需要重试或哈希&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; redis_client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;short:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;short_code&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        short_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; generate_short_code(long_url)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    redis_client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setex(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;short:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;short_code&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, expire_seconds, long_url)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; short_code
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_long_url&lt;/span&gt;(short_code):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;根据短链获取原始网址&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    long_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; redis_client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;short:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;short_code&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; long_url&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode() &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; long_url &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-set&#34;&gt;2. Set&lt;/h2&gt;
&lt;h3 id=&#34;21-数据去重与快速查重&#34;&gt;2.1. 数据去重与快速查重&lt;/h3&gt;
&lt;p&gt;利用 Set 元素不允许重复的特性，可以用来存储用户访问记录或防止重复投票 点赞等场景&lt;/p&gt;
&lt;h3 id=&#34;22-共同关注好友推荐&#34;&gt;2.2. 共同关注/好友推荐&lt;/h3&gt;
&lt;p&gt;社交平台中，查找用户共同关注的人，或基于共同关注推荐新好友&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-redis&#34; data-lang=&#34;redis&#34;&gt;SADD user:1001:follows &amp;#34;user:2001&amp;#34; &amp;#34;user:2002&amp;#34; &amp;#34;user:2003&amp;#34;
SADD user:1002:follows &amp;#34;user:2002&amp;#34; &amp;#34;user:2003&amp;#34; &amp;#34;user:2004&amp;#34;
SINTER user:1001:follows user:1002:follows  # 交集：共同关注 [&amp;#34;user:2002&amp;#34;, &amp;#34;user:2003&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;23-黑名单白名单管理&#34;&gt;2.3. 黑名单/白名单管理&lt;/h3&gt;
&lt;p&gt;Set 常用于存储黑名单或白名单数据，由于其快速的查找特性，可以高效判断某个元素是否被列入名单，适用于安全控制、IP 屏蔽、广告过滤等场景&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-redis&#34; data-lang=&#34;redis&#34;&gt;# 添加IP到黑名单
SADD blacklist:ips &amp;#34;192.168.1.100&amp;#34; &amp;#34;10.0.0.5&amp;#34;

# 检查IP是否在黑名单中
SISMEMBER blacklist:ips &amp;#34;192.168.1.100&amp;#34;  # 返回 1 表示IP被屏蔽

# 移除IP
SREM blacklist:ips &amp;#34;10.0.0.5&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3-redis-hash&#34;&gt;3. Redis Hash&lt;/h2&gt;
&lt;h3 id=&#34;31-用户信息存储&#34;&gt;3.1. 用户信息存储&lt;/h3&gt;
&lt;p&gt;Redis Hash 是一个键值对集合，每个 Hash 包含多个字段和对应的值，你可以单独操作某个字段（增、删、改、查），而不必操作整个数据结构,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对比 JSON 字符串&lt;/strong&gt;：如果用 String 类型存储对象（例如用户信息），通常会将整个对象序列化为 JSON 字符串&lt;code&gt;{&amp;quot;id&amp;quot;:&amp;quot;1001&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;Alice&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;alice@example.com&amp;quot;}&lt;/code&gt;要修改某个字段（如只改 &lt;code&gt;name&lt;/code&gt;），需要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取整个 JSON 字符串（GET）&lt;/li&gt;
&lt;li&gt;反序列化解析为对象&lt;/li&gt;
&lt;li&gt;修改字段&lt;/li&gt;
&lt;li&gt;序列化回 JSON&lt;/li&gt;
&lt;li&gt;再存回 Redis, 这会导致额外的 CPU 和内存开销，且操作复杂&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HMSET user:&lt;span style=&#34;color:#ae81ff&#34;&gt;1001&lt;/span&gt; id &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1001&amp;#34;&lt;/span&gt; name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt; email &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alice@example.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HSET user:&lt;span style=&#34;color:#ae81ff&#34;&gt;1001&lt;/span&gt; name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 只修改 name 字段&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HGET user:&lt;span style=&#34;color:#ae81ff&#34;&gt;1001&lt;/span&gt; name       &lt;span style=&#34;color:#75715e&#34;&gt;# 只获取 name 字段&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;32-配置管理&#34;&gt;3.2. 配置管理&lt;/h3&gt;
&lt;p&gt;存储系统配置项（如 API 密钥、开关状态）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;HMSET config:api rate_limit &amp;#34;100&amp;#34; enabled &amp;#34;true&amp;#34;
HGET config:api rate_limit  # 获取限流配置
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;33-购物车管理&#34;&gt;3.3. 购物车管理&lt;/h3&gt;
&lt;p&gt;存储用户购物车，商品 ID 作为字段，数量作为值&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;HSET cart:user:1001 product:001 2 product:002 1  # 购买 2 件 product:001，1 件 product:002
HINCRBY cart:user:1001 product:001 1  # 增加 1 件
HGETALL cart:user:1001  # 获取购物车内容
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4-list&#34;&gt;4. List&lt;/h2&gt;
&lt;h3 id=&#34;41-简单的消息队列&#34;&gt;4.1. 简单的消息队列&lt;/h3&gt;
&lt;p&gt;一个电商平台需要处理订单支付后的通知（如发送邮件或短信）， 前端提交订单后，后台将通知任务放入队列，消费者异步处理, 优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;LPUSH 和 BRPOP 提供高效的队列操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BRPOP 的阻塞机制减少轮询，提高性能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;适合轻量级队列，简单易用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设订单支付后，需发送一封确认邮件&lt;/li&gt;
&lt;li&gt;生产者（订单服务）将任务推入 Redis List，消费者（邮件服务）从队列取出任务&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 生产者：订单支付后推送任务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_notification_task&lt;/span&gt;(order_id, user_email):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    task &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;send_email:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;order_id&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;user_email&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lpush(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;notification_queue&amp;#34;&lt;/span&gt;, task)  &lt;span style=&#34;color:#75715e&#34;&gt;# 推入队列头部&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Task added for order &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;order_id&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 消费者：邮件服务处理任务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process_notification&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 阻塞等待任务，最多等 10 秒&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        task &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;brpop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;notification_queue&amp;#34;&lt;/span&gt;, timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; task:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _, task_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; task  &lt;span style=&#34;color:#75715e&#34;&gt;# task 是 (key, value) 元组&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Processing: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;task_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# 解析任务并发送邮件（伪代码）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            order_id, email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; task_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            send_email(email, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Order &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;order_id&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; confirmed!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;思考： 如何保证消息队列的可靠性？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;42-任务堆栈撤销操作&#34;&gt;4.2. 任务堆栈（撤销操作）&lt;/h3&gt;
&lt;p&gt;一个在线文档编辑器需要支持“撤销”功能，记录用户的每次操作（如文本插入、删除），用户点击撤销时回退到上一步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用户每次编辑，操作记录压入 List&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击撤销，从 List 顶部弹出最近的操作并执行反向逻辑&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 记录用户编辑操作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;record_edit&lt;/span&gt;(user_id, operation):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;edit_history:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;user_id&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lpush(key, operation)  &lt;span style=&#34;color:#75715e&#34;&gt;# 压入操作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ltrim(key, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# 限制最多 100 条历史&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Recorded: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;operation&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 撤销操作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;undo_edit&lt;/span&gt;(user_id):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;edit_history:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;user_id&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    operation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lpop(key)  &lt;span style=&#34;color:#75715e&#34;&gt;# 弹出最近操作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; operation:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Undoing: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;operation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 执行反向操作（伪代码）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        reverse_operation(operation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No operations to undo&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 测试&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;record_edit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user123&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;insert:text:hello&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;record_edit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user123&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;delete:char:5&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;undo_edit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user123&amp;#34;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# 输出: Undoing: delete:char:5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;43-时间线&#34;&gt;4.3. 时间线&lt;/h3&gt;
&lt;p&gt;一个社交平台需要展示用户&lt;strong&gt;最新的 10 条动态&lt;/strong&gt;（如朋友圈或微博），按发布时间倒序排列, 优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;LPUSH 保证最新动态在列表头部，天然按时间倒序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LRANGE 高效获取指定范围的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;适合实时更新和展示有序内容&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;场景：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用户发布动态时，记录动态 ID 和内容到 List&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前端请求时，取出最新的 N 条动态展示&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 用户发布动态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;post_update&lt;/span&gt;(user_id, content):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    post_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# 用时间戳作为 ID&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    post_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;post_id&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;user_id&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;content&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lpush(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;timeline:global&amp;#34;&lt;/span&gt;, post_data)  &lt;span style=&#34;color:#75715e&#34;&gt;# 推入全局时间线&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ltrim(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;timeline:global&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# 限制 1000 条&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Posted: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;content&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 获取最新动态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_recent_posts&lt;/span&gt;(limit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    posts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lrange(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;timeline:global&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, limit &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# 取最新 10 条&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode() &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; posts]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 测试&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;post_update(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user123&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;post_update(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user456&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nice day!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;recent_posts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_recent_posts()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; post &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; recent_posts:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(post)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注意 List 不适合排行榜, 因为他不会排序, 可以考虑使用堆来实现&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Redis 五种数据类型</title>
      <link>https://blog.jiyi27.com/posts/interview/%E7%BC%93%E5%AD%98%E5%92%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/001-redis-data-structure/</link>
      <pubDate>Fri, 21 Feb 2025 11:28:58 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/interview/%E7%BC%93%E5%AD%98%E5%92%8C%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/001-redis-data-structure/</guid>
      <description>&lt;h2 id=&#34;1-redis--仅仅是缓存吗&#34;&gt;1. Redis  仅仅是缓存吗&lt;/h2&gt;
&lt;p&gt;Redis 最广为人知的用途是&lt;strong&gt;缓存&lt;/strong&gt;, 它通过内存存储提供超高的读写性能, 常用于减轻数据库压力:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缓存热点数据&lt;/li&gt;
&lt;li&gt;会话存储&lt;/li&gt;
&lt;li&gt;页面缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但 Redis 的功能远不止缓存：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据结构存储：支持字符串、列表、集合、哈希等，类似一个内存数据库&lt;/li&gt;
&lt;li&gt;消息队列：通过 Pub/Sub 或 List 实现轻量级消息传递&lt;/li&gt;
&lt;li&gt;分布式锁：在分布式系统中用于同步&lt;/li&gt;
&lt;li&gt;高可用与分布式：通过主从复制、哨兵模式、集群模式支持分布式架构&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-string&#34;&gt;2. String&lt;/h2&gt;
&lt;h3 id=&#34;21-常见操作&#34;&gt;2.1. 常见操作&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;SET user:001 &amp;#34;Alice&amp;#34;
SET user:001 &amp;#39;{&amp;#34;name&amp;#34;: &amp;#34;Alice&amp;#34;, &amp;#34;age&amp;#34;: 25}&amp;#39;
SET counter 10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;user:001&lt;/code&gt; 和 &lt;code&gt;counter&lt;/code&gt; 是 Key, 后面的 字符串 &lt;code&gt;&amp;quot;Alice&amp;quot;&lt;/code&gt;, &lt;code&gt;{&amp;quot;name&amp;quot;: &amp;quot;Alice&amp;quot;, &amp;quot;age&amp;quot;: 25}&lt;/code&gt;, 还有数字 &lt;code&gt;10&lt;/code&gt; 是 Value, Redis 中的 String 有点像哈希表, 但不是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET user:001 &lt;span style=&#34;color:#75715e&#34;&gt;# 获取 key user:001 值&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;INCR counter &lt;span style=&#34;color:#75715e&#34;&gt;# 自增1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DECR counter &lt;span style=&#34;color:#75715e&#34;&gt;# 自减1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;INCRBY counter &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 自增5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;虽然 Redis 是用 C 语言写的, 但是 Redis 并没有使用 C 的字符串表示, 而是自己构建了一种 &lt;strong&gt;简单动态字符串&lt;/strong&gt;（Simple Dynamic String）相比于 C 的原生字符串, Redis 的 SDS 不光可以保存文本数据还可以保存二进制数据, 并且获取字符串长度复杂度为 O(1)（C 字符串为 O(N)）, 除此之外, Redis 的 SDS API 是安全的, 不会造成&lt;strong&gt;缓冲区溢出&lt;/strong&gt;:&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-redis--仅仅是缓存吗&#34;&gt;1. Redis  仅仅是缓存吗&lt;/h2&gt;
&lt;p&gt;Redis 最广为人知的用途是&lt;strong&gt;缓存&lt;/strong&gt;, 它通过内存存储提供超高的读写性能, 常用于减轻数据库压力:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缓存热点数据&lt;/li&gt;
&lt;li&gt;会话存储&lt;/li&gt;
&lt;li&gt;页面缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但 Redis 的功能远不止缓存：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据结构存储：支持字符串、列表、集合、哈希等，类似一个内存数据库&lt;/li&gt;
&lt;li&gt;消息队列：通过 Pub/Sub 或 List 实现轻量级消息传递&lt;/li&gt;
&lt;li&gt;分布式锁：在分布式系统中用于同步&lt;/li&gt;
&lt;li&gt;高可用与分布式：通过主从复制、哨兵模式、集群模式支持分布式架构&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-string&#34;&gt;2. String&lt;/h2&gt;
&lt;h3 id=&#34;21-常见操作&#34;&gt;2.1. 常见操作&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;SET user:001 &amp;#34;Alice&amp;#34;
SET user:001 &amp;#39;{&amp;#34;name&amp;#34;: &amp;#34;Alice&amp;#34;, &amp;#34;age&amp;#34;: 25}&amp;#39;
SET counter 10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;user:001&lt;/code&gt; 和 &lt;code&gt;counter&lt;/code&gt; 是 Key, 后面的 字符串 &lt;code&gt;&amp;quot;Alice&amp;quot;&lt;/code&gt;, &lt;code&gt;{&amp;quot;name&amp;quot;: &amp;quot;Alice&amp;quot;, &amp;quot;age&amp;quot;: 25}&lt;/code&gt;, 还有数字 &lt;code&gt;10&lt;/code&gt; 是 Value, Redis 中的 String 有点像哈希表, 但不是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET user:001 &lt;span style=&#34;color:#75715e&#34;&gt;# 获取 key user:001 值&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;INCR counter &lt;span style=&#34;color:#75715e&#34;&gt;# 自增1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DECR counter &lt;span style=&#34;color:#75715e&#34;&gt;# 自减1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;INCRBY counter &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 自增5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;虽然 Redis 是用 C 语言写的, 但是 Redis 并没有使用 C 的字符串表示, 而是自己构建了一种 &lt;strong&gt;简单动态字符串&lt;/strong&gt;（Simple Dynamic String）相比于 C 的原生字符串, Redis 的 SDS 不光可以保存文本数据还可以保存二进制数据, 并且获取字符串长度复杂度为 O(1)（C 字符串为 O(N)）, 除此之外, Redis 的 SDS API 是安全的, 不会造成&lt;strong&gt;缓冲区溢出&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Buffer Overflow&lt;/strong&gt; 是一种常见的程序错误, 通常发生在程序试图向一个固定大小的内存缓冲区写入超出其容量的数据时导致的数据覆盖相邻内存，导致程序行为异常或崩溃, 在 C 语言中，字符串操作尤其容易引发缓冲区溢出, 因为 C 的原生字符串（以空字符 &lt;code&gt;\0&lt;/code&gt; 结尾的字符数组）不自带长度信息, 操作时需要程序员手动确保不会越界&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;22-一些拓展&#34;&gt;2.2. 一些拓展&lt;/h3&gt;
&lt;p&gt;String 是一种二进制安全的数据类型, 可以用来存储任何类型的数据比如字符串、数字、序列化后的对象（如 JSON、Protobuf 等）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;严格来说, String 本身并不直接存储“类型”, 而是存储数据的字节表示, 在编程中, “类型”（data type）指的是数据的种类以及与之相关的操作规则, 每种“类型”都有自己的&lt;strong&gt;语义&lt;/strong&gt;（含义）和&lt;strong&gt;操作方式&lt;/strong&gt;, 这些是由编程语言或程序逻辑定义的, 当我们说 String 存储数据时, String 本身并不知道或关心数据的“类型”, 它只是一个&lt;strong&gt;字节序列&lt;/strong&gt;（byte sequence）的容器, 换句话说, String 存储的是数据的&lt;strong&gt;二进制表示&lt;/strong&gt;, 而不是数据的高级语义或类型信息:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;字节表示&lt;/strong&gt;：任何数据（无论是整数、浮点数、文本、图片还是对象）在计算机底层都是以二进制形式（0 和 1 的序列）存储的, 这些二进制数据可以看作一串字节（每个字节是 8 位）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;String 的角色&lt;/strong&gt;：在二进制安全的 String 实现中（例如 Redis 或 PHP 的字符串）, String 只是把这些字节原封不动地保存下来, 它不关心这些字节是表示一个整数、一个图片，还是一个序列化后的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举个例子:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整数 42 的二进制表示可能是 00101010（取决于编码方式，比如 32 位整数）&lt;/li&gt;
&lt;li&gt;文本 &amp;ldquo;hello&amp;rdquo; 的 UTF-8 编码可能是字节序列 01101000 01100101 01101100 01101100 01101111&lt;/li&gt;
&lt;li&gt;一个序列化后的 JSON 对象 &lt;code&gt;{&amp;quot;name&amp;quot;: &amp;quot;Alice&amp;quot;}&lt;/code&gt; 也是一串字节，可能看起来像 7b226e616d65223a2022416c696365227d（十六进制表示）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当你把这些数据存进 Redis String 时, String 只负责保存这些字节的顺序和内容,, 它不会记录“这是个整数”或“这是个 JSON 对象”这样的类型信息, Redis String 作为二进制安全的数据类型, 负责存储数据, 但数据的&lt;strong&gt;语义&lt;/strong&gt;（如整数、浮点数、对象）需要由程序逻辑解析, 例如, 一个序列化后的 JSON 对象存储在 String 中, 程序需要调用 JSON 解析器来还原对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在某些编程语言或系统中（例如 Redis、PHP等），String 被称为&lt;strong&gt;二进制安全&lt;/strong&gt;（binary-safe）的数据类型，意思是它可以安全地存储和处理任意的二进制数据，而不会因为数据中包含特定的字符（如空字符 &lt;code&gt;\0&lt;/code&gt;）或其他控制字符而导致数据被截断或错误解析, 并非所有语言或系统的 String 都是二进制安全的, 例如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 C 中，字符串通常不是二进制安全的（因为以 &lt;code&gt;\0&lt;/code&gt; 结尾）&lt;/li&gt;
&lt;li&gt;在 Java 中, String 是基于 Unicode 的, 主要用于文本, 处理二进制数据更常用 &lt;code&gt;byte[]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-set&#34;&gt;3. Set&lt;/h2&gt;
&lt;p&gt;Set 只能存储字符串, 且字符串不能重复:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[&amp;#34;123&amp;#34;, &amp;#34;456&amp;#34;, &amp;#34;Jack&amp;#34;, &amp;#34;Alice&amp;#34;, ...]
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;注意 Redis String 是一个数据结构, 不是一个值的类型, Redis 中 Set 只能用来存储 String 类型的值, 这里的 String 指的只是单纯的字符串, 而不是前面的数据结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;4-list&#34;&gt;4. List&lt;/h2&gt;
&lt;p&gt;Redis 中的 List 其实就是链表数据结构的实现, 很多语言都内置了链表的实现, 但是 C 语言并没有实现链表, 因此 Redis 实现了自己的链表, Redis 的 List 的实现是一个 双向链表,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;List&lt;/code&gt; 可以用来做消息队列, 只是功能过于简单且存在很多缺陷, 不建议这样做, 相对来说, Redis 5.0 新增加的一个数据结构 &lt;code&gt;Stream&lt;/code&gt; 更适合做消息队列一些, 只是功能依然非常简陋, 和专业的消息队列相比, 还是有很多欠缺的地方比如消息丢失和堆积问题不好解决&lt;/p&gt;
&lt;h2 id=&#34;5-hash&#34;&gt;5. Hash&lt;/h2&gt;
&lt;p&gt;大部分编程语言都提供了 哈希（&lt;code&gt;hash&lt;/code&gt;）类型, 它们的叫法可能是 哈希、字典, 在 &lt;code&gt;Redis&lt;/code&gt; 中, 哈希类型 是指键值本身又是一个 键值对结构:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HMSET user:1001 name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt; age &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; city &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Beijing&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;这里 user:1001 是 Redis 的键（key）&lt;/li&gt;
&lt;li&gt;这个键对应的值是一个哈希，包含多个键值对：name: &amp;ldquo;Alice&amp;rdquo;，age: 25，city: &amp;ldquo;Beijing&amp;rdquo;&lt;/li&gt;
&lt;li&gt;在这个哈希里，name、age、city 是 field，&amp;ldquo;Alice&amp;rdquo;、25、Beijing 是对应的值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类似下面这种:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;key: user:1001
value: { name: &amp;#34;Alice&amp;#34;, age: 25, city: &amp;#34;Beijing&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你可以用命令单独访问某个 field 的值，比如:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;HGET user:1001 name
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看出 Redis 中的 哈希表 和 普通键值对不同:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;key: username
value: &amp;#34;Alice&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Redis 是一个高效的键值数据库, 为了保证性能和一致性, 它要求所有存储的数据在底层都以字符串的形式保存, 因此:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Field&lt;/strong&gt;：哈希的字段（比如上面的 name、age、city）必须是字符串类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Value&lt;/strong&gt;：每个字段对应的值（比如 &amp;ldquo;Alice&amp;rdquo;、25、Beijing）也必须是字符串&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;HMSET user:1001 friends [&amp;#34;Bob&amp;#34;, &amp;#34;Charlie&amp;#34;]  # 错误！
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那如果我们想存用户的信息, 而用户又存在这样的数组字段, 应该怎么办呢?&lt;/p&gt;
&lt;p&gt;答案是把整个用户信息（比如 name、age、city、friends 等）&lt;strong&gt;序列化&lt;/strong&gt;为一个 JSON 字符串, 直接存到 Redis 的 String 类型的一个键里, 每次读写时, 客户端负责解析和序列化 JSON&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;city&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Beijing&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;friends&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Charlie&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用 Redis 哈希存储：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 用 SET 命令存储 JSON 字符串&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SET user:&lt;span style=&#34;color:#ae81ff&#34;&gt;1001&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Alice&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:25,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;city&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Beijing&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;friends&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Bob&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Charlie&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 获取 JSON 字符串&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET user:&lt;span style=&#34;color:#ae81ff&#34;&gt;1001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 返回: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;Alice\&amp;#34;,\&amp;#34;age\&amp;#34;:25,\&amp;#34;city\&amp;#34;:\&amp;#34;Beijing\&amp;#34;,\&amp;#34;friends\&amp;#34;:[\&amp;#34;Bob\&amp;#34;,\&amp;#34;Charlie\&amp;#34;]}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;json_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; redis_client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user:1001&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user_info &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(json_str)  &lt;span style=&#34;color:#75715e&#34;&gt;# 转为字典&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# user_info = {&amp;#34;name&amp;#34;: &amp;#34;Alice&amp;#34;, &amp;#34;age&amp;#34;: 25, &amp;#34;city&amp;#34;: &amp;#34;Beijing&amp;#34;, &amp;#34;friends&amp;#34;: [&amp;#34;Bob&amp;#34;, &amp;#34;Charlie&amp;#34;]}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 要更新某个字段（比如加朋友或改 city），需要, 读取整个 JSON, 在客户端修改, 序列化后写回&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 添加新朋友&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user_info[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;friends&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;redis_client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user:1001&amp;#34;&lt;/span&gt;, json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(user_info))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 或者改城市&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user_info[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;city&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Shanghai&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;redis_client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user:1001&amp;#34;&lt;/span&gt;, json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(user_info))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;虽然这种方式直接存整个 JSON 对象, 看着很容易理解, 但缺点也很明显&lt;strong&gt;更新效率低&lt;/strong&gt;：每次修改（即使只改 name 或加一个朋友）, 都要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读整个 JSON（GET）&lt;/li&gt;
&lt;li&gt;客户端解析&lt;/li&gt;
&lt;li&gt;修改后序列化&lt;/li&gt;
&lt;li&gt;写回整个 JSON（SET）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这对频繁更新的场景效率较低, 那有没有更好的办法?&lt;/p&gt;
&lt;p&gt;用 Redis 哈希存储基本信息（name、age、city 等）作为单独的字段, 把复杂结构（比如 friends 列表）序列化为 JSON 字符串存到一个字段, 这样结合了哈希的结构化和 JSON 的灵活性:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 存储用户信息
HMSET user:1001 name &amp;#34;Alice&amp;#34; age &amp;#34;25&amp;#34; city &amp;#34;Beijing&amp;#34; friends &amp;#34;[\&amp;#34;Bob\&amp;#34;, \&amp;#34;Charlie\&amp;#34;]&amp;#34;

# 获取所有字段
HGETALL user:1001
# 返回: {&amp;#34;name&amp;#34;: &amp;#34;Alice&amp;#34;, &amp;#34;age&amp;#34;: &amp;#34;25&amp;#34;, &amp;#34;city&amp;#34;: &amp;#34;Beijing&amp;#34;, &amp;#34;friends&amp;#34;: &amp;#34;[\&amp;#34;Bob\&amp;#34;, \&amp;#34;Charlie\&amp;#34;]&amp;#34;}
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user_info &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; redis_client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hgetall(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user:1001&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;friends &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(user_info[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;friends&amp;#34;&lt;/span&gt;])  &lt;span style=&#34;color:#75715e&#34;&gt;# 转为列表 [&amp;#34;Bob&amp;#34;, &amp;#34;Charlie&amp;#34;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 更新基本信息, 直接修改某个字段&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HSET user:&lt;span style=&#34;color:#ae81ff&#34;&gt;1001&lt;/span&gt; city &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Shanghai&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 更新朋友列表&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 客户端先读取，修改，再写回&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;friends&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;redis_client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hset(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user:1001&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;friends&amp;#34;&lt;/span&gt;, json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(friends))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;基本字段（name、city）可直接修改，效率高&lt;/li&gt;
&lt;li&gt;friends 列表用 JSON 存储，灵活支持列表或其他复杂结构&lt;/li&gt;
&lt;li&gt;所有信息在一个键（user:1001）下&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vpn on 为霜的博客</title>
    <link>https://blog.jiyi27.com/tags/vpn/</link>
    <description>Recent content in Vpn on 为霜的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 12 Sep 2023 08:31:59 +0000</lastBuildDate><atom:link href="https://blog.jiyi27.com/tags/vpn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Working with TUN Device on MacOS</title>
      <link>https://blog.jiyi27.com/posts/networking/007-tun-device-macos/</link>
      <pubDate>Tue, 12 Sep 2023 08:31:59 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/networking/007-tun-device-macos/</guid>
      <description>&lt;h2 id=&#34;1-tun-on-macos&#34;&gt;1. TUN on MacOS&lt;/h2&gt;
&lt;p&gt;On macOS, the &lt;code&gt;utun&lt;/code&gt; interface is a type of TUN device specifically designed for VPN connections to handle the network traffic &lt;strong&gt;within the VPN tunnel&lt;/strong&gt; &lt;a href=&#34;https://apple.stackexchange.com/questions/310220/who-creates-utun0-adapter&#34;&gt;regardless of whether VPN is enabled&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll give you an example to demonstrate the realtionship between TUN device and utun interface, the code below written in Go is to create a TUN device:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// New() creates a new TUN/TAP interface using config.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ifce&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;water&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;water&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;DeviceType&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;water&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TUN&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before run this code there are 4 utun interfaces on my mac:&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-tun-on-macos&#34;&gt;1. TUN on MacOS&lt;/h2&gt;
&lt;p&gt;On macOS, the &lt;code&gt;utun&lt;/code&gt; interface is a type of TUN device specifically designed for VPN connections to handle the network traffic &lt;strong&gt;within the VPN tunnel&lt;/strong&gt; &lt;a href=&#34;https://apple.stackexchange.com/questions/310220/who-creates-utun0-adapter&#34;&gt;regardless of whether VPN is enabled&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll give you an example to demonstrate the realtionship between TUN device and utun interface, the code below written in Go is to create a TUN device:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// New() creates a new TUN/TAP interface using config.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ifce&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;water&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;water&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;DeviceType&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;water&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TUN&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before run this code there are 4 utun interfaces on my mac:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ifconfig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;utun0: flags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;8051&amp;lt;UP,POINTOPOINT,RUNNING,MULTICAST&amp;gt; mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;1380&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	inet6 fe80::652e:88dd:ddb0:ad93%utun0 prefixlen &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; scopeid 0xf 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	nd6 options&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;201&amp;lt;PERFORMNUD,DAD&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;utun4: flags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;8051&amp;lt;UP,POINTOPOINT,RUNNING,MULTICAST&amp;gt; mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;1380&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	inet6 fe80::e305:5ba8:574a:a5ac%utun4 prefixlen &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; scopeid 0x13 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	nd6 options&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;201&amp;lt;PERFORMNUD,DAD&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After I run the Go codes above with &lt;code&gt;sudo&lt;/code&gt;, there are 5 utun interfaces but with no ip information:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ifconfig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;utun4: flags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;8051&amp;lt;UP,POINTOPOINT,RUNNING,MULTICAST&amp;gt; mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;1380&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	inet6 fe80::e305:5ba8:574a:a5ac%utun4 prefixlen &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; scopeid 0x13 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	nd6 options&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;201&amp;lt;PERFORMNUD,DAD&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;utun5: flags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;8051&amp;lt;UP,POINTOPOINT,RUNNING,MULTICAST&amp;gt; mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;1500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;utun*&lt;/code&gt; is a &lt;strong&gt;point-to-point&lt;/strong&gt; interface, also called a tunnel or a peer-to-peer interface, It doesn&amp;rsquo;t behave like &amp;ldquo;shared medium&amp;rdquo; interfaces such as Wi-Fi or Ethernet, which connect you to multiple devices. Instead, it behaves like a cable that just has hosts on both ends.&lt;/p&gt;
&lt;p&gt;There are no layer-2 headers, no MAC addresses, and no ARP on a point-to-point interface, because everything sent through it reaches the same destination (the &amp;ldquo;peer&amp;rdquo; host).&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://superuser.com/a/1446061/1689666&#34;&gt;https://superuser.com/a/1446061/1689666&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-utun-is-an-instance-of-tun-device&#34;&gt;2. &lt;code&gt;utun&lt;/code&gt; is an instance of TUN device&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;You can think &lt;code&gt;utun*&lt;/code&gt; is an instance of TUN device on Mac, a TUN device can have many instances.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;OS treat virtual network interface (tun/tap devices) as same to the physical network interface, which means virtual network interface can have anything (including ip address) that physical network interface have.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;utun*&lt;/code&gt; is just a network interface similar to &lt;code&gt;en0&lt;/code&gt;, &lt;code&gt;lo0&lt;/code&gt;, when you input &lt;code&gt;ifconfig&lt;/code&gt; command, they will listed together:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ifconfig     
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lo0: flags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;8049&amp;lt;UP,LOOPBACK,RUNNING,MULTICAST&amp;gt; mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	options&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1203&amp;lt;RXCSUM,TXCSUM,TXSTATUS,SW_TIMESTAMP&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	inet 127.0.0.1 netmask 0xff000000 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	inet6 ::1 prefixlen &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	inet6 fe80::1%lo0 prefixlen &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; scopeid 0x1 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	nd6 options&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;201&amp;lt;PERFORMNUD,DAD&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;en0: flags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;8863&amp;lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&amp;gt; mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;1500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	options&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;6463&amp;lt;RXCSUM,TXCSUM,TSO4,TSO6,CHANNEL_IO,PARTIAL_CSUM,ZEROINVERT_CSUM&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	ether d4:57:63:da:b6:98 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	inet6 fe80::475:ca98:8ecc:d86%en0 prefixlen &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; secured scopeid 0xc 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	inet 192.168.2.15 netmask 0xffffff00 broadcast 192.168.2.255
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	inet6 fdd0:ed77:f347:4d69:859:d993:f358:5af9 prefixlen &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; autoconf secured 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	nd6 options&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;201&amp;lt;PERFORMNUD,DAD&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	media: autoselect
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	status: active
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;en1: flags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;8963&amp;lt;UP,BROADCAST,SMART,RUNNING,PROMISC,SIMPLEX,MULTICAST&amp;gt; mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;1500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	options&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;460&amp;lt;TSO4,TSO6,CHANNEL_IO&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	ether 36:6b:75:95:04:c0 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	media: autoselect &amp;lt;full-duplex&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	status: inactive
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;utun0: flags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;8051&amp;lt;UP,POINTOPOINT,RUNNING,MULTICAST&amp;gt; mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;1380&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	inet6 fe80::652e:88dd:ddb0:ad93%utun0 prefixlen &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; scopeid 0xf 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	nd6 options&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;201&amp;lt;PERFORMNUD,DAD&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;utun1: flags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;8051&amp;lt;UP,POINTOPOINT,RUNNING,MULTICAST&amp;gt; mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	inet6 fe80::a13f:9a63:f8cb:4017%utun1 prefixlen &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; scopeid 0x10 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	nd6 options&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;201&amp;lt;PERFORMNUD,DAD&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Find more about what these interface are: &lt;a href=&#34;https://stackoverflow.com/a/55232331/16317008&#34;&gt;https://stackoverflow.com/a/55232331/16317008&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;e.g.,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;utun3: flags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;8051&amp;lt;UP,POINTOPOINT,RUNNING,MULTICAST&amp;gt; mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;1500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        inet 10.8.0.18 --&amp;gt; 10.8.0.17 netmask 0xffffffff
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With &amp;ldquo;normal&amp;rdquo; interfaces, configuring an address with subnet mask like &lt;code&gt;192.168.1.3/24&lt;/code&gt; on eth0 is really just shorthand for saying &amp;ldquo;My address is &lt;code&gt;192.168.1.3&lt;/code&gt; and I also have an on-link route &lt;code&gt;192.168.1.0/24 dev eth0&lt;/code&gt;&amp;rdquo;. The on-link route is derived from combining the address &amp;amp; subnet mask.&lt;/p&gt;
&lt;p&gt;With point-to-point interfaces, it&amp;rsquo;s actually the same idea. This example means &amp;ldquo;My address is &lt;code&gt;10.8.0.18&lt;/code&gt; and I also have an on-link route &lt;code&gt;10.8.0.17/32 dev utun3&lt;/code&gt;.&amp;rdquo; In this case the autogenerated route is a /32, indicating only one host – the &amp;ldquo;peer&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Note: My examples use Linux iproute2-style syntax.)&lt;/em&gt; So in the end, the difference between &lt;code&gt;10.8.0.17 netmask 0xffffffff&lt;/code&gt; and &lt;code&gt;10.8.0.17/32&lt;/code&gt; styles is just that automatic route.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://superuser.com/a/1446061/1689666&#34;&gt;https://superuser.com/a/1446061/1689666&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-set-up-ip-for-utun-interface&#34;&gt;3. Set up ip for &lt;code&gt;utun&lt;/code&gt; interface&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tldr ifconfig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- View network settings of an Ethernet adapter:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ifconfig eth0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Display details of all interfaces, including disabled interfaces:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ifconfig -a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Disable eth0 interface:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ifconfig eth0 down
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Enable eth0 interface:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ifconfig eth0 up
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Assign IP address to eth0 interface:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ifconfig eth0 ip_address
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For example, if you have two machines, one we label &amp;ldquo;local&amp;rdquo; with a LAN IP address like 192.168.0.12 and another we label &amp;ldquo;remote&amp;rdquo; with a LAN IP address like 192.168.1.14, you can assign tunnel IP addresses thusly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ifconfig tun0 inet 10.0.0.1 10.0.0.2 up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;on the local system, and:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ifconfig tun0 inet 10.0.0.2 10.0.0.1 up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;on the remote system. Note the reversed perspective on the remote machine. Do not set your point to point addresses to anything on an existing subnet; it will not route properly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note, if you set a wrong interface, you can cancle it with  &lt;code&gt;sudo ifconfig utun2 delete 10.1.0.10 10.1.0.20 &lt;/code&gt; or &lt;code&gt;ifconfig en1 delete 192.168.141.99&lt;/code&gt; for differnt types of network interfaces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://stackoverflow.com/a/17511998/16317008&#34;&gt;https://stackoverflow.com/a/17511998/16317008&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-use-tun-capture-ip-packets-with-go-on-macos&#34;&gt;4. Use TUN capture ip packets with Go on MacOS&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go get -u github.com/songgao/water
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;ifce&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;water&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;water&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;DeviceType&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;water&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TUN&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Interface Name: %s\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ifce&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;packet&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1500&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ifce&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Read&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;packet&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Packet Received: % x\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;packet&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# NOTE: replace utunx with the name printed on your go code above&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo ifconfig utun5 10.1.0.10 10.1.0.20 up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ping -c &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 10.1.0.20
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If no data printed on your go codes, restart your go codes and change a pair of ip addresses for utun interface.&lt;/p&gt;
&lt;p&gt;Learn more:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/songgao/water&#34;&gt;songgao/water: A simple TUN/TAP library written in native Go.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://davidzhu.xyz/post/cs-basics/011-tun-device/&#34;&gt;TUN Device &amp;amp; utun Interface&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Tunneling Protocols</title>
      <link>https://blog.jiyi27.com/posts/networking/007-tunneling-protocols/</link>
      <pubDate>Sun, 10 Sep 2023 08:27:59 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/networking/007-tunneling-protocols/</guid>
      <description>&lt;h2 id=&#34;1-vpn&#34;&gt;1. VPN&lt;/h2&gt;
&lt;p&gt;VPN（Virtual Private Network）的核心特性之一就是使用隧道协议（Tunneling Protocol）。通过这些隧道协议，VPN 能够保证数据在不安全的网络中的安全传输，使得VPN在保护在线隐私和绕过网络限制方面非常有效。&lt;/p&gt;
&lt;p&gt;常见的隧道协议包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IPsec (Internet Protocol Security)&lt;/strong&gt;：用于在IP通信过程中确保数据的完整性、认证和机密性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OpenVPN&lt;/strong&gt;：一个基于SSL/TLS的开源VPN协议，提供高度的安全性和灵活性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WireGuard&lt;/strong&gt;：一个较新的协议，旨在提供更高的速度和更先进的加密技术。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSL/TLS (Secure Sockets Layer/Transport Layer Security)&lt;/strong&gt;：SSL VPN usually connects using a Web browser, whereas an IPSec VPN generally requires client software on the remote system.
&lt;ul&gt;
&lt;li&gt;SSL VPN is a component of virtually every Web browser. Any OS that runs a browser is supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;OpenVPN 是一个独立的 VPN 协议，它不使用像 PPTP、L2TP 或 IPsec 这样的标准隧道协议。相反，OpenVPN 使用自己的协议，基于 SSL/TLS 来提供加密和安全连接。它是一个开源的软件应用程序，允许创建安全的点对点或站点对站点连接 OpenVPN 的关键特性包括：&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-vpn&#34;&gt;1. VPN&lt;/h2&gt;
&lt;p&gt;VPN（Virtual Private Network）的核心特性之一就是使用隧道协议（Tunneling Protocol）。通过这些隧道协议，VPN 能够保证数据在不安全的网络中的安全传输，使得VPN在保护在线隐私和绕过网络限制方面非常有效。&lt;/p&gt;
&lt;p&gt;常见的隧道协议包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IPsec (Internet Protocol Security)&lt;/strong&gt;：用于在IP通信过程中确保数据的完整性、认证和机密性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OpenVPN&lt;/strong&gt;：一个基于SSL/TLS的开源VPN协议，提供高度的安全性和灵活性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WireGuard&lt;/strong&gt;：一个较新的协议，旨在提供更高的速度和更先进的加密技术。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSL/TLS (Secure Sockets Layer/Transport Layer Security)&lt;/strong&gt;：SSL VPN usually connects using a Web browser, whereas an IPSec VPN generally requires client software on the remote system.
&lt;ul&gt;
&lt;li&gt;SSL VPN is a component of virtually every Web browser. Any OS that runs a browser is supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;OpenVPN 是一个独立的 VPN 协议，它不使用像 PPTP、L2TP 或 IPsec 这样的标准隧道协议。相反，OpenVPN 使用自己的协议，基于 SSL/TLS 来提供加密和安全连接。它是一个开源的软件应用程序，允许创建安全的点对点或站点对站点连接 OpenVPN 的关键特性包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;自定义加密协议&lt;/strong&gt;：虽然基于 SSL/TLS，但 OpenVPN 有其独特的实现方式，允许高度的定制和灵活性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;身份验证&lt;/strong&gt;：支持各种认证机制，包括证书、预共享密钥和用户认证。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨平台兼容性&lt;/strong&gt;：OpenVPN 可以在多种操作系统上运行，包括 Windows、macOS、Linux 和移动平台。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-tunneling&#34;&gt;2. Tunneling&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&#34;https://davidzhu.xyz/post/networking/007-tun-tap-device/&#34;&gt;previous post&lt;/a&gt;, we know that &lt;em&gt;&lt;strong&gt;TUN&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;TAP&lt;/strong&gt;&lt;/em&gt; are two different kernel virtual network devices, which are used for &lt;strong&gt;tunneling&lt;/strong&gt; purposes. In this post, we&amp;rsquo;ll discuss what is tunneling and coomon tunneling protocols.&lt;/p&gt;
&lt;p&gt;In the physical world, tunneling is a way to cross terrain or boundaries that could not normally be crossed. Similarly, in networking, tunnels are a method for transporting data across a network using protocols that are not supported by that network. &lt;strong&gt;Tunneling works by encapsulating packets: wrapping packets inside of other packets.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Encapsulating packets within other packets is called &amp;ldquo;tunneling.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Because tunneling involves repackaging the traffic data into a different form, perhaps with encryption as standard, it can hide the nature of the traffic that is run through a tunnel.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Encapsulation:&lt;/p&gt;
&lt;p&gt;Data traveling over a network is divided into packets. A typical packet has two parts: the &lt;strong&gt;header&lt;/strong&gt;, which indicates the packet&amp;rsquo;s destination and which protocol it uses, and the &lt;strong&gt;payload&lt;/strong&gt;, which is the packet&amp;rsquo;s actual contents.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;An encapsulated packet is essentially a packet inside another packet&lt;/strong&gt;. In an encapsulated packet, the header and payload of the first packet goes inside the payload section of the surrounding packet. &lt;strong&gt;The original packet itself becomes the payload.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A VPN just uses one of the tunneling protocols, therefore, when you know how each tunneling protocol works, you will know the essence of VPN of that type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-types-of-tunneling-protocol&#34;&gt;3. Types of Tunneling protocol&lt;/h2&gt;
&lt;p&gt;In addition to &lt;strong&gt;GRE, IPsec, IP-in-IP, and SSH&lt;/strong&gt;, other tunneling protocols include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Point-to-Point Tunneling Protocol (PPTP)&lt;/li&gt;
&lt;li&gt;Secure Socket Tunneling Protocol (SSTP)&lt;/li&gt;
&lt;li&gt;Layer 2 Tunneling Protocol (L2TP)&lt;/li&gt;
&lt;li&gt;Virtual Extensible Local Area Network (VXLAN)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-ipsec---network-layer&#34;&gt;4. IPsec - Network layer&lt;/h2&gt;
&lt;p&gt;The IPsec protocol suite operates at the &lt;strong&gt;network layer&lt;/strong&gt; of the OSI model. Within the term &amp;ldquo;IPsec,&amp;rdquo; &amp;ldquo;IP&amp;rdquo; stands for &amp;ldquo;&lt;strong&gt;Internet Protocol&lt;/strong&gt;&amp;rdquo; and &amp;ldquo;sec&amp;rdquo; for &amp;ldquo;secure.&amp;rdquo;  IPsec usually uses port 500.&lt;/p&gt;
&lt;p&gt;The Internet Protocol is the main routing protocol used on the Internet; it designates where data will go using &lt;a href=&#34;https://www.cloudflare.com/learning/dns/glossary/what-is-my-ip-address/&#34;&gt;IP addresses&lt;/a&gt;. IPsec is secure because it &lt;strong&gt;adds encryption and authentication&lt;/strong&gt; to this process.&lt;/p&gt;
&lt;h3 id=&#34;41-why-ipsec-is-important&#34;&gt;4.1. Why IPSec is important?&lt;/h3&gt;
&lt;p&gt;Networking protocol suites like &lt;strong&gt;TCP/IP are only concerned with connection and delivery&lt;/strong&gt;, and messages sent are not concealed. Anyone in the middle can read them. IPsec, and other protocols that encrypt data, essentially put an envelope around data as it traverses networks, keeping it secure.&lt;/p&gt;
&lt;h3 id=&#34;42-how-does-ipsec-work&#34;&gt;4.2. How does IPsec work?&lt;/h3&gt;
&lt;p&gt;IPsec connections include the following steps:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key exchange:&lt;/strong&gt; &lt;a href=&#34;https://www.cloudflare.com/learning/ssl/what-is-a-cryptographic-key/&#34;&gt;Keys&lt;/a&gt; are necessary for encryption;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Packet headers and trailers:&lt;/strong&gt; IP packets contain both a payload and a header. IPsec adds several headers to data packets containing authentication and encryption information. IPsec also adds trailers, which go after each packet&amp;rsquo;s payload instead of before.&lt;/p&gt;
&lt;p&gt;Learn more: &lt;a href=&#34;https://www.cloudflare.com/learning/network-layer/what-is-ipsec/&#34;&gt;What is IPsec? | How IPsec VPNs work | Cloudflare&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;43-ipsec-tunnel-and-ipsec-transport-mode&#34;&gt;4.3. IPsec tunnel and IPsec transport mode&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tunnel Mode&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在隧道模式下，IPsec对整个IP数据包（包括头部信息）进行加密。&lt;/li&gt;
&lt;li&gt;这意味着原始的IP数据包被封装在一个新的IP数据包中。新的数据包有一个新的IP头部。&lt;/li&gt;
&lt;li&gt;隧道模式常用于VPN（Virtual Private Network，虚拟私人网络），允许不同网络之间安全地传输数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Transport Mode&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在传输模式下，IPsec只加密IP数据包的有效载荷（Payload），而不加密头部信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;44-what-protocols-are-used-in-ipsec&#34;&gt;4.4. What protocols are used in IPsec?&lt;/h3&gt;
&lt;p&gt;In &lt;a href=&#34;https://www.cloudflare.com/learning/network-layer/what-is-the-network-layer/&#34;&gt;networking&lt;/a&gt;, a protocol is a specified way of formatting data so that any networked computer can interpret the data. &lt;strong&gt;IPsec is not one protocol, but a suite of protocols&lt;/strong&gt;. The following protocols make up the IPsec suite:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Authentication Header (AH):&lt;/strong&gt; The AH protocol ensures that data packets are from a trusted source and that the data has not been tampered with, like a tamper-proof seal on a consumer product. These headers do not provide any encryption; they do not help conceal the data from attackers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Encapsulating Security Protocol (ESP):&lt;/strong&gt; ESP encrypts the IP header and the payload for each packet — unless transport mode is used, in which case it only encrypts the payload. ESP adds its own header and a trailer to each data packet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Security Association (SA):&lt;/strong&gt; SA refers to a number of protocols used for negotiating encryption keys and algorithms. One of the most common SA protocols is Internet Key Exchange (IKE).&lt;/p&gt;
&lt;p&gt;Finally, while the &lt;strong&gt;Internet Protocol (IP)&lt;/strong&gt; is not part of the IPsec suite, IPsec runs directly on top of IP.&lt;/p&gt;
&lt;h3 id=&#34;45-how-does-ipsec-impact-mss-and-mtu&#34;&gt;4.5. How does IPsec impact MSS and MTU?&lt;/h3&gt;
&lt;p&gt;IPsec protocols add several headers and trailers to packets, all of which take up several bytes. For networks that use IPsec, either the MSS and MTU have to be adjusted accordingly, or packets will be fragmented and slightly delayed. Usually, the MTU for a network is 1,500 bytes. A normal IP header is 20 bytes long, and a TCP header is also 20 bytes long, meaning each packet can contain 1,460 bytes of payload. However, &lt;strong&gt;IPsec adds an Authentication Header, an ESP header, and associated trailers&lt;/strong&gt;. These add 50-60 bytes to a packet, or more.&lt;/p&gt;
&lt;h2 id=&#34;5-gre---network-layer&#34;&gt;5. GRE - Network Layer&lt;/h2&gt;
&lt;p&gt;Encapsulating packets within other packets is called &amp;ldquo;tunneling.&amp;rdquo; GRE tunnels are usually configured between two routers, with each router acting like one end of the tunnel. The routers are set up to send and receive GRE packets directly to each other. &lt;strong&gt;Any routers in between those two routers&lt;/strong&gt; will not open the encapsulated packets; they only reference the headers surrounding the encapsulated packets in order to forward them.&lt;/p&gt;
&lt;p&gt;GRE enables the usage of protocols that are not normally supported by a network, because the packets are wrapped within other packets that do use supported protocols. To understand how this works, think about the difference between a &lt;strong&gt;car&lt;/strong&gt; and a &lt;strong&gt;ferry&lt;/strong&gt;. A &lt;strong&gt;car&lt;/strong&gt; travels over roads on land, while a &lt;strong&gt;ferry&lt;/strong&gt; travels over &lt;strong&gt;water&lt;/strong&gt;. A &lt;strong&gt;car&lt;/strong&gt; cannot normally travel on &lt;strong&gt;water&lt;/strong&gt; — however, a &lt;strong&gt;car&lt;/strong&gt; can be loaded onto a &lt;strong&gt;ferry&lt;/strong&gt; in order to do so.&lt;/p&gt;
&lt;p&gt;For instance, suppose a company needs to set up a connection between the &lt;a href=&#34;https://www.cloudflare.com/learning/network-layer/what-is-a-lan/&#34;&gt;local area networks (LANs)&lt;/a&gt; in their two different offices. Both LANs use the latest version of the &lt;a href=&#34;https://www.cloudflare.com/learning/network-layer/internet-protocol/&#34;&gt;Internet Protocol&lt;/a&gt;, IPv6. But in order to get from one office network to another, traffic must pass through a network managed by a third party — which is somewhat outdated and only supports the older IPv4 protocol.&lt;/p&gt;
&lt;p&gt;With GRE, the company could send traffic through this network by encapsulating IPv6 packets within IPv4 packets. Referring back to the analogy, the &lt;strong&gt;IPv6 packets are the car&lt;/strong&gt;, the IPv4 packets are the ferry, and the &lt;strong&gt;third-party network is the water&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;51-what-goes-in-a-gre-header&#34;&gt;5.1. What goes in a GRE header?&lt;/h3&gt;
&lt;p&gt;GRE adds two headers to each packet: the GRE header, which is 4 bytes long, and an IP header, which is 20 bytes long. The GRE header indicates the protocol type used by the encapsulated packet. The IP header encapsulates the original packet&amp;rsquo;s header and payload. This means that a GRE packet usually has two IP headers: one for the original packet, and one added by the GRE protocol. Only the routers at each end of the GRE tunnel will reference the original, non-GRE IP header.&lt;/p&gt;
&lt;h3 id=&#34;52-how-does-the-use-of-gre-impact-mtu-and-mss-requirements&#34;&gt;5.2. How does the use of GRE impact MTU and MSS requirements?&lt;/h3&gt;
&lt;p&gt;Like any protocol, using GRE adds a few bytes to the size of data packets. This must be factored into the MSS and MTU settings for packets. If the MTU is 1,500 bytes and the MSS is 1,460 bytes (to account for the size of the necessary IP and &lt;a href=&#34;https://www.cloudflare.com/learning/ddos/glossary/tcp-ip/&#34;&gt;TCP&lt;/a&gt; headers), the addition of GRE 24-byte headers will cause the packets to exceed the MTU:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;1,460 bytes [payload] + 20 bytes [TCP header] + 20 bytes [IP header] + 24 bytes [GRE header + IP header] = 1,524 bytes&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As a result, the packets will be fragmented. Fragmentation slows down packet delivery times and increases how much compute power is used, because packets that exceed the MTU must be broken down and then reassembled.&lt;/p&gt;
&lt;p&gt;This can be avoided by reducing the MSS to accommodate the GRE headers. If the MSS is set to 1,436 instead of 1,460, the GRE headers will be accounted for and the packets will not exceed the MTU of 1,500:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;1,436 bytes [payload] + 20 bytes [TCP header] + 20 bytes [IP header] + 24 bytes [GRE header + IP header] = 1,500 bytes&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;While fragmentation is avoided, the result is that payloads are slightly smaller, meaning it will take extra packets to deliver data. For instance, if the goal is to deliver 150,000 bytes of content (or about 150 kB), and if the MTU is set to 1,500 and no other layer 3 protocols are used, compare how many packets are necessary when GRE is used versus when it is not used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Without GRE, MSS 1,460: &lt;strong&gt;103&lt;/strong&gt; packets&lt;/li&gt;
&lt;li&gt;With GRE, MSS 1,436: &lt;strong&gt;105&lt;/strong&gt; packets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The extra two packets add milliseconds of delay to the data transfer. However, the usage of GRE may allow these packets to take faster network paths than they could otherwise take, which can make up for the lost time.&lt;/p&gt;
&lt;h2 id=&#34;6-ssh-tunneling----application-layer&#34;&gt;6. SSH Tunneling  - Application layer&lt;/h2&gt;
&lt;p&gt;The Secure Shell (SSH) protocol sets up encrypted connections between client and server, and can also be used to set up a secure tunnel. SSH operates at layer 7 of the OSI model, the application layer. By contrast, IPsec, IP-in-IP, and GRE operate at the network layer.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Secure_Shell&#34;&gt;Secure Shell&lt;/a&gt; (SSH) tunnel&lt;/em&gt; consists of an encrypted tunnel created through an &lt;a href=&#34;https://en.wikipedia.org/wiki/Secure_Shell&#34;&gt;SSH protocol&lt;/a&gt; connection. Users may set up SSH tunnels to transfer &lt;a href=&#34;https://en.wikipedia.org/wiki/Unencrypted&#34;&gt;unencrypted&lt;/a&gt; traffic over a network through an &lt;a href=&#34;https://en.wikipedia.org/wiki/Encrypted&#34;&gt;encrypted&lt;/a&gt; channel. It is a software-based approach to network security and the result is transparent encryption.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudflare.com/learning/network-layer/what-is-ipsec/&#34;&gt;What is IPsec? | How IPsec VPNs work | Cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudflare.com/learning/network-layer/what-is-tunneling/&#34;&gt;What is tunneling? | Tunneling in networking | Cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Tunneling_protocol&#34;&gt;Tunneling protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudflare.com/learning/network-layer/what-is-gre-tunneling/&#34;&gt;What is GRE tunneling? | How GRE protocol works | Cloudflare&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>TUN/TAP Devices</title>
      <link>https://blog.jiyi27.com/posts/networking/007-tun-tap-device/</link>
      <pubDate>Fri, 08 Sep 2023 17:54:59 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/networking/007-tun-tap-device/</guid>
      <description>&lt;h2 id=&#34;1-tuntap-devices&#34;&gt;1. TUN/TAP Devices&lt;/h2&gt;
&lt;p&gt;In computer networking, &lt;strong&gt;TUN&lt;/strong&gt; and &lt;strong&gt;TAP&lt;/strong&gt; are two different kernel &lt;strong&gt;virtual network devices&lt;/strong&gt;. Though both are for tunneling purposes, TUN and TAP can&amp;rsquo;t be used together because they transmit and receive packets at different layers of the network stack. TUN (network TUNnel) devices are used for IP packet-level tunneling, while TAP (network TAP) devices are used for Ethernet frame-level tunneling.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A network interface can be a physical device, called network interface controller (NIC), such as an ethernet card or wireless adapter, or a virtual device, such as a TUN or TAP interface.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-tuntap-devices&#34;&gt;1. TUN/TAP Devices&lt;/h2&gt;
&lt;p&gt;In computer networking, &lt;strong&gt;TUN&lt;/strong&gt; and &lt;strong&gt;TAP&lt;/strong&gt; are two different kernel &lt;strong&gt;virtual network devices&lt;/strong&gt;. Though both are for tunneling purposes, TUN and TAP can&amp;rsquo;t be used together because they transmit and receive packets at different layers of the network stack. TUN (network TUNnel) devices are used for IP packet-level tunneling, while TAP (network TAP) devices are used for Ethernet frame-level tunneling.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A network interface can be a physical device, called network interface controller (NIC), such as an ethernet card or wireless adapter, or a virtual device, such as a TUN or TAP interface.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://www.baeldung.com/linux/create-check-network-interfaces&#34;&gt;https://www.baeldung.com/linux/create-check-network-interfaces&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TUN/TAP provides packet reception and transmission for user space programs. It can be seen as a simple Point-to-Point or Ethernet device, which, instead of receiving packets from physical media, receives them from user space program and instead of sending packets via physical media writes them to the user space program. It interacts with user space program not the kernel.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://docs.kernel.org/networking/tuntap.html&#34;&gt;https://docs.kernel.org/networking/tuntap.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-tuntap--network-stack&#34;&gt;2. TUN/TAP &amp;amp; Network Stack&lt;/h2&gt;
&lt;p&gt;TUN/TAP is an operating-system interface for creating network interfaces managed by userspace. This is usually used to implement userspace Virtual Private Networks[&lt;a href=&#34;https://www.gabriel.urdhr.fr/2021/05/08/tuntap/#fn1&#34;&gt;1]&lt;/a&gt; (VPNs), for example with &lt;a href=&#34;https://openvpn.net/&#34;&gt;OpenVPN&lt;/a&gt;, &lt;a href=&#34;https://www.gabriel.urdhr.fr/2017/08/02/foo-over-ssh/#tuntap-forwarding&#34;&gt;OpenSSH&lt;/a&gt; (&lt;code&gt;Tunnel&lt;/code&gt; configuration or &lt;code&gt;-w&lt;/code&gt; argument), &lt;a href=&#34;https://code.ffdn.org/l2tpns/l2tpns&#34;&gt;l2tpns&lt;/a&gt;, etc.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+--------------------------------------------+
| Processes                                  |
+--------------------------------------------+
  ↕ Socket interface
+---------------------------------------------+
| Network Stack (kernel)                      |&amp;lt;--+
+---------------------------------------------+   |
  ↕ Eth. frame     ↕ Eth. frame    ↕ IP packet    |
+--------------+ +-------------+ +------------+   |
| enp2s0       | | tap0        | | tun0       |   |
+--------------+ +-------------+ +------------+   |
  ↑ Eth. frame     ↕ Eth. frame¹   ↕ IP packet¹   |
+--------------+ +-------------+ +------------+   |
| Driver       | | Process     | | Process    |   |
+--------------+ +-------------+ +------------+   |
  ↕ Eth. frame²    ↑               ↑              |
+--------------+   +---------------+--------------+
| Eth. Adapter  |  (encapsulated packets)
+--------------+
  ↕ Eth. frame
+--------------+
| Eth. Network |
+--------------+
Physical netdev    Ethernet VPN      IP VPN


¹: via /dev/net/tun
²: over PCI Express for example
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are many applications running on our OS (reside in user space), they send network packets with socket interface (on linux). All the packets through &lt;strong&gt;socket interface&lt;/strong&gt; will go to one place: the &lt;strong&gt;Network Stack&lt;/strong&gt; (resides in kernel). And the packets from the Network Stack only have two direction to go, one is the physical network interfce (&lt;strong&gt;NIC&lt;/strong&gt;), another direction is the virtual network devices &lt;strong&gt;tap/tun&lt;/strong&gt;, and we can get the packets from tap/tun which usually used in VPN application (resides in user space). Of course, VPN applicatipn (user space) can write packet into &lt;strong&gt;tap/tun&lt;/strong&gt; devices and after written into tap/tun the packet will goes to &lt;strong&gt;Network Stack&lt;/strong&gt;, and there are two direction again&amp;hellip;&lt;/p&gt;
&lt;p&gt;You probably notice that if we use TUN/TAP devices to handle the packets from other normal  applications, the packet seem to go through the Network Stack twice: the normal applications write data into socket interface and these packets will go through Netwok Stack and intercepted by TUN/TAP devices, then after vpn handles these packets, these packet will be sent to Network Stack again, which probably not efficient. (Notice that in qemu-kvm, tap device works with bridge, and the packets goes to bridge directly without going through Network Stack which is more efficient)&lt;/p&gt;
&lt;p&gt;Applications send or receive packet to/from socket interface:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; socket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(AF_PACKET,SOCK_RAW,IPPROTO_IP)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;VPN application send or receive packet to/from tun devices:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Request a TUN device
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/dev/net/tun&amp;#34;&lt;/span&gt;, O_RDWR);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// receives a (single) packet or frame from the virtual network interface;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Read an IP packet (because TUN works on IP layer):
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ssize_t&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;(fd, buffer, BUFFLEN);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// sends a (single) packet or frame to the virtual network interface;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;(...) 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Source: &lt;a href=&#34;https://www.gabriel.urdhr.fr/2021/05/08/tuntap/&#34;&gt;TUN/TAP interface (on Linux) - /dev/posts/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-tun-vs-tap&#34;&gt;3. TUN vs. TAP&lt;/h2&gt;
&lt;p&gt;There are two types of virtual network interfaces managed by &lt;code&gt;/dev/net/tun&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TUN interfaces transport IP packets (layer 3);&lt;/li&gt;
&lt;li&gt;TAP interfaces transport Ethernet frames (layer 2).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;31-tun-interfaces-l3&#34;&gt;3.1. TUN interfaces (L3)&lt;/h3&gt;
&lt;p&gt;TUN interfaces (&lt;code&gt;IFF_TUN&lt;/code&gt;) transport layer 3 (L3) Protocol Data Units (PDUs):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in practice, it transports IPv4 and/or IPv6 packets;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read()&lt;/code&gt; gets a L3 PDU (an IP packet);&lt;/li&gt;
&lt;li&gt;you must &lt;code&gt;write()&lt;/code&gt; L3 PDUs (an IP packet);&lt;/li&gt;
&lt;li&gt;there is no layer 2 (Ethernet, etc.) involved in the interface;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-tap-interfaces-l2&#34;&gt;3.2. TAP interfaces (L2)&lt;/h3&gt;
&lt;p&gt;TAP interfaces (&lt;code&gt;IFF_TUN&lt;/code&gt;) transport layer 2 (L2) PDUs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in practice, it transports Ethernet frames (i.e. this is a virtual Ethernet adapter);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;read()&lt;/code&gt; gets a L2 PDU;&lt;/li&gt;
&lt;li&gt;you must &lt;code&gt;write()&lt;/code&gt; L2 PDUs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://www.gabriel.urdhr.fr/2021/05/08/tuntap/&#34;&gt;TUN/TAP interface (on Linux) - /dev/posts/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-set-up-tuntap-devices&#34;&gt;4. Set up TUN/TAP devices&lt;/h2&gt;
&lt;p&gt;Because TUN is a layer 3 connection, it acts as a point-to-point link. We’ll assign these parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;local address (for your machine): 192.0.2.1&lt;/li&gt;
&lt;li&gt;remote address (for Scapy): 192.0.2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On Linux, you would use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ip link set tun0 up
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ip addr add 192.0.2.1 peer 192.0.2.2 dev tun0 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sudo ip addr add 192.0.2.1 peer 192.0.2.2 dev tun0  up&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On BSD and macOS, use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ifconfig tun0 up
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ifconfig tun0 192.0.2.1 192.0.2.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sudo ifconfig tun0 192.0.2.1 192.0.2.2 up&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Source: &lt;a href=&#34;https://scapy.readthedocs.io/en/latest/layers/tuntap.html#tuntapinterface-reference&#34;&gt;https://scapy.readthedocs.io/en/latest/layers/tuntap.html#tuntapinterface-reference&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>

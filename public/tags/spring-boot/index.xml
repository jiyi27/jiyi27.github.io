<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring Boot on 为霜的博客</title>
    <link>https://blog.jiyi27.com/tags/spring-boot/</link>
    <description>Recent content in Spring Boot on 为霜的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 Feb 2025 12:49:20 +0000</lastBuildDate><atom:link href="https://blog.jiyi27.com/tags/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Boot 踩坑汇总</title>
      <link>https://blog.jiyi27.com/posts/java/backend/007-nuggets-spring-boot/</link>
      <pubDate>Sun, 16 Feb 2025 12:49:20 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/java/backend/007-nuggets-spring-boot/</guid>
      <description>&lt;h2 id=&#34;1-responsestatusexception-总是返回-403&#34;&gt;1. &lt;code&gt;ResponseStatusException&lt;/code&gt; 总是返回 403&lt;/h2&gt;
&lt;p&gt;Service 层的部分代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (isPostLiked(postId, userId)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ResponseStatusException(HttpStatus.&lt;span style=&#34;color:#a6e22e&#34;&gt;CONFLICT&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;已经点赞过该帖子&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可是每次执行到这里, 客户端收到的总是 403 forbidden, 而不是 409, 刚开始猜想是这个异常被框架的某个部分吞了, 然后全都自动翻译成 403, 其实并不是这样, 我在&lt;a href=&#34;https://docs.spring.io/spring-security/reference/servlet/authorization/authorize-http-requests.html#_all_dispatches_are_authorized&#34;&gt;官方文档&lt;/a&gt;找到了对应的描述:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;AuthorizationFilter&lt;/code&gt; runs not just on every request, but on every dispatch. This means that the &lt;code&gt;REQUEST&lt;/code&gt; dispatch needs authorization, but also &lt;code&gt;FORWARD&lt;/code&gt;s, &lt;code&gt;ERROR&lt;/code&gt;s, and &lt;code&gt;INCLUDE&lt;/code&gt;s.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当 ResponseStatusException 被抛出时, Spring MVC &lt;strong&gt;不会直接把 409 发送给客户端&lt;/strong&gt;, 而是会&lt;strong&gt;触发 &lt;code&gt;ERROR&lt;/code&gt; Dispatch&lt;/strong&gt;, 注意 &lt;code&gt;ERROR&lt;/code&gt; dispatch 不是一个真正的 HTTP 请求, 而是在服务器内部重新分发请求的机制, 这个机制不是客户端发起的，而是服务器自己创建的, 目的是：&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-responsestatusexception-总是返回-403&#34;&gt;1. &lt;code&gt;ResponseStatusException&lt;/code&gt; 总是返回 403&lt;/h2&gt;
&lt;p&gt;Service 层的部分代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (isPostLiked(postId, userId)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ResponseStatusException(HttpStatus.&lt;span style=&#34;color:#a6e22e&#34;&gt;CONFLICT&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;已经点赞过该帖子&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可是每次执行到这里, 客户端收到的总是 403 forbidden, 而不是 409, 刚开始猜想是这个异常被框架的某个部分吞了, 然后全都自动翻译成 403, 其实并不是这样, 我在&lt;a href=&#34;https://docs.spring.io/spring-security/reference/servlet/authorization/authorize-http-requests.html#_all_dispatches_are_authorized&#34;&gt;官方文档&lt;/a&gt;找到了对应的描述:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;AuthorizationFilter&lt;/code&gt; runs not just on every request, but on every dispatch. This means that the &lt;code&gt;REQUEST&lt;/code&gt; dispatch needs authorization, but also &lt;code&gt;FORWARD&lt;/code&gt;s, &lt;code&gt;ERROR&lt;/code&gt;s, and &lt;code&gt;INCLUDE&lt;/code&gt;s.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当 ResponseStatusException 被抛出时, Spring MVC &lt;strong&gt;不会直接把 409 发送给客户端&lt;/strong&gt;, 而是会&lt;strong&gt;触发 &lt;code&gt;ERROR&lt;/code&gt; Dispatch&lt;/strong&gt;, 注意 &lt;code&gt;ERROR&lt;/code&gt; dispatch 不是一个真正的 HTTP 请求, 而是在服务器内部重新分发请求的机制, 这个机制不是客户端发起的，而是服务器自己创建的, 目的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;让 Spring 的全局异常处理（比如 &lt;code&gt;@ControllerAdvice&lt;/code&gt;）有机会处理这个错误&lt;/li&gt;
&lt;li&gt;让 &lt;code&gt;/error&lt;/code&gt; 端点（如果有）可以生成友好的错误页面或 JSON 响应&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spring Security 认为 &lt;code&gt;ERROR&lt;/code&gt; dispatch 是新的请求, 默认情况下，&lt;code&gt;ERROR&lt;/code&gt; dispatch 需要单独授权, 否则可能会被拦截, 导致 &lt;code&gt;403 Forbidden&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;所以直接修改 Spring Security 配置代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;http.&lt;span style=&#34;color:#a6e22e&#34;&gt;authorizeHttpRequests&lt;/span&gt;(auth &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; auth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;requestMatchers&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/api/users/login&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/api/users/register&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;permitAll&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 允许所有人访问错误页面（防止 Spring Security 拦截 500, 400 等错误页面）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;dispatcherTypeMatchers&lt;/span&gt;(DispatcherType.&lt;span style=&#34;color:#a6e22e&#34;&gt;ERROR&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;permitAll&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;anyRequest&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;authenticated&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以在 &lt;code&gt;application.properties&lt;/code&gt; 里打开 Spring 的 &lt;code&gt;DispatcherServlet&lt;/code&gt; 日志：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后在 Controller 里故意抛出 &lt;code&gt;ResponseStatusException&lt;/code&gt;，查看日志：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;DEBUG org.springframework.web.servlet.DispatcherServlet: &amp;#34;ERROR&amp;#34; dispatch for GET &amp;#34;/like&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参考: &lt;a href=&#34;https://stackoverflow.com/a/76951737/16317008&#34;&gt;Why is Spring ResponseStatusException 400 translated into 403&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-spring-data-jpa-命名规则&#34;&gt;2. Spring Data JPA 命名规则&lt;/h2&gt;
&lt;p&gt;Spring Data JPA 会根据 方法名 解析出 SQL 查询语句, 它的解析规则是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;findBy + 字段名&lt;/code&gt; → 根据字段名查询&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findBy + 字段名1 + And + 字段名2&lt;/code&gt; → 根据多个字段查询&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findBy + 字段名 + OrderBy + 排序字段 + Desc/Asc&lt;/code&gt; → 带排序的查询&lt;/li&gt;
&lt;li&gt;&lt;code&gt;countBy + 字段名&lt;/code&gt; → 统计数量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;existsBy + 字段名&lt;/code&gt; → 判断数据是否存在&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以在查询的时候 JPA 只解析 &lt;code&gt;find（实体）By（字段）&lt;/code&gt;, 不会解析 &lt;code&gt;find（字段）By（字段）&lt;/code&gt;, 也就是说如果你想查询某个字段, 抱歉只能通过 &lt;code&gt;@Query&lt;/code&gt;, 单凭 JPA 解析方法自动生成 SQL 并不行, 因为 JPA 只可以查询实体, 比如下面这个:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserRepository&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; JpaRepository&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;User, Long&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;User&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findByName&lt;/span&gt;(String name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;User&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findByNameAndAge&lt;/span&gt;(String name, Integer age);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样的可以自动解析, 因为要查询的是单个或者多个 &lt;code&gt;User&lt;/code&gt;, 如果你要是想查询 name, 写出下面的语句:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findNamesByAge&lt;/span&gt;(Integer age);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译时不报错, 等到运行的时候就会抛出异常, 到时候你会发现此方法最后返回的并不是 &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; 而是 &lt;code&gt;User&lt;/code&gt; 类型, 意外吧, 是的, 你的函数声明只是个摆设, Spring Data JPA 解析的 SQL 才决定了最终返回的类型,&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Spring Security 一根难啃的骨头</title>
      <link>https://blog.jiyi27.com/posts/java/backend/005-spring-security/</link>
      <pubDate>Thu, 13 Feb 2025 20:29:10 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/java/backend/005-spring-security/</guid>
      <description>&lt;h2 id=&#34;1-前言&#34;&gt;1. 前言&lt;/h2&gt;
&lt;p&gt;AuthenticationManager, AuthenticationProvider , ProviderManager, AuthenticationManager, DaoAuthenticationProvider, UserDetailsService, SecurityFilterChain, 这么多类和接口, 搞糊涂了已经, 去年学过一次 Spring Security, 感觉太复杂~~(没学会)~~, 就转战 Golang 了, 到最后找工作还是得面对 Java, 这不, 开始恶补 Spring&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;2-两种认证方式&#34;&gt;2. 两种认证方式&lt;/h2&gt;
&lt;p&gt;我们最终的目的都是让服务器记住/区分客户端, 实现这个目的的方法有两种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在服务端维护有状态的 Session&lt;/li&gt;
&lt;li&gt;在客户端保存 JWT Token (通过 cookie 或其他方式保存)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spring Security 既支持基于 Session 的有状态会话，也支持基于 Token (例如 JWT) 的无状态会话,&lt;/p&gt;
&lt;p&gt;在请求在进入 Controller 之前, &lt;strong&gt;Spring Security 会预先拦截所有请求&lt;/strong&gt;, 如果用户访问受保护页面, Spring Security 会通过 cookie 或者 Authorization 等请求头检查客户端是否已认证, 如果没有认证, 请求将会被重定向到我们预先指定的路径, 比如 &lt;code&gt;\login&lt;/code&gt;, 我们也可以向 Spring Security 指定哪些路径受保护, 哪些路径不受保护, 大致如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; SecurityFilterChain &lt;span style=&#34;color:#a6e22e&#34;&gt;securityFilterChain&lt;/span&gt;(HttpSecurity http) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 访问 /login /register 不需要认证&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    http.&lt;span style=&#34;color:#a6e22e&#34;&gt;authorizeHttpRequests&lt;/span&gt;(auth &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; auth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .&lt;span style=&#34;color:#a6e22e&#34;&gt;requestMatchers&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/register&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;permitAll&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .&lt;span style=&#34;color:#a6e22e&#34;&gt;anyRequest&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;authenticated&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 使用默认表单页面登录 (不用自己实现登录页面)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    http.&lt;span style=&#34;color:#a6e22e&#34;&gt;authenticationProvider&lt;/span&gt;(authenticationProvider())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .&lt;span style=&#34;color:#a6e22e&#34;&gt;formLogin&lt;/span&gt;(Customizer.&lt;span style=&#34;color:#a6e22e&#34;&gt;withDefaults&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 指定 Session 模式: IF_REQUIRED &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    http.&lt;span style=&#34;color:#a6e22e&#34;&gt;sessionManagement&lt;/span&gt;(session &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; session
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .&lt;span style=&#34;color:#a6e22e&#34;&gt;sessionCreationPolicy&lt;/span&gt;(SessionCreationPolicy.&lt;span style=&#34;color:#a6e22e&#34;&gt;IF_REQUIRED&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .&lt;span style=&#34;color:#a6e22e&#34;&gt;maximumSessions&lt;/span&gt;(1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .&lt;span style=&#34;color:#a6e22e&#34;&gt;expiredUrl&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login?expired&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; http.&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面代码我们使用的是  &lt;strong&gt;Spring Security 提供的默认表单登录 + Session 管理状态 的方式&lt;/strong&gt;, 也就是说当我们第一次访问主页 &lt;code&gt;localhost:8080/&lt;/code&gt;, 因为还没认证, 就会被重定向到 Spring Security 提供的默认表单登录页面, 如果验证成功 Spring Security 会自动维护一个 Session，返回给客户端一个 Cookie, 最后浏览器存有 &lt;code&gt;JSESSIONID&lt;/code&gt; Cookie，让后续请求自动携带, 如下图:&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-前言&#34;&gt;1. 前言&lt;/h2&gt;
&lt;p&gt;AuthenticationManager, AuthenticationProvider , ProviderManager, AuthenticationManager, DaoAuthenticationProvider, UserDetailsService, SecurityFilterChain, 这么多类和接口, 搞糊涂了已经, 去年学过一次 Spring Security, 感觉太复杂~~(没学会)~~, 就转战 Golang 了, 到最后找工作还是得面对 Java, 这不, 开始恶补 Spring&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;2-两种认证方式&#34;&gt;2. 两种认证方式&lt;/h2&gt;
&lt;p&gt;我们最终的目的都是让服务器记住/区分客户端, 实现这个目的的方法有两种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在服务端维护有状态的 Session&lt;/li&gt;
&lt;li&gt;在客户端保存 JWT Token (通过 cookie 或其他方式保存)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spring Security 既支持基于 Session 的有状态会话，也支持基于 Token (例如 JWT) 的无状态会话,&lt;/p&gt;
&lt;p&gt;在请求在进入 Controller 之前, &lt;strong&gt;Spring Security 会预先拦截所有请求&lt;/strong&gt;, 如果用户访问受保护页面, Spring Security 会通过 cookie 或者 Authorization 等请求头检查客户端是否已认证, 如果没有认证, 请求将会被重定向到我们预先指定的路径, 比如 &lt;code&gt;\login&lt;/code&gt;, 我们也可以向 Spring Security 指定哪些路径受保护, 哪些路径不受保护, 大致如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; SecurityFilterChain &lt;span style=&#34;color:#a6e22e&#34;&gt;securityFilterChain&lt;/span&gt;(HttpSecurity http) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 访问 /login /register 不需要认证&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    http.&lt;span style=&#34;color:#a6e22e&#34;&gt;authorizeHttpRequests&lt;/span&gt;(auth &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; auth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .&lt;span style=&#34;color:#a6e22e&#34;&gt;requestMatchers&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/register&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;permitAll&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .&lt;span style=&#34;color:#a6e22e&#34;&gt;anyRequest&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;authenticated&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 使用默认表单页面登录 (不用自己实现登录页面)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    http.&lt;span style=&#34;color:#a6e22e&#34;&gt;authenticationProvider&lt;/span&gt;(authenticationProvider())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .&lt;span style=&#34;color:#a6e22e&#34;&gt;formLogin&lt;/span&gt;(Customizer.&lt;span style=&#34;color:#a6e22e&#34;&gt;withDefaults&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 指定 Session 模式: IF_REQUIRED &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    http.&lt;span style=&#34;color:#a6e22e&#34;&gt;sessionManagement&lt;/span&gt;(session &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; session
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .&lt;span style=&#34;color:#a6e22e&#34;&gt;sessionCreationPolicy&lt;/span&gt;(SessionCreationPolicy.&lt;span style=&#34;color:#a6e22e&#34;&gt;IF_REQUIRED&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .&lt;span style=&#34;color:#a6e22e&#34;&gt;maximumSessions&lt;/span&gt;(1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .&lt;span style=&#34;color:#a6e22e&#34;&gt;expiredUrl&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login?expired&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; http.&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面代码我们使用的是  &lt;strong&gt;Spring Security 提供的默认表单登录 + Session 管理状态 的方式&lt;/strong&gt;, 也就是说当我们第一次访问主页 &lt;code&gt;localhost:8080/&lt;/code&gt;, 因为还没认证, 就会被重定向到 Spring Security 提供的默认表单登录页面, 如果验证成功 Spring Security 会自动维护一个 Session，返回给客户端一个 Cookie, 最后浏览器存有 &lt;code&gt;JSESSIONID&lt;/code&gt; Cookie，让后续请求自动携带, 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2025/02/304faf547af877e5f76bd7e7850647eb.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然我们也可以通过第二种方式, 无状态 JWT 来实现认证, 此时的 SecurityFilterChain 代码大致如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; SecurityFilterChain &lt;span style=&#34;color:#a6e22e&#34;&gt;securityFilterChain&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        HttpSecurity http,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        JwtAuthFilter jwtAuthenticationFilter) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 禁止 CSRF, 任何请求都可以发送到服务器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    http.&lt;span style=&#34;color:#a6e22e&#34;&gt;csrf&lt;/span&gt;(AbstractHttpConfigurer::disable);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 指定无状态 Session&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    http.&lt;span style=&#34;color:#a6e22e&#34;&gt;sessionManagement&lt;/span&gt;(session &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; session.&lt;span style=&#34;color:#a6e22e&#34;&gt;sessionCreationPolicy&lt;/span&gt;(SessionCreationPolicy.&lt;span style=&#34;color:#a6e22e&#34;&gt;STATELESS&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    http.&lt;span style=&#34;color:#a6e22e&#34;&gt;authorizeHttpRequests&lt;/span&gt;(auth &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; auth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .&lt;span style=&#34;color:#a6e22e&#34;&gt;requestMatchers&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/api/users/login&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/api/users/register&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;permitAll&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .&lt;span style=&#34;color:#a6e22e&#34;&gt;anyRequest&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;authenticated&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 添加自定义的 JWT 验证逻辑, 验证请求中的 JWT Token 是否有效&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    http.&lt;span style=&#34;color:#a6e22e&#34;&gt;addFilterBefore&lt;/span&gt;(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; http.&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ curl -X POST -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; -d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34;username&amp;#34;:&amp;#34;user1&amp;#34;,&amp;#34;password&amp;#34;:&amp;#34;ps123&amp;#34;}&amp;#39;&lt;/span&gt; http://localhost:8080/login -v
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt; HTTP/1.1 &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt; X-XSS-Protection: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0dXNlciIsImlhdCI6MTczOTU1OTk0NywiZXhwIjoxNzM5NjQ2MzQ3fQ.3o4g5OJVQSzrCJtoqNvnsV-PdgOMeGVdSuGhEuQy3WM&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面代码没有指定登录的验证方式, 也就是说当用户第一次访问受保护的路径时, Spring Security 不会帮我们重定向到登录页面, 而是返回 403/401 未授权, 客户端需要直接向路径比如  &lt;code&gt;\login&lt;/code&gt; 发送登录请求, 以获取 JWT Token, 所以作为服务端, 我们应该实现一个 Controller, 接受登录请求:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@PostMapping&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; JwtResponse &lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;(UserDTO.&lt;span style=&#34;color:#a6e22e&#34;&gt;LoginRequest&lt;/span&gt; request) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// userService.login() 处理认证逻辑 校对密码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 若成功, 返回给用户 JWT Token&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; userService.&lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;(request);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此可以总结无论是基于 Session 还是 JWT, 客户端认证都包括两个阶段:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过登录获取 Session ID 或 JWT Token&lt;/li&gt;
&lt;li&gt;之后的每次请求自动携带 Session ID 或 JWT Token 用于认证&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;现在你应该知道 SecurityFilterChain 是干嘛的了, 还剩下 AuthenticationManager, AuthenticationProvider , ProviderManager, AuthenticationManager, DaoAuthenticationProvider, UserDetailsService, 我们慢慢来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-基于-token-jwt-的无状态会话&#34;&gt;3. 基于 Token (JWT) 的无状态会话&lt;/h2&gt;
&lt;p&gt;作为后端开发, 我们需要先介绍客户端和服务器认识(登录), 然后客户端访问一些资源就不用每次都登录了, 所以我们先说登录密码验证.&lt;/p&gt;
&lt;h3 id=&#34;31-登录&#34;&gt;3.1. 登录&lt;/h3&gt;
&lt;p&gt;传统的登录密码验证逻辑很简单, 客户端向 &lt;code&gt;/login&lt;/code&gt; 发送请求, 服务器直接在 Controller 对应的方法中对比账号密码是否匹配, 而 Spring Security 并不是这么做的,  刚开始我搞不明白的是, 明明就是简单的账号密码比较, 为什么非要搞得那么麻烦,&lt;/p&gt;
&lt;p&gt;因为 Spring Security 的设计理念是“配置驱动”，它提供了大量的接口和类去处理各种场景：&lt;code&gt;UserDetailsService&lt;/code&gt;、&lt;code&gt;PasswordEncoder&lt;/code&gt;、&lt;code&gt;DaoAuthenticationProvider&lt;/code&gt;、&lt;code&gt;AuthenticationManager&lt;/code&gt;、&lt;code&gt;SecurityFilterChain&lt;/code&gt; 等,&lt;/p&gt;
&lt;p&gt;它的本意是: 你只要实现自己的一小部分逻辑（比如怎么查数据库获取密码）, 其他通用的部分（密码对比、账户状态检查、异常处理等）就交给框架内部的 &lt;code&gt;DaoAuthenticationProvider&lt;/code&gt; 等组件去做.&lt;/p&gt;
&lt;p&gt;还是很难懂, 现在我们说的是登录, 所以看看 Spring Security 怎么进行账号密码验证, 在 Spring Security 中, 我们一般使用 &lt;strong&gt;DaoAuthenticationProvider&lt;/strong&gt; 来进行 “用户名+密码” 认证, 它需要知道两件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如何加载用户信息: 也就是 &lt;strong&gt;UserDetailsService&lt;/strong&gt;：通过用户名去数据库等地方查找用户，并返回一个实现了 &lt;code&gt;UserDetails&lt;/code&gt; 的对象（包含用户名、密码、权限等）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何验证密码: 也就是 &lt;strong&gt;PasswordEncoder&lt;/strong&gt;：用来做密码加密或密码对比&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是说&lt;code&gt;DaoAuthenticationProvider&lt;/code&gt; 有两个小弟:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UserDetailsService&lt;/code&gt; 用来加载用户数据(账号密码)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PasswordEncoder&lt;/code&gt;  用来加密 验证 密码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在我们还要引入另外一个接口:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AuthenticationProvider 和 DaoAuthenticationProvider 的区别:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AuthenticationProvider&lt;/code&gt; 是一个 接口，定义了认证逻辑的标准&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DaoAuthenticationProvider&lt;/code&gt; 是 &lt;code&gt;AuthenticationProvider&lt;/code&gt; 的一个 实现, 用于数据库用户名/密码认证&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@PostMapping&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ResponseEntity&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;UserDTO.&lt;span style=&#34;color:#a6e22e&#34;&gt;JwtResponse&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;(UserDTO.&lt;span style=&#34;color:#a6e22e&#34;&gt;LoginRequest&lt;/span&gt; request) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 1. 封装用户名密码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UsernamePasswordAuthenticationToken authRequest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UsernamePasswordAuthenticationToken(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      request.&lt;span style=&#34;color:#a6e22e&#34;&gt;getUsername&lt;/span&gt;(), 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      request.&lt;span style=&#34;color:#a6e22e&#34;&gt;getPassword&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 2. 调用 AuthenticationManager 进行认证&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 如果认证不通过，authenticate(...) 会抛出异常, 由全局异常处理器处理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Authentication authentication &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; authenticationManager.&lt;span style=&#34;color:#a6e22e&#34;&gt;authenticate&lt;/span&gt;(authRequest);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 3. 如果认证通过，生成 JWT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String jwt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; jwtUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;generateToken&lt;/span&gt;(authentication);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 4. 返回 JWT 给客户端（可放在 Body，也可放在 Header）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ResponseEntity.&lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UserDTO.&lt;span style=&#34;color:#a6e22e&#34;&gt;JwtResponse&lt;/span&gt;(jwt));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;ProviderManager 和 AuthenticationManager 的区别:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AuthenticationManager&lt;/code&gt; 是一个接口, 这个接口规定所有实现它的类, 都应该实现&lt;code&gt;authenticate(Authentication authentication)&lt;/code&gt; 方法, 该方法是为了身份验证&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ProviderManager&lt;/code&gt; 是 &lt;code&gt;AuthenticationManager&lt;/code&gt; 的一个 默认实现，负责管理多个 &lt;code&gt;AuthenticationProvider&lt;/code&gt; 并协调认证过程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spring Security 允许多个 &lt;code&gt;AuthenticationManager&lt;/code&gt; 的实现, 但 &lt;code&gt;ProviderManager&lt;/code&gt; 是默认实现, 我们来看一下 &lt;code&gt;AuthenticationManager&lt;/code&gt; 接口的定义:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthenticationManager&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Authentication &lt;span style=&#34;color:#a6e22e&#34;&gt;authenticate&lt;/span&gt;(Authentication authentication) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; AuthenticationException;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过上面的代码我们也可以看出, 我们调用 &lt;code&gt;authenticationManager.authenticate(authRequest)&lt;/code&gt; 方法进行验证密码匹配, 而且此函数返回一个 &lt;code&gt;Authentication&lt;/code&gt; 对象, 看一下这个类的定义, 就知道是什么了:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Authentication&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Principal, Serializable {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Collection&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; GrantedAuthority&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getAuthorities&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Object &lt;span style=&#34;color:#a6e22e&#34;&gt;getCredentials&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Object &lt;span style=&#34;color:#a6e22e&#34;&gt;getDetails&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Object &lt;span style=&#34;color:#a6e22e&#34;&gt;getPrincipal&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isAuthenticated&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setAuthenticated&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; isAuthenticated) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IllegalArgumentException;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;现在你知道了 SecurityFilterChain, AuthenticationProvider, DaoAuthenticationProvider, UserDetailsService, PasswordEncoder, ProviderManager 和 AuthenticationManager&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;32-验证-jwt-token&#34;&gt;3.2. 验证 JWT Token&lt;/h3&gt;
&lt;p&gt;验证涉及的概念很少,  只需要自定义 JWT Token 验证逻辑, 加入到 Spring Security Chain 中, 这样之后每次请求来到服务器, 都会被 Spring Security Chain 拦截, 然后经过我们自定义的 JWT Token 验证逻辑, 若验证成功, 放行,&lt;/p&gt;
&lt;p&gt;如何自定义 JWT 验证逻辑呢? 答: 通过实现 &lt;code&gt;OncePerRequestFilter&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;当然 &lt;code&gt;OncePerRequestFilter&lt;/code&gt; 的作用可不止用来验证 JWT Token, 在 Spring Web 应用中, 我们经常会使用 &lt;code&gt;Filter&lt;/code&gt; 进行请求的拦截, 比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;认证与授权（如 JWT 解析）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;记录请求日志&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;统一处理 CORS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请求参数或响应的预处理&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认的 &lt;code&gt;Filter&lt;/code&gt; 可能会在一次请求的多个阶段执行多次（例如 &lt;code&gt;forward&lt;/code&gt; 或 &lt;code&gt;include&lt;/code&gt; 操作时），导致重复的逻辑执行。而 &lt;code&gt;OncePerRequestFilter&lt;/code&gt; 解决了这个问题，保证了在同一个请求的整个生命周期内，该过滤器仅执行一次。&lt;code&gt;OncePerRequestFilter&lt;/code&gt; 会检查当前请求的 &lt;code&gt;request&lt;/code&gt; 是否已经被它处理过（通过 &lt;code&gt;request&lt;/code&gt; 的 &lt;code&gt;attribute&lt;/code&gt; 记录状态）。如果是第一次执行，则调用 &lt;strong&gt;&lt;code&gt;doFilterInternal()&lt;/code&gt;&lt;/strong&gt; 处理逻辑。如果该请求在后续的 &lt;code&gt;forward&lt;/code&gt; 或 &lt;code&gt;include&lt;/code&gt; 中再次经过这个过滤器，则不会再次执行 &lt;code&gt;doFilterInternal()&lt;/code&gt;，而是直接放行。&lt;/p&gt;
&lt;p&gt;所以我们要怎么通过实现 &lt;code&gt;OncePerRequestFilter&lt;/code&gt; 来进行 JWT Token 验证呢? 来看大荧幕:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Component&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JwtAuthFilter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; OncePerRequestFilter {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 注意这个函数的名字&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doFilterInternal&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;@NonNull&lt;/span&gt; HttpServletRequest request,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;@NonNull&lt;/span&gt; HttpServletResponse response,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;@NonNull&lt;/span&gt; FilterChain filterChain)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; ServletException, IOException {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 从 Authorization 请求头中获取 JWT Token&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         String jwt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parseJwt(request);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 验证 token 是否有效&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (jwt &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; jwtUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;validateToken&lt;/span&gt;(jwt)) {...}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 转发到下一个 filter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        filterChain.&lt;span style=&#34;color:#a6e22e&#34;&gt;doFilter&lt;/span&gt;(request, response);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;parseJwt&lt;/span&gt;(HttpServletRequest request) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String headerAuth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request.&lt;span style=&#34;color:#a6e22e&#34;&gt;getHeader&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Authorization&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (StringUtils.&lt;span style=&#34;color:#a6e22e&#34;&gt;hasText&lt;/span&gt;(headerAuth) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; headerAuth.&lt;span style=&#34;color:#a6e22e&#34;&gt;startsWith&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bearer &amp;#34;&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; headerAuth.&lt;span style=&#34;color:#a6e22e&#34;&gt;substring&lt;/span&gt;(7);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然上面的都是伪代码, 只要知道大致发生什么就可以了, 接下来, 就是最后一步, 把这个 filter 添加到 Spring Security Chain 中, 也就是最开始我们在 &lt;code&gt;securityFilterChain()&lt;/code&gt; 方法中的语句:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;http.&lt;span style=&#34;color:#a6e22e&#34;&gt;addFilterBefore&lt;/span&gt;(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;现在你知道了 SecurityFilterChain, AuthenticationProvider, DaoAuthenticationProvider, UserDetailsService, PasswordEncoder, OncePerRequestFilter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;4-基于-session-的有状态会话&#34;&gt;4. 基于 Session 的有状态会话&lt;/h2&gt;
&lt;h3 id=&#34;41-登录&#34;&gt;4.1. 登录&lt;/h3&gt;
&lt;p&gt;我们已经知道, 要实现登录需要使用 DaoAuthenticationProvider 和 它的两个工具 UserDetailsService, PasswordEncoder,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Slf4j&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RequiredArgsConstructor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SecurityConfig&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; UserRepository userRepository;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PasswordEncoder &lt;span style=&#34;color:#a6e22e&#34;&gt;passwordEncoder&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BCryptPasswordEncoder();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; UserDetailsService &lt;span style=&#34;color:#a6e22e&#34;&gt;userDetailsService&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; username &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            User user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; userRepository.&lt;span style=&#34;color:#a6e22e&#34;&gt;findByUsername&lt;/span&gt;(username)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .&lt;span style=&#34;color:#a6e22e&#34;&gt;orElseThrow&lt;/span&gt;(() &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UsernameNotFoundException(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;用户不存在&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            log.&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;用户信息: {}&amp;#34;&lt;/span&gt;, user);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// 把自己的 User 转换成 Spring Security 提供的 UserDetails 对象&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; org.&lt;span style=&#34;color:#a6e22e&#34;&gt;springframework&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;security&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;core&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;userdetails&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    user.&lt;span style=&#34;color:#a6e22e&#34;&gt;getUsername&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    user.&lt;span style=&#34;color:#a6e22e&#34;&gt;getPasswordHash&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    Collections.&lt;span style=&#34;color:#a6e22e&#34;&gt;emptyList&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DaoAuthenticationProvider &lt;span style=&#34;color:#a6e22e&#34;&gt;daoAuthenticationProvider&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        DaoAuthenticationProvider provider &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DaoAuthenticationProvider();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 加入 DaoAuthenticationProvider 的两个小弟&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        provider.&lt;span style=&#34;color:#a6e22e&#34;&gt;setUserDetailsService&lt;/span&gt;(userDetailsService());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        provider.&lt;span style=&#34;color:#a6e22e&#34;&gt;setPasswordEncoder&lt;/span&gt;(passwordEncoder());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; provider;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; AuthenticationManager &lt;span style=&#34;color:#a6e22e&#34;&gt;authenticationManager&lt;/span&gt;(AuthenticationConfiguration authenticationConfiguration) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; authenticationConfiguration.&lt;span style=&#34;color:#a6e22e&#34;&gt;getAuthenticationManager&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; SecurityFilterChain &lt;span style=&#34;color:#a6e22e&#34;&gt;securityFilterChain&lt;/span&gt;(HttpSecurity http) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        http.&lt;span style=&#34;color:#a6e22e&#34;&gt;authorizeHttpRequests&lt;/span&gt;(auth &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; auth
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .&lt;span style=&#34;color:#a6e22e&#34;&gt;requestMatchers&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;permitAll&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .&lt;span style=&#34;color:#a6e22e&#34;&gt;anyRequest&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;authenticated&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        http.&lt;span style=&#34;color:#a6e22e&#34;&gt;authenticationProvider&lt;/span&gt;(daoAuthenticationProvider())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          .&lt;span style=&#34;color:#a6e22e&#34;&gt;formLogin&lt;/span&gt;(Customizer.&lt;span style=&#34;color:#a6e22e&#34;&gt;withDefaults&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        http.&lt;span style=&#34;color:#a6e22e&#34;&gt;sessionManagement&lt;/span&gt;(session &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; session
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .&lt;span style=&#34;color:#a6e22e&#34;&gt;sessionCreationPolicy&lt;/span&gt;(SessionCreationPolicy.&lt;span style=&#34;color:#a6e22e&#34;&gt;IF_REQUIRED&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .&lt;span style=&#34;color:#a6e22e&#34;&gt;maximumSessions&lt;/span&gt;(1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .&lt;span style=&#34;color:#a6e22e&#34;&gt;expiredUrl&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login?expired&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; http.&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;SecurityConfig&lt;/code&gt; 基本上覆盖了我们上面讨论的所有的类和接口, 根据代码逻辑也可以看出:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们向 DaoAuthenticationProvider 添加了它的两个小弟 UserDetailsService 和 PasswordEncoder&lt;/li&gt;
&lt;li&gt;我们利用 UserDetailsService  指定如何加载用户信息(账号 密码), 然后返回一个 &lt;code&gt;UserDetails&lt;/code&gt; 的对象 (包含用户名、密码、权限等）&lt;/li&gt;
&lt;li&gt;我们利用 PasswordEncoder 进行加密 或者验证密码, umm, 这一点好像没显示出来, 应该在用户注册的逻辑里可以看到,&lt;/li&gt;
&lt;li&gt;securityFilterChain() 方法中 我们指定了哪些路径受保护, 指定了采用 Spring Security 提供的表单进行登录, 也指定了 Session 采用 IF_REQUIRED 模式 而不是 STATELESS&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;你可能会注意到为什么我们没写密码比较逻辑, 这是因为 &lt;code&gt;DaoAuthenticationProvider&lt;/code&gt; 会自动调用 &lt;code&gt;passwordEncoder().matches(rawPassword, encodedPassword)&lt;/code&gt; 来验证密码, 如果密码正确, 就会为请求生成一个 JSESSIONID 放到 cookie 返回, 同时自动创建一个 Session,&lt;/p&gt;
&lt;p&gt;在 JWT 的情况, 我们之所以需要自己实现密码验证逻辑, 是因为我们关闭了 Session 模式, 且要返回给用户一个 JWT Token, 而不是返回  Spring Security 自动生成的 JSESSIONID, 所以我们需要自己判断密码是否正确, 若正确, 自己生成 JWT Token 并返回给客户端,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的代码其实会遇到一个警告:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; automatically configuring username&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; warning, increase the logging level of &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;org.&lt;span style=&#34;color:#a6e22e&#34;&gt;springframework&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;security&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;annotation&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;authentication&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;configuration&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;InitializeUserDetailsBeanManagerConfigurer&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; to ERROR
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个警告的主要原因是 Spring Security 发现了一个 &lt;code&gt;AuthenticationProvider&lt;/code&gt; (即 &lt;code&gt;daoAuthenticationProvider()&lt;/code&gt;)，所以不会自动使用 &lt;code&gt;UserDetailsService&lt;/code&gt; 来配置基于用户名/密码的认证。&lt;/p&gt;
&lt;p&gt;也就是说, 在默认情况下，如果我们的 &lt;code&gt;SecurityConfig&lt;/code&gt; 只用提供 &lt;code&gt;UserDetailsService&lt;/code&gt; 和 &lt;code&gt;PasswordEncoder &lt;/code&gt; 的定义, 不用手动为 DaoAuthenticationProvider 添加 这俩小弟, Spring Security 会自动执行以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建 &lt;code&gt;DaoAuthenticationProvider&lt;/code&gt; 并使用 &lt;code&gt;UserDetailsService&lt;/code&gt; 进行认证&lt;/li&gt;
&lt;li&gt;创建 &lt;code&gt;AuthenticationManager&lt;/code&gt;，并将 &lt;code&gt;DaoAuthenticationProvider&lt;/code&gt; 添加进去&lt;/li&gt;
&lt;li&gt;允许基于用户名/密码的身份验证（即 &lt;code&gt;UsernamePasswordAuthenticationFilter&lt;/code&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以我们直接删除  &lt;code&gt;DaoAuthenticationProvider daoAuthenticationProvider(){...}&lt;/code&gt; 函数让 Spring Security 自动管理就行了, 然后之前的代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;http.&lt;span style=&#34;color:#a6e22e&#34;&gt;authenticationProvider&lt;/span&gt;(daoAuthenticationProvider())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#a6e22e&#34;&gt;formLogin&lt;/span&gt;(Customizer.&lt;span style=&#34;color:#a6e22e&#34;&gt;withDefaults&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;改为:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;http.&lt;span style=&#34;color:#a6e22e&#34;&gt;formLogin&lt;/span&gt;(Customizer.&lt;span style=&#34;color:#a6e22e&#34;&gt;withDefaults&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;42-验证-session-id&#34;&gt;4.2. 验证 Session ID&lt;/h3&gt;
&lt;p&gt;这一步不用我们操作, Spring Security 会自动帮我们验证, 我们上面的代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;http.&lt;span style=&#34;color:#a6e22e&#34;&gt;sessionManagement&lt;/span&gt;(session &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; session
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;sessionCreationPolicy&lt;/span&gt;(SessionCreationPolicy.&lt;span style=&#34;color:#a6e22e&#34;&gt;IF_REQUIRED&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;maximumSessions&lt;/span&gt;(1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;expiredUrl&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login?expired&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启用了 会话管理，Spring Security 会:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查 Session ID 是否有效（自动解析 &lt;code&gt;JSESSIONID&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;限制最多 1 个会话（如果用户在另一个地方登录，旧的 Session 会被踢下线）&lt;/li&gt;
&lt;li&gt;会话过期后跳转到 &lt;code&gt;/login?expired&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然你可以自己实现自己的 Session ID 认证逻辑, 还记得上面我们提到的 &lt;code&gt;OncePerRequestFilter&lt;/code&gt; 吗?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Component&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SessionValidationFilter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; OncePerRequestFilter {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; HttpSession session;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doFilterInternal&lt;/span&gt;(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; ServletException, IOException {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (session.&lt;span style=&#34;color:#a6e22e&#34;&gt;getAttribute&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SPRING_SECURITY_CONTEXT&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            response.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendRedirect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login?expired&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        filterChain.&lt;span style=&#34;color:#a6e22e&#34;&gt;doFilter&lt;/span&gt;(request, response);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后注册到 &lt;code&gt;SecurityFilterChain&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; SecurityFilterChain &lt;span style=&#34;color:#a6e22e&#34;&gt;securityFilterChain&lt;/span&gt;(HttpSecurity http) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 注册过滤器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    http.&lt;span style=&#34;color:#a6e22e&#34;&gt;addFilterBefore&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SessionValidationFilter(), UsernamePasswordAuthenticationFilter.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; http.&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但这完全是不必要的，因为 Spring Security 已经自动处理了这个逻辑。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1. 用户发送 `POST /login` 请求
2. `SecurityFilterChain`（接口，定义 Spring Security 过滤器链）
   - 由 `DefaultSecurityFilterChain` 实现
   - 其中包含 `UsernamePasswordAuthenticationFilter`
   - `UsernamePasswordAuthenticationFilter` 解析请求，并调用 `AuthenticationManager`
3. `AuthenticationManager`（接口，定义认证管理逻辑）
   - 由 `ProviderManager` 实现
   - `ProviderManager` 遍历 `List&amp;lt;AuthenticationProvider&amp;gt;`
4. `AuthenticationProvider`（接口，定义认证提供者）
   - `DaoAuthenticationProvider`（`AuthenticationProvider` 的实现）
   - `DaoAuthenticationProvider` 调用 `UserDetailsService.loadUserByUsername()`
5. `UserDetailsService`（接口，定义用户数据加载逻辑）
   - 由 `MyUserDetailsService` 实现
   - `MyUserDetailsService` 查询数据库，返回 `UserDetails`（包含用户名、密码、权限）
6. `DaoAuthenticationProvider` 使用 `PasswordEncoder` 验证密码
   - `PasswordEncoder.matches(rawPassword, encodedPassword)`
   - 由 `BCryptPasswordEncoder` 实现
7. 如果认证成功：
   - `DaoAuthenticationProvider` 返回 `UsernamePasswordAuthenticationToken`（已认证的 `Authentication` 对象）
   - `ProviderManager` 返回 `Authentication`，认证完成
   - `SecurityContextHolder` 存储 `Authentication`，用户成功登录
8. 认证通过后，Spring Security 允许访问受保护资源
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;43-自定义登录表单页面&#34;&gt;4.3. 自定义登录表单页面&lt;/h3&gt;
&lt;p&gt;上面我们提到, 我们不仅可以使用 Spring Security 自定义的表单页面, 还可以自己定义页面使用, 我们要做的就是在  &lt;code&gt;securityFilterChain()&lt;/code&gt; 方法中, 替换之前指定默认表单的语句:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; SecurityFilterChain &lt;span style=&#34;color:#a6e22e&#34;&gt;securityFilterChain&lt;/span&gt;(HttpSecurity http) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 修改这个语句&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    http.&lt;span style=&#34;color:#a6e22e&#34;&gt;authenticationProvider&lt;/span&gt;(daoAuthenticationProvider())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      .&lt;span style=&#34;color:#a6e22e&#34;&gt;formLogin&lt;/span&gt;(Customizer.&lt;span style=&#34;color:#a6e22e&#34;&gt;withDefaults&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; SecurityFilterChain &lt;span style=&#34;color:#a6e22e&#34;&gt;securityFilterChain&lt;/span&gt;(HttpSecurity http) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 配置 URL 访问权限&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    http.&lt;span style=&#34;color:#a6e22e&#34;&gt;authorizeHttpRequests&lt;/span&gt;(auth &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        auth.&lt;span style=&#34;color:#a6e22e&#34;&gt;requestMatchers&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/css/**&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/js/**&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;permitAll&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        auth.&lt;span style=&#34;color:#a6e22e&#34;&gt;anyRequest&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;authenticated&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 配置表单登录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    http.&lt;span style=&#34;color:#a6e22e&#34;&gt;formLogin&lt;/span&gt;(form &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        form.&lt;span style=&#34;color:#a6e22e&#34;&gt;loginPage&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        form.&lt;span style=&#34;color:#a6e22e&#34;&gt;loginProcessingUrl&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        form.&lt;span style=&#34;color:#a6e22e&#34;&gt;defaultSuccessUrl&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        form.&lt;span style=&#34;color:#a6e22e&#34;&gt;permitAll&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 配置登出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    http.&lt;span style=&#34;color:#a6e22e&#34;&gt;logout&lt;/span&gt;(logout &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        logout.&lt;span style=&#34;color:#a6e22e&#34;&gt;logoutUrl&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/logout&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        logout.&lt;span style=&#34;color:#a6e22e&#34;&gt;logoutSuccessUrl&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login?logout&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        logout.&lt;span style=&#34;color:#a6e22e&#34;&gt;permitAll&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; http.&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意这种配置容易引起无限重定向问题,&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;This page isn’t working
localhost redirected you too many times.
Try deleting your cookies.
ERR_TOO_MANY_REDIRECTS
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;大致原因是没有实现 &lt;code&gt;/login&lt;/code&gt; 路径的 GET 方法, 且没有设置为 所有用户都可以访问 &lt;code&gt;/login&lt;/code&gt;, 如果你的 &lt;code&gt;loginPage(&amp;quot;/login&amp;quot;)&lt;/code&gt; 其实返回的是某个 Thymeleaf 模板（或者前端页面），却没有对外暴露出可访问的 &lt;code&gt;GET /login&lt;/code&gt; 路由（或者在控制器中又重定向到别的地方），就会导致访问 &lt;code&gt;/login&lt;/code&gt; 时再次跳到另一个需要认证的路径，从而产生循环。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring Security 中, 很多种认证方式, JWT 或者 http.formLogin 或者 httpBasic(Customizer.withDefaults()); 且他们可以同时存在, 但一般不会这么做, &lt;a href=&#34;https://chatgpt.com/share/67aeb98d-7038-8002-afa9-c758167f6dea&#34;&gt;了解更多&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于纯 REST API 场景，使用无状态认证（JWT 或 OAuth2）是主流做法，后端无需维护 Session，更适合前后端分离和分布式微服务场景。如果业务中尚有一部分需要基于 Session 的传统登录或后台管理，可以针对不同路径（&lt;code&gt;/home&lt;/code&gt;, &lt;code&gt;/discuss&lt;/code&gt;, &lt;code&gt;/api/users&lt;/code&gt;, &lt;code&gt;/api/posts/[id]&lt;/code&gt;）进行多 &lt;code&gt;HttpSecurity&lt;/code&gt; 配置，把 JWT 和 FormLogin (Session) 并存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;45-configuration-和-bean&#34;&gt;4.5. &lt;code&gt;@Configuration&lt;/code&gt; 和 &lt;code&gt;@Bean&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;写配置代码的时候注意到, SecurityConfig 由 &lt;code&gt;@Configuration&lt;/code&gt; 修饰, 其他的方法都是由 &lt;code&gt;@Bean&lt;/code&gt; 修饰, 我们来研究一下.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Bean&lt;/code&gt; 注解是 Spring 框架中的一个注解，它用于在 Java 配置类（即标注了 &lt;code&gt;@Configuration&lt;/code&gt; 的类）中定义 Spring 容器管理的 Bean。&lt;strong&gt;将方法的返回值注册为 Spring 容器的 Bean&lt;/strong&gt;，类似于 &lt;code&gt;@Component&lt;/code&gt;、&lt;code&gt;@Service&lt;/code&gt;、&lt;code&gt;@Repository&lt;/code&gt; 等注解，但更灵活。如果某个类不是你自己写的，不能直接用 &lt;code&gt;@Component&lt;/code&gt; 进行注入，你可以使用 &lt;code&gt;@Bean&lt;/code&gt; 来将其实例手动注册到 Spring 容器中。&lt;/p&gt;
&lt;p&gt;比如 &lt;code&gt;UserDetailsService&lt;/code&gt; 和 &lt;code&gt;PasswordEncoder&lt;/code&gt; 都不是我们定义的, 而是 Spring Security 定义的接口, 而 &lt;code&gt;@Component&lt;/code&gt; &lt;code&gt;@Service&lt;/code&gt; 这种一般都是定义某个类的时候加上去的注解, 所以我们只能写个方法, 返回 &lt;code&gt;UserDetailsService&lt;/code&gt; 和 &lt;code&gt;PasswordEncoder&lt;/code&gt; 类型的对象, 然后把这个方法标注为 &lt;code&gt;@Bean&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;所以 &lt;code&gt;@Bean&lt;/code&gt; 只能在方法上, 那个方法应该返回一个对象, 且这个对像应该是非自己定义的类的实例,  而 &lt;code&gt;@Component&lt;/code&gt; 常常放在 自己定义的类上, 他们的意思都是说, 在启动程序的时候, Spring 会自动生成一个实例,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它们告诉 Spring 在程序启动时创建一个对象（Bean）并放入 Spring 容器，以便 &lt;code&gt;@Autowired&lt;/code&gt; 自动注入使用&lt;/li&gt;
&lt;li&gt;Spring 会自动管理这些对象，比如在需要时创建（实例化）、在应用关闭时销毁等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但这里需要修正： ❌ &amp;ldquo;&lt;code&gt;@Bean&lt;/code&gt; 只能用于非自己定义的类&amp;rdquo; ✅ &lt;code&gt;@Bean&lt;/code&gt; 也可以用于自己写的类，只是一般不这么做，因为 &lt;code&gt;@Component&lt;/code&gt; 更方便, 比如，&lt;code&gt;@Component&lt;/code&gt; 和 &lt;code&gt;@Bean&lt;/code&gt; 都可以用来创建 &lt;code&gt;MyService&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Component&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyService&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AppConfig&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; MyService &lt;span style=&#34;color:#a6e22e&#34;&gt;myService&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MyService();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两种方式都会让 &lt;code&gt;MyService&lt;/code&gt; 变成 Spring 管理的 Bean，但一般推荐用 &lt;code&gt;@Component&lt;/code&gt;，除非 &lt;code&gt;MyService&lt;/code&gt; 需要复杂的初始化逻辑。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>JDBC, JPA, ORM Hibernate</title>
      <link>https://blog.jiyi27.com/posts/java/backend/006-jpa-hibernate-jdbc/</link>
      <pubDate>Thu, 06 Feb 2025 23:15:20 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/java/backend/006-jpa-hibernate-jdbc/</guid>
      <description>&lt;h2 id=&#34;1-jdbc-vs-mysql-connector&#34;&gt;1. JDBC vs MySQL Connector&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;JDBC（Java Database Connectivity）是 Java 访问数据库的最底层标准规范和 API。它提供了连接数据库、执行 SQL、获取结果集等核心功能。&lt;/p&gt;
&lt;p&gt;后面提到的 MyBatis、Hibernate、Spring Data JPA 都是基于 JDBC 来执行底层 SQL 操作的。&lt;/p&gt;
&lt;p&gt;可以直接编写 SQL、使用 &lt;code&gt;PreparedStatement&lt;/code&gt; 等 API 来执行操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sometimes, I always mistake MySQL driver for JDBC, a little funny, lol. JDBC is part of JDK, which is java&amp;rsquo;s standard library, like code below&lt;code&gt;java.sql.*&lt;/code&gt; belongs to &lt;strong&gt;Java SE API&lt;/strong&gt;, which is also called JDBC API.&lt;/p&gt;
&lt;p&gt;We often add &lt;code&gt;com.mysql.cj.jdbc.Driver&lt;/code&gt; dependency to our maven project. Actually &lt;code&gt;com.mysql.cj.jdbc.Driver&lt;/code&gt; is MySQL Connector.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-jdbc-vs-mysql-connector&#34;&gt;1. JDBC vs MySQL Connector&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;JDBC（Java Database Connectivity）是 Java 访问数据库的最底层标准规范和 API。它提供了连接数据库、执行 SQL、获取结果集等核心功能。&lt;/p&gt;
&lt;p&gt;后面提到的 MyBatis、Hibernate、Spring Data JPA 都是基于 JDBC 来执行底层 SQL 操作的。&lt;/p&gt;
&lt;p&gt;可以直接编写 SQL、使用 &lt;code&gt;PreparedStatement&lt;/code&gt; 等 API 来执行操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sometimes, I always mistake MySQL driver for JDBC, a little funny, lol. JDBC is part of JDK, which is java&amp;rsquo;s standard library, like code below&lt;code&gt;java.sql.*&lt;/code&gt; belongs to &lt;strong&gt;Java SE API&lt;/strong&gt;, which is also called JDBC API.&lt;/p&gt;
&lt;p&gt;We often add &lt;code&gt;com.mysql.cj.jdbc.Driver&lt;/code&gt; dependency to our maven project. Actually &lt;code&gt;com.mysql.cj.jdbc.Driver&lt;/code&gt; is MySQL Connector.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; database;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// java.sql.* 属于 Java SE API, 这就是 JDBC API&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.sql.Connection;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.sql.DriverManager;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.sql.SQLException;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MysqlDatabase&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Connection &lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; SQLException {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// You must load jdbc driver, otherwise you will get null for connection.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Class.&lt;span style=&#34;color:#a6e22e&#34;&gt;forName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.mysql.cj.jdbc.Driver&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; DriverManager.&lt;span style=&#34;color:#a6e22e&#34;&gt;getConnection&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2025/02/79dc888c7c722f47ead990dff67223ee.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;As shown above &lt;code&gt;java.sql.SQLException&lt;/code&gt; and &lt;code&gt;java.sql.Connection&lt;/code&gt; are all belong to &lt;code&gt;java.sql.*&lt;/code&gt; which is part of java se api, namely, JDBC. So we don&amp;rsquo;t commucate with MySQL database with MySQL Connector directly, actually, we conmmucate with MySQL(retrive &amp;amp; insert data) by &amp;ldquo;talking&amp;rdquo; to JDBC API, then JDBC API commucate with MySQL Connector, and MySQL Connector commucate with MySQL database.&lt;/p&gt;
&lt;h2 id=&#34;2-jpa-jakarta-persistence-api&#34;&gt;2. JPA (Jakarta Persistence API)&lt;/h2&gt;
&lt;p&gt;JPA 只是一个规范, 它定义了一套接口和注解体系，比如 &lt;code&gt;@Entity&lt;/code&gt;, &lt;code&gt;@Table&lt;/code&gt;, &lt;code&gt;@Id&lt;/code&gt;, &lt;code&gt;@Column&lt;/code&gt; 等。&lt;/p&gt;
&lt;p&gt;JPA 的实现：要想让 JPA 的接口和注解真的“跑起来”，就需要有一个具体的实现类库（provider）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hibernate 是 JPA 的一个实现。它负责解析 JPA 的注解，并执行具体的 ORM（对象关系映射）逻辑，比如生成 SQL 语句，管理数据库操作等。&lt;strong&gt;JPA 只是定义规则，而 Hibernate 负责执行。&lt;/strong&gt; 如果没有 JPA 的实现，&lt;code&gt;@Entity&lt;/code&gt; 等注解就没有意义&lt;/li&gt;
&lt;li&gt;OpenJPA（Apache 的实现）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Spring Data JPA&lt;/strong&gt; 是 &lt;strong&gt;基于 JPA 规范&lt;/strong&gt; 的一个 Spring 生态组件，它简化了 JPA 的使用，比如提供了 &lt;code&gt;JpaRepository&lt;/code&gt; 让你不用手写 SQL 查询。Spring Data JPA 仍然需要 JPA Provider（比如 Hibernate） 来执行实际的数据库操作。Spring Data JPA 本身不是 ORM 框架，它只是对 JPA 进行了封装，使得 JPA 的使用更方便。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MyBatis 是一款半 ORM / 数据映射（Data Mapper）框架，与传统的 JDBC 相比更灵活且简化了数据访问的过程，但不像 Hibernate 那样做全量的实体与表的自动映射&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MyBatis 不是 JPA 实现&lt;/strong&gt;，而是另一种独立的 ORM 方案，不能用来替代 Hibernate，但可以在项目中和 JPA 共同使用（比如复杂查询用 MyBatis，简单增删改查用 JPA）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-spring-data-jpa--jpa--hibernate-各司其职&#34;&gt;3. Spring Data JPA + JPA + Hibernate 各司其职&lt;/h2&gt;
&lt;h3 id=&#34;31-jpamodel-层&#34;&gt;3.1. JPA（Model 层）&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; jakarta.persistence.*;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Entity&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Table&lt;/span&gt;(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@GeneratedValue&lt;/span&gt;(strategy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GenerationType.&lt;span style=&#34;color:#a6e22e&#34;&gt;IDENTITY&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Long id;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// nullable = false 在 Java 层面防止错误数据进入数据库，即使数据库层面有 NOT NULL 约束&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Column&lt;/span&gt;(nullable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;, unique &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 50)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String username;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Entity&lt;/code&gt;：标明该类是 JPA 实体&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Table(name = &amp;quot;users&amp;quot;)&lt;/code&gt;：指定数据库表名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Id&lt;/code&gt;、&lt;code&gt;@GeneratedValue&lt;/code&gt;：定义主键及其生成策略&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Column&lt;/code&gt;：指定字段约束&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里 &lt;code&gt;@Entity&lt;/code&gt; 和 &lt;code&gt;@Table&lt;/code&gt; 等是 JPA 规范的一部分，它们只是 &lt;strong&gt;告诉 JPA Provider（比如 Hibernate）&lt;/strong&gt;，这个类需要映射到数据库表。但真正解析这些注解并生成 SQL 语句的是 Hibernate。你写的是 JPA 代码，但实际 SQL 是 Hibernate 生成的, &lt;strong&gt;JPA 只定义规则，Hibernate 负责执行&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;32-spring-data-jparepository-层&#34;&gt;3.2. Spring Data JPA（Repository 层）&lt;/h3&gt;
&lt;p&gt;Spring Data JPA 让我们可以不写 SQL 也能操作数据库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.data.jpa.repository.JpaRepository;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.data.jpa.repository.Query;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.data.repository.query.Param;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.stereotype.Repository;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Repository&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PostRepository&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; JpaRepository&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Post, Long&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 查找用户的所有帖子&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Query&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT p FROM Post p WHERE p.userId = :userId AND p.status = 1&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Page&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Post&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findByUserId&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;@Param&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;userId&amp;#34;&lt;/span&gt;) Long userId, Pageable pageable);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 查找所有正常状态的帖子（分页）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Query&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT p FROM Post p WHERE p.status = 1&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Page&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Post&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findAllActivePosts&lt;/span&gt;(Pageable pageable);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;@Query&lt;/code&gt;、&lt;code&gt;@Param&lt;/code&gt;、&lt;code&gt;JpaRepository&lt;/code&gt;、&lt;code&gt;Pageable&lt;/code&gt; 等注解和接口都是 Spring Data JPA 提供的，而不是 标准 JPA（Jakarta Persistence API） 或 Hibernate 本身的一部分&lt;/p&gt;
&lt;p&gt;这些方法 &lt;strong&gt;不需要手动实现&lt;/strong&gt;，&lt;strong&gt;Spring Data JPA&lt;/strong&gt; 会&lt;strong&gt;自动&lt;/strong&gt;生成对应的 SQL 语句并执行，你只需要声明方法即可直接调用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;@Query&lt;/code&gt; 可以优化掉，让 Spring Data JPA 自动生成 SQL 语句, Spring Data JPA 会 &lt;strong&gt;自动解析方法名&lt;/strong&gt; 生成 SQL 查询, 上面代码可以改成:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Repository&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PostRepository&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; JpaRepository&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Post, Long&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 查找用户的所有正常状态帖子&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Page&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Post&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findByUserIdAndStatus&lt;/span&gt;(Long userId, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; status, Pageable pageable);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 查找所有正常状态的帖子&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Page&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Post&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findByStatus&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; status, Pageable pageable);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果查询逻辑 复杂，Spring Data JPA 无法自动推断，就需要 &lt;code&gt;@Query&lt;/code&gt;，比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Query&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT p FROM Post p WHERE p.userId = :userId AND p.status = 1 ORDER BY p.createdAt DESC&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Post&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findRecentPostsByUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;@Param&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;userId&amp;#34;&lt;/span&gt;) Long userId);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;33-hibernate持久化层&#34;&gt;3.3. &lt;strong&gt;Hibernate（持久化层）&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Hibernate 作为 JPA Provider，在后台实际执行 SQL 语句, 当我们调用 &lt;code&gt;userRepository.findByEmail(&amp;quot;test@example.com&amp;quot;)&lt;/code&gt; 时，Hibernate 会生成 SQL 查询：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SELECT &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; FROM users WHERE email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;test&lt;span style=&#34;color:#a6e22e&#34;&gt;@example.com&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; LIMIT 1;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4-spring-data-jpa--jpa--hibernate&#34;&gt;4. Spring Data JPA + JPA + Hibernate&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.data.jpa.repository.JpaRepository;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.Optional;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserRepository&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; JpaRepository&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;User, Long&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Optional&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;User&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findByEmail&lt;/span&gt;(String email);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里 &lt;code&gt;findByEmail(String email)&lt;/code&gt; 方法没有实现，为什么它还能执行数据库查询呢？这是 &lt;strong&gt;Spring Data JPA + JPA + Hibernate&lt;/strong&gt; 三者协作的结果, 当你调用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Optional&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;User&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; userRepository.&lt;span style=&#34;color:#a6e22e&#34;&gt;findByEmail&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test@example.com&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Spring Data JPA、JPA（EntityManager）和 Hibernate 会分别执行自己的工作：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1️⃣ Spring Data JPA（提供 Repository 代理）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spring Data JPA 看到 &lt;code&gt;UserRepository&lt;/code&gt; 继承了 &lt;code&gt;JpaRepository&lt;/code&gt;，就会：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动生成 &lt;code&gt;findByEmail&lt;/code&gt; 方法的实现&lt;/li&gt;
&lt;li&gt;调用 JPA 的 &lt;code&gt;EntityManager&lt;/code&gt; API 进行查询&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;📌 这里的关键点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你没有手写 SQL，但 Spring Data JPA 根据方法名 解析出查询意图&lt;/li&gt;
&lt;li&gt;它会调用 JPA（EntityManager） 来执行查询&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2️⃣ JPA（EntityManager 提供查询 API）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spring Data JPA 内部会使用 JPA 的 &lt;code&gt;EntityManager&lt;/code&gt; 执行查询：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;entityManager.&lt;span style=&#34;color:#a6e22e&#34;&gt;createQuery&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT u FROM User u WHERE u.email = :email&amp;#34;&lt;/span&gt;, User.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;📌 JPA（EntityManager）在这里的角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供 API 让 Spring Data JPA 调用（比如 &lt;code&gt;createQuery()&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;不会解析和执行 SQL，它只是 JPA 标准的实现者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3️⃣ Hibernate（JPA Provider 解析 &amp;amp; 执行 SQL）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hibernate 作为 JPA Provider，接手 &lt;code&gt;EntityManager&lt;/code&gt; 提供的查询请求，并执行 SQL：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;解析 JPQL：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; u &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt; u &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; u.email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; :email
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;转换成原生 SQL（针对 MySQL、PostgreSQL 等数据库生成 SQL）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; users &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test@example.com&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行 SQL，从数据库查询结果，并返回 &lt;code&gt;User&lt;/code&gt; 实例。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;📌 Hibernate 负责的部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解析 JPA 的查询语法（JPQL）&lt;/li&gt;
&lt;li&gt;生成 SQL 并执行&lt;/li&gt;
&lt;li&gt;把数据库查询结果转换成 Java 对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;完整流程总结&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;步骤&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;执行者&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Spring Data JPA&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;解析 &lt;code&gt;findByEmail&lt;/code&gt; 方法，调用 &lt;code&gt;EntityManager&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;JPA（EntityManager）&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;负责 API 调用，准备 JPQL 查询&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Hibernate&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;解析 JPQL，转换为 SQL，并执行查询&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;数据库&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;运行 SQL，返回数据&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Hibernate&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;解析 SQL 结果，转换成 &lt;code&gt;User&lt;/code&gt; 对象&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Spring Data JPA&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;返回 &lt;code&gt;User&lt;/code&gt; 对象给调用者&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Data JPA 让你不用手写 SQL，直接调用 &lt;code&gt;JpaRepository&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;JPA（EntityManager） 只是提供 API，不会执行 SQL&lt;/li&gt;
&lt;li&gt;Hibernate 作为 JPA Provider，负责执行 SQL，并转换结果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;💡 &lt;strong&gt;最终的 SQL 查询是 Hibernate 负责执行的&lt;/strong&gt;，Spring Data JPA 和 JPA 只是提供 API 和接口，真正的数据库操作全靠 Hibernate。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Spring Boot 之何为内嵌 Tomcat</title>
      <link>https://blog.jiyi27.com/posts/java/backend/003-spring-embedded-tomcat/</link>
      <pubDate>Fri, 28 Apr 2023 15:02:55 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/java/backend/003-spring-embedded-tomcat/</guid>
      <description>&lt;p&gt;一直听说Spring Boot内嵌了Tomcat, 然后Spring Boot默认把应用打包为Jar, 这到底意味着什么呢, 为啥不直接用War包部署到外部服务器呢(外部的Tomcat)?  不了解War可以看看我的其它&lt;a href=&#34;https://davidzhu.xyz/2023/04/27/Java/Backend/War/&#34;&gt;War相关的文章&lt;/a&gt;或者站内搜War等关键字. 在StackOverflow上看到一个&lt;a href=&#34;https://stackoverflow.com/a/23176765/16317008&#34;&gt;关于什么是内嵌Tomcat回答&lt;/a&gt;, 看看咋说的&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Embedded&amp;rdquo; means that you program &lt;strong&gt;ships with&lt;/strong&gt; the server within it as opposed to a web application being deployed to external server. With embedded server your application is packaged with the server of choice and responsible for server start-up and management.&lt;/p&gt;
&lt;p&gt;From the user standpoint the difference is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Application with embedded server looks like a regular java program. You just launch it and that&amp;rsquo;s it.&lt;/li&gt;
&lt;li&gt;Regular web application is usually a &lt;code&gt;war&lt;/code&gt; archive which needs to be deployed to some server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Embedding a server is very useful for testing purposes where you can start or stop server at will during the test.&lt;/p&gt;</description>
      <content>&lt;p&gt;一直听说Spring Boot内嵌了Tomcat, 然后Spring Boot默认把应用打包为Jar, 这到底意味着什么呢, 为啥不直接用War包部署到外部服务器呢(外部的Tomcat)?  不了解War可以看看我的其它&lt;a href=&#34;https://davidzhu.xyz/2023/04/27/Java/Backend/War/&#34;&gt;War相关的文章&lt;/a&gt;或者站内搜War等关键字. 在StackOverflow上看到一个&lt;a href=&#34;https://stackoverflow.com/a/23176765/16317008&#34;&gt;关于什么是内嵌Tomcat回答&lt;/a&gt;, 看看咋说的&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Embedded&amp;rdquo; means that you program &lt;strong&gt;ships with&lt;/strong&gt; the server within it as opposed to a web application being deployed to external server. With embedded server your application is packaged with the server of choice and responsible for server start-up and management.&lt;/p&gt;
&lt;p&gt;From the user standpoint the difference is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Application with embedded server looks like a regular java program. You just launch it and that&amp;rsquo;s it.&lt;/li&gt;
&lt;li&gt;Regular web application is usually a &lt;code&gt;war&lt;/code&gt; archive which needs to be deployed to some server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Embedding a server is very useful for testing purposes where you can start or stop server at will during the test.&lt;/p&gt;
&lt;p&gt;现在貌似懂点了, 就是Tomcat被被集成到了我们的项目里呗(Tomcat本质也就是个实现了Servlet和JSP标准的程序), 那我们去看看我们打包好的Spring Boot项目(一个Jar文件)里是不是有Tomcat,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pwd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Downloads/SpringDemo-0.0.1-SNAPSHOT/BOOT-INF/lib/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls | grep tomcat
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tomcat-embed-core-10.1.7.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tomcat-embed-el-10.1.7.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tomcat-embed-websocket-10.1.7.jar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好家伙, 果然在里面,&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;然后又看到一篇文章, 说的很清晰, 这里粘贴部分, 分享一下,&lt;/p&gt;
&lt;p&gt;Think about what you would need to be able to deploy your application (typically) on a virtual machine.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step 1 : Install Java&lt;/li&gt;
&lt;li&gt;Step 2 : Install the Web/Application Server (Tomcat/Websphere/Weblogic etc)&lt;/li&gt;
&lt;li&gt;Step 3 : Deploy the application war&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What if we want to simplify this?&lt;/p&gt;
&lt;p&gt;How about making the server a part of the application?&lt;/p&gt;
&lt;p&gt;You would just need a virtual machine with Java installed and you would be able to directly deploy the application on the virtual machine. Isn’t it cool?&lt;/p&gt;
&lt;p&gt;This idea is the genesis for Embedded Servers. When we create an application deployable, we would embed the server (for example, tomcat) inside the deployable.&lt;/p&gt;
&lt;p&gt;For example, for a Spring Boot Application, you can generate an application jar which contains Embedded Tomcat. &lt;strong&gt;You can run a web application as a normal Java application&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;Embedded server implies that our deployable unit contains the binaries for the server (example, tomcat.jar). 这也就是我们上面看到的那几个文件&lt;code&gt;tomcat-embed-core-10.1.7.jar&lt;/code&gt;等, 了解更多&lt;a href=&#34;https://www.springboottutorial.com/spring-boot-with-embedded-servers-tomcat-jetty&#34;&gt;Spring Boot and Embedded Servers - Tomcat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;打开项目&lt;code&gt;pom.xml&lt;/code&gt;可以看到依赖里并没tomcat相关的东西, 但是我们项目里却有tomcat那几个jar包, 这是为啥哩, 其实是因为下面的&lt;code&gt;spring-boot-starter-web&lt;/code&gt;依赖tomcat, 自动为我们添加类似&lt;code&gt;spring-boot-starter-tomcat&lt;/code&gt;这种了,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看一下别人怎么说,&lt;/p&gt;
&lt;p&gt;The single spring-boot-starter-web dependency can pull in all dependencies related to web development. It also reduces the count of build dependency. The spring-boot-starter-web mainly depends on the following:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- org.springframework.boot:spring-boot-starter
- org.springframework.boot:spring-boot-starter-tomcat
- org.springframework.boot:spring-boot-starter-validation
- com.fasterxml.jackson.core:jackson-databind
- org.springframework:spring-web
- org.springframework:spring-webmvc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By default, the &lt;code&gt;spring-boot-starter-web&lt;/code&gt; contains the below tomcat server dependency given:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-tomcat&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.0.0.RELEASE&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;compile&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;spring-boot-starter-web&lt;/code&gt; auto-configures the below things required for the web development:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dispatcher Servlet&lt;/li&gt;
&lt;li&gt;Error Page&lt;/li&gt;
&lt;li&gt;Embedded servlet container&lt;/li&gt;
&lt;li&gt;Web JARs for managing the static dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/difference-between-spring-boot-starter-web-and-spring-boot-starter-tomcat/&#34;&gt;Difference Between Spring Boot Starter Web and Spring Boot Starter Tomcat - GeeksforGeeks&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;说了那么多, 既然是生成的项目jar包内嵌服务器, 也就是说我们只要安装了Java(比如Java8以上), 那我们就可以运行我们的Spring Boot项目了, 不用额外安装Tomcat了,&lt;/p&gt;
&lt;p&gt;首先得先打包我们的项目吧, 在Spring Boot根目录运行&lt;code&gt;mvn clean install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后报错 (不出一点岔子就不正常了, 写代码嘛),&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.3.5.RELEASE:repackage (repackage) on project SpringDemo: Execution repackage of goal org.springframework.boot:spring-boot-maven-plugin:2.3.5.RELEASE:repackage failed: Unsupported class file major version 61 -&amp;gt; [Help 1]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后仔细看了一下发现上面说&lt;code&gt;org.springframework.boot:spring-boot-maven-plugin:2.3.5.RELEASE:repackage failed&lt;/code&gt;, 好熟悉, 好像是之前刚开始初始化Spring Boot项目的时候IDEA提示&lt;code&gt;pom.xml&lt;/code&gt;有错误(出现曲线下划线那种错, 不是运行报错), 出去强迫症想解决它,然后在StackOverflow在哪查到添加上版本信息就不会提示错误了, 于是我加了一行&lt;code&gt;&amp;lt;version&amp;gt;2.3.5.RELEASE&amp;lt;/version&amp;gt;&lt;/code&gt;,  如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.3.5.RELEASE&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;加了版本信息后确实那个红色曲线消失, 也没影响我程序的正常运行(即在IDEA点击运行按钮那个斜三角按钮), 但是使用命令行&lt;code&gt;mvn clean install&lt;/code&gt;就出现了刚刚的错误, 所以我把版本信息去掉了然后更新&lt;code&gt;pom.xml&lt;/code&gt;, 然后&lt;code&gt;mvn clean install&lt;/code&gt;正常运行,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.....
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[INFO] Installing /Users/David/Codes/IDEA/SpringDemo/target/SpringDemo-0.0.1-SNAPSHOT.jar to /Users/David/.m2/repository/com/choo/SpringDemo/0.0.1-SNAPSHOT/SpringDemo-0.0.1-SNAPSHOT.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[INFO] ------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[INFO] BUILD SUCCESS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[INFO] ------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[INFO] Total time:  4.091 s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[INFO] Finished at: 2023-04-29T16:22:17-03:00
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[INFO] ------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意上面jar包输出路径, 然后进入到生成的jar包的路径里, 运行jar包(运行之前确保你的数据库服务已经正确开启, 可以正常连接, 如你使用了MySQL服务),&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java -jar SpringDemo-0.0.1-SNAPSHOT.jar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;取决于你项目的REST API怎么设计的, 然后去浏览器访问&lt;code&gt;http://localhost:8080/find/temperature?from=2023-04-01&amp;amp;to=2023-04-02&lt;/code&gt;, 得到如下数据, 访问成功:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;27.5&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;createdDate&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2023-04-01T14:54:26&amp;#34;&lt;/span&gt;},{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28.5&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;createdDate&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2023-04-01T20:42:50&amp;#34;&lt;/span&gt;},{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20.6&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;createdDate&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2023-04-02T11:09:26&amp;#34;&lt;/span&gt;},{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30.6&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;createdDate&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2023-04-02T15:32:39&amp;#34;&lt;/span&gt;}]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你也可以使用&lt;code&gt;wget&lt;/code&gt;发送&lt;code&gt;GET&lt;/code&gt;请求,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget &amp;#34;http://localhost:8080/find/temperature?from=2023-04-01&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;amp;&lt;/span&gt;to=2023-04-02&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;总结下, 这次讨论我们理解了Jar是什么, 也知道了什么是所谓的内嵌Tomcat, 可以看到运行Jar包并不是像&lt;a href=&#34;https://davidzhu.xyz/2023/04/27/Java/Backend/War/&#34;&gt;之前讨论War&lt;/a&gt;那样, 还得把War部署到Tomcat的&lt;code&gt;webapps&lt;/code&gt;目录下, 然后启动Tomcat, 再去访问对应url, 我们直接一个&lt;code&gt;java -jar&lt;/code&gt;便可以运行我们的Java Web项目, 可谓是很方便, 但是需要注意如果你的应用用到了数据库, 那你仍需要在你执行该应用的机器上开启对应的数据库服务以及创建对应的表, 这跟tomcat没关系, SpringBoot只是内嵌了Tomcat并不是内嵌了你的数据库啥的,&lt;/p&gt;
&lt;p&gt;然后我们也就知道别人所说的那种, Spring Boot内嵌Tomcat, 然后默认项目打包成Jar而不是War到底是个什么玩意, 即就是把所有依赖和所有我们编写的源代码的字节码&lt;code&gt;.class&lt;/code&gt;文件通过约定好的目录结构放到一起, 然后打包成一个jar, 上面说到的依赖比如&lt;code&gt;pom.xml&lt;/code&gt;中的各种依赖以jar文件格式放到&lt;code&gt;SpringDemo-0.0.1-SNAPSHOT/BOOT-INF/lib&lt;/code&gt;目录下, 然后&lt;code&gt;.class&lt;/code&gt;文件都在&lt;code&gt;SpringDemo-0.0.1-SNAPSHOT/BOOT-INF/classes&lt;/code&gt;下, 当然可能还包含其他的文件, 这你自己去探索吧,&lt;/p&gt;
&lt;p&gt;最后看一下项目生成的Jar的结构(依赖太多了, 删除了一部分):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;├──&lt;/span&gt; BOOT&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;INF
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;├──&lt;/span&gt; classes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;├──&lt;/span&gt; application.&lt;span style=&#34;color:#a6e22e&#34;&gt;properties&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;├──&lt;/span&gt; com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;└──&lt;/span&gt; choo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;       &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;└──&lt;/span&gt; springdemo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;           &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;├──&lt;/span&gt; SpringDemoApplication.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;           &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;├──&lt;/span&gt; Temperature.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;           &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;└──&lt;/span&gt; TemperatureRepository.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;└──&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;       &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;└──&lt;/span&gt; index.&lt;span style=&#34;color:#a6e22e&#34;&gt;html&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;├──&lt;/span&gt; classpath.&lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;├──&lt;/span&gt; layers.&lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;└──&lt;/span&gt; lib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;       &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;├──&lt;/span&gt; HikariCP&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;5.&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;jar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;       &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;├──&lt;/span&gt; angus&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;activation&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;2.&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;jar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;       &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;├──&lt;/span&gt; antlr4&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;runtime&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;4.&lt;span style=&#34;color:#a6e22e&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;jar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;       &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;├──&lt;/span&gt; spring&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;jcl&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;6.&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;7&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;jar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;       &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;├──&lt;/span&gt; spring&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;jdbc&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;6.&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;7&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;jar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;       &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;├──&lt;/span&gt; spring&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;orm&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;6.&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;7&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;jar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;       &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;├──&lt;/span&gt; spring&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tx&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;6.&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;7&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;jar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;       &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;├──&lt;/span&gt; spring&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;web&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;6.&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;7&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;jar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;       &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;├──&lt;/span&gt; spring&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;webmvc&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;6.&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;7&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;jar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;       &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;├──&lt;/span&gt; tomcat&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;embed&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;core&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;10.&lt;span style=&#34;color:#a6e22e&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;7&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;jar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;       &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;├──&lt;/span&gt; tomcat&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;embed&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;el&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;10.&lt;span style=&#34;color:#a6e22e&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;7&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;jar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;│&lt;/span&gt;       &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;├──&lt;/span&gt; tomcat&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;embed&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;websocket&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;10.&lt;span style=&#34;color:#a6e22e&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;7&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;jar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其实有时候对于一些概念区别, 读很多文章博客不如去自己实操一遍, 读多了可能觉得自己会了理解了, 但还是会云里雾里, 因为有的说的很泛, 总之别嫌麻烦, 多动手,&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>手动部署 War 包到 Tomcat 之何为 War</title>
      <link>https://blog.jiyi27.com/posts/java/backend/001-war/</link>
      <pubDate>Thu, 27 Apr 2023 21:30:48 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/java/backend/001-war/</guid>
      <description>&lt;p&gt;Web application resources or web application archives are commonly called WAR files. A WAR file is used to deploy a Java EE web application in an application server. Inside a WAR file, all the web components are packed into one single unit. These include JAR files, JavaServer Pages, Java servlets, Java class files, XML files, HTML files, and other resource files that we need for web applications. We can use the Maven WAR plugin to build our project as a &lt;a href=&#34;https://www.baeldung.com/java-jar-war-packaging#war&#34;&gt;WAR&lt;/a&gt; file.&lt;/p&gt;</description>
      <content>&lt;p&gt;Web application resources or web application archives are commonly called WAR files. A WAR file is used to deploy a Java EE web application in an application server. Inside a WAR file, all the web components are packed into one single unit. These include JAR files, JavaServer Pages, Java servlets, Java class files, XML files, HTML files, and other resource files that we need for web applications. We can use the Maven WAR plugin to build our project as a &lt;a href=&#34;https://www.baeldung.com/java-jar-war-packaging#war&#34;&gt;WAR&lt;/a&gt; file.&lt;/p&gt;
&lt;h2 id=&#34;1-add-a-new-user-with-deployment-rights-to-tomcat&#34;&gt;1. Add a new user with deployment rights to Tomcat&lt;/h2&gt;
&lt;p&gt;To perform a Maven Tomcat deploy of a &lt;code&gt;WAR&lt;/code&gt; file you must first set up a &lt;strong&gt;user&lt;/strong&gt; in Tomcat with the appropriate rights. You can do this with an edit of the &lt;code&gt;tomcat-users.xml&lt;/code&gt; file, which can be found in Tomcat&amp;rsquo;s &lt;code&gt;conf&lt;/code&gt; sub-directory. Add the following entry &lt;strong&gt;inside&lt;/strong&gt; the &lt;code&gt;tomcat-users&lt;/code&gt; tag:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;user&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;username=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;war-deployer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;password=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;maven-tomcat-plugin&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;roles=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;manager-gui, manager-script, manager-jmx&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Save the tomcat-users.xml file and restart the server to have the changes take effect.&lt;/p&gt;
&lt;p&gt;重启Tomcat就是进到Tomcat的&lt;code&gt;bin&lt;/code&gt;目录下, 执行&lt;code&gt;startup.sh&lt;/code&gt;, &lt;code&gt;./shutdown.sh&lt;/code&gt;, 其实你直接使用&lt;code&gt;startup.sh&lt;/code&gt;命令开启Tomcat服务就会加载配置文件了, 上面说的重启是默认你的Tomcat一直处于运行状态. 现在你也应该启动Tomcat服务了, 启动后尝试访问&lt;code&gt;http://localhost:8080/&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/war/d.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击后输入上面的&lt;code&gt;username&lt;/code&gt;和对应的&lt;code&gt;password&lt;/code&gt;, 即可进入管理页面如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/war/e.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无法访问 tomcat 主页问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我在访问Tomcat主页出现了问题, 访问的总是我以前的JSP应用, 我用IDEA开发的, 但我都没打开IDEA, 仍然可以访问到, 如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/war/a.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后我就&lt;a href=&#34;https://www.cnblogs.com/yayazi/p/7920257.html&#34;&gt;查到了一个博客&lt;/a&gt;说需要将Tomcat的首页的工程部署到Tomcat服务器上，我们通过IDEA来操作, 部署步骤如下：&lt;/p&gt;
&lt;p&gt;选择菜单栏“Run&amp;ndash;&amp;gt;Edit Configuration&amp;hellip;&amp;ndash;&amp;gt;Deployment”, 选择右上角绿色“+”，选择“External Source&amp;hellip;”，将Apache-tomcat的&lt;code&gt;webapps&lt;/code&gt;目录下的ROOT文件夹添加进来, 下面的Application Context 空着, 删除 &lt;code&gt;ROOT&lt;/code&gt; 下面的那个&lt;code&gt;ServletDemo:war exploded&lt;/code&gt;, 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/war/b.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后我IDEA上选择的Tomcat服务器不是我现在用的, 我有个旧的Tomcat服务器, 我不知道, 然后IDEA用的一直是那个旧的(但我在上面部署位置的&lt;code&gt;ROOT&lt;/code&gt;文件夹选择的是新的Tomcat下的文件), 所以就导致就算部署项目后, 我依然无法访问Tomcat的主页. 所以检查一下你是否选择了正确的Tomcat服务器,&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/war/c.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这样配置好后再在IDEA点击运行, 就可以通过&lt;code&gt;http://localhost:8080/&lt;/code&gt;访问 Tomcat 主页了, 之后你关闭IDEA, 直接进入Tomcat根目录的&lt;code&gt;bin&lt;/code&gt;下通过执行&lt;code&gt;startup.sh&lt;/code&gt;来启动Tomcat.&lt;/p&gt;
&lt;p&gt;有时候你会遇到其他情况, 比如8080端口被占用, 这时候解决办法也很简单&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 查看PID&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lsof -n -i4TCP:8080 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 删除8080端口对应的PID&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kill -9 PID
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;说了那么多终于要进行下一步了,&lt;/p&gt;
&lt;h2 id=&#34;2-tell-maven-about-the-tomcat-deploy-user&#34;&gt;2. Tell Maven about the Tomcat deploy user&lt;/h2&gt;
&lt;p&gt;After you add the &lt;code&gt;war-deployer&lt;/code&gt; user to Tomcat, register that &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; in Maven, along with a named reference to the server. The Maven-Tomcat plugin will use this information when it tries to &lt;a href=&#34;https://www.theserverside.com/feature/Is-Apache-Tomcat-the-right-Java-application-server-for-you&#34;&gt;connect to the application server&lt;/a&gt;. Edit the &lt;code&gt;settings.xml&lt;/code&gt; file and add the following entry &lt;strong&gt;within&lt;/strong&gt; the &lt;code&gt;&amp;lt;server&amp;gt;&lt;/code&gt; tag to create the named reference to the server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- Configure the Tomcat Maven plugin user --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;server&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;maven-tomcat-war-deployment-server&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;username&amp;gt;&lt;/span&gt;war-deployer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/username&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;password&amp;gt;&lt;/span&gt;maven-tomcat-plugin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/password&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/server&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注意, 上面提到的&lt;code&gt;settings.xml&lt;/code&gt;文件在&lt;code&gt;Downloads/apache-maven-3.9.1/conf&lt;/code&gt;下, 根据你的maven安装目录查找,&lt;/p&gt;
&lt;p&gt;另外这里加的账号密码就是上面在Tomcat添加用户时候的账号密码, 这是因为你进入Tomcat管理页面的时候需要,如果你不提供(下面配置&lt;code&gt;pom.xml&lt;/code&gt;也会说到), 那生成war文件的时候maven就会报错,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-register-the-tomcat7-maven-plugin-in-the-pom&#34;&gt;3. Register the tomcat7-maven-plugin in the POM&lt;/h2&gt;
&lt;p&gt;把打包格式改成&lt;code&gt;war&lt;/code&gt;, 即在&lt;code&gt;pom.xml&lt;/code&gt;中找到&lt;code&gt;&amp;lt;packaging&amp;gt;&lt;/code&gt;标签, 没有的话添加一个, 与&lt;code&gt;&amp;lt;dependencies&amp;gt;&lt;/code&gt;标签并列:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.example&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;ServletDemo&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;ServletDemo&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;war&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that Maven and Tomcat are configured, the next step is to edit the Java web application&amp;rsquo;s POM file to reference the Tomcat Maven plugin.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.tomcat.maven&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;tomcat7-maven-plugin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://localhost:8080/manager/text&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;path&amp;gt;&lt;/span&gt;/rps&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行&lt;code&gt;mvn install tomcat7:deploy&lt;/code&gt;生成war的时候总是报错(如果你之前已经生成了War文件, 请记得去Tomcat根目录下的&lt;code&gt;webapp&lt;/code&gt;目录下删除一生成的war文件, 否则也会报错, 和下面一样):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ERROR&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin:2.0:deploy &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;default-cli&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; on project ServletDemo: Cannot invoke Tomcat manager: Broken pipe -&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Help 1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ERROR&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ERROR&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; To see the full stack trace of the errors, re-run Maven with the -e switch.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ERROR&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Re-run Maven using the -X switch to enable full debug logging.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ERROR&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ERROR&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; For more information about the errors and possible solutions, please read the following articles:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ERROR&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Help 1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;加入我们在Tomcat Users里配置的账号密码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.tomcat.maven&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;tomcat7-maven-plugin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://localhost:8080/manager/text&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;path&amp;gt;&lt;/span&gt;/rps&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;username&amp;gt;&lt;/span&gt;war-deployer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/username&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;password&amp;gt;&lt;/span&gt;maven-tomcat-plugin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/password&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注意: 修改&lt;code&gt;pom.xml&lt;/code&gt;后需要更新&lt;code&gt;pom.xml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;提示: 点击IDEA软件的右上角有个浮动的更新小按钮即更新, 或者你可以查查命令行maven怎么更新&lt;code&gt;pom.xml&lt;/code&gt;文件.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后重新运行&lt;code&gt;mvn install tomcat7:deploy&lt;/code&gt;, 成功:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/war/f.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后去Tomcat根目录的&lt;code&gt;webapps&lt;/code&gt;下查看生成的War, 可以看到生成了名为&lt;code&gt;rps&lt;/code&gt;的web应用, 即这个名字取决于上面&lt;code&gt;pom.xml&lt;/code&gt;填的内容,&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/war/g.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后我们对比一下生成的war与我们的源代码文件结构:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#源代码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── pom.xml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       ├── java
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       │   ├── database
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       │   └── servlet
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       ├── resources
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       │   └── log4j.properties
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       └── webapp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│           ├── WEB-INF
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│           ├── hello.jsp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│           └── index.jsp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# War&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── META-INF
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── MANIFEST.MF
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── maven
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   └── com.example
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │       └── ServletDemo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── war-tracker
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── WEB-INF
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── classes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   ├── database
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├── Controller.class
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├── DataEntity.class
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├── Database.class
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   └── MysqlDatabase.class
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   ├── log4j.properties
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   ├── servlet
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├── GetDataServlet$1.class
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   └── GetDataServlet.class
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   └── test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── lib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   ├── gson-2.9.0.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   ├── log4j-1.2.17.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   ├── mysql-connector-j-8.0.32.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   └── protobuf-java-3.21.9.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── web.xml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── hello.jsp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── index.jsp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于生成的War文件可以发现所有Java相关的文件都在&lt;code&gt;WEB-INF&lt;/code&gt;下, 比如我们编写的Servlet字节码文件和和我们用到的依赖(gson, mysql connector, log4j). 然后仔细看源代码文件结构, 在&lt;code&gt;webapp&lt;/code&gt;下也有个&lt;code&gt;WEB-INF&lt;/code&gt;, 这下面放的就是我们项目的&lt;code&gt;web.xml&lt;/code&gt;, 内容如下(所以这有什么联系呢),&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;web-app&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://xmlns.jcp.org/xml/ns/javaee&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:xsi=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;version=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;welcome-file-list&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;/index.jsp&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/welcome-file-list&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;get-data&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;servlet.GetDataServlet&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;get-data&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/temperature/*&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/humidity/*&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/web-app&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4-verify&#34;&gt;4. Verify&lt;/h2&gt;
&lt;p&gt;确保你已经开启Tomcat服务(即使你关闭了IDEA, IDEA和Tomcat是两个东西, IDEA是个IDE会用到Tomcat作为web服务器来部署web app), 然后访问通过&lt;code&gt;http://localhost:8080/&lt;/code&gt;访问到Tomcat主页, 这时候你可以在链接🔗后加上&lt;code&gt;/rps&lt;/code&gt;即&lt;code&gt;http://localhost:8080/rps/&lt;/code&gt;就可以进入到你的那个web网页, 如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/war/h.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-思考总结&#34;&gt;5. 思考总结&lt;/h2&gt;
&lt;p&gt;这时候其实我们也就知道了什么是根目录和url中神秘的路径问题, 你看我们若想访问&lt;code&gt;manager&lt;/code&gt;页面, 这个页面的url是&lt;code&gt;http://localhost:8080/manager/&lt;/code&gt;, 我们访问我们刚部署的页面是&lt;code&gt;http://localhost:8080/rps/&lt;/code&gt;, 你看最后的这个路径及&lt;code&gt;/manager&lt;/code&gt;, &lt;code&gt;/rps&lt;/code&gt;都是tomcat的&lt;code&gt;webapps&lt;/code&gt;目录下的文件, 如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# David @ tc0db in ~/Downloads/Programs/apache-tomcat-9.0.73/webapps&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ROOT         examples     manager      rps.war
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docs         host-manager rps
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以&lt;code&gt;webapp&lt;/code&gt;就是所谓的根目录, 我们访问什么都是根据它来的, 可以看到, &lt;code&gt;webapps&lt;/code&gt;目录下还有&lt;code&gt;examples&lt;/code&gt;等文件夹, 所以我们可以直接通过&lt;code&gt;http://localhost:8080/example/&lt;/code&gt;访问. 但是又有个问题, Tomcat的主页也就是是&lt;code&gt;http://localhost:8080/&lt;/code&gt;具体在哪呢? 按理说&lt;code&gt;webapps&lt;/code&gt;下应该有个&lt;code&gt;index.html&lt;/code&gt;文件呀, 可是却空空, 这是怎么回事, 怎么没有按我们上面推导的路径来呢?&lt;/p&gt;
&lt;p&gt;还记不记得当时学习servlet的时候有个&lt;code&gt;web.xml&lt;/code&gt;文件, 我们在这个文件里可以配置个welcome标签, 通过这个标签我们就可以直接指定一个html文件作为我们的主页而不是根目录下的&lt;code&gt;index.tml&lt;/code&gt;文件, 同样, Tomcat当然也有这个文件 &lt;code&gt;TOMCAT_HOME/conf/web.xml&lt;/code&gt;, 搜索&lt;code&gt;welcome&lt;/code&gt;找到啦(在&lt;code&gt;tomcat/webapps/ROOT/index.jsp&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- ==================== Default Welcome File List ===================== --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- When a request URI refers to a directory, the default servlet looks  --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- for a &amp;#34;welcome file&amp;#34; within that directory and, if present, to the   --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- corresponding resource URI for display.                              --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- If no welcome files are present, the default servlet either serves a --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- directory listing (see default servlet configuration on how to       --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- customize) or returns a 404 status, depending on the value of the    --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- listings setting.                                                    --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--                                                                      --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- If you define welcome files in your own application&amp;#39;s web.xml        --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- deployment descriptor, that list *replaces* the list configured      --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- here, so be sure to include any of the default values that you wish  --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- to use within your application.                                       --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;welcome-file-list&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;index.html&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;index.htm&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;index.jsp&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/welcome-file-list&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后怎么覆盖这个home page呢? 刚好看到了下面这个回答, 看来和我们猜想的一样, 如下:&lt;/p&gt;
&lt;p&gt;In any web application, there will be a &lt;code&gt;web.xml&lt;/code&gt; in the &lt;code&gt;WEB-INF/&lt;/code&gt; folder. (别忘了我们之前学习JSP的时候可没少在这个文件夹花时间去配置servlet name和对应的jsp, 每创建一个新的servlet就要在这创建个新的servlet pattern)&lt;/p&gt;
&lt;p&gt;If you dont have one in your web app, as it seems to be the case in your folder structure, the default &lt;strong&gt;Tomcat&lt;/strong&gt; &lt;code&gt;web.xml&lt;/code&gt; is under &lt;code&gt;TOMCAT_HOME/conf/web.xml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Either way, the relevant lines of the web.xml are&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;welcome-file-list&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;index.html&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;index.htm&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;index.jsp&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/welcome-file-list&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;so any file matching this pattern when found will be shown as the home page.&lt;/p&gt;
&lt;p&gt;In Tomcat, a web.xml setting within your web app will override the default, if present.&lt;/p&gt;
&lt;p&gt;Further Reading: &lt;a href=&#34;http://wiki.apache.org/tomcat/HowTo#How_do_I_override_the_default_home_page_loaded_by_Tomcat.3F&#34;&gt;How do I override the default home page loaded by Tomcat?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.theserverside.com/video/Step-by-step-Maven-Tomcat-WAR-file-deploy-example&#34;&gt;Step-by-step Maven Tomcat WAR file deploy example | TheServerSide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7133755807253921829&#34;&gt;tomcat启动成功浏览器却无法访问 - 掘金&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/3976385/16317008&#34;&gt;web applications - How does Tomcat find the HOME PAGE of my Web App? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.baeldung.com/maven-generate-war-file&#34;&gt;Generate a WAR File in Maven | Baeldung&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>IDEA 项目中的 War 和 War Exploded 的区别</title>
      <link>https://blog.jiyi27.com/posts/java/backend/002-war-exploded/</link>
      <pubDate>Tue, 25 Apr 2023 14:27:35 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/java/backend/002-war-exploded/</guid>
      <description>&lt;p&gt;在 IDEA 把 webapp deploy 到 tomcat上的时候会看到以下设置:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/war-vs-war-exploded/a.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/war-vs-war-exploded/b.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中选择war或者war exploded的时候, 如果选择前者, on frame deactivation diaglog就不会有update resources选项:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/war-vs-war-exploded/c.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;有很多疑问比如war和war exploded是什么, update resources和update classes and resources的区别是什么, 这都是干啥的?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在使用 IDEA 开发Java Web项目部署 Tomcat 的时候通常会出现下面的情况:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/war-vs-war-exploded/d.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;是选择 &lt;code&gt;war&lt;/code&gt; 还是 &lt;code&gt;war exploded&lt;/code&gt;呢?&lt;/p&gt;
&lt;p&gt;看一下他们两个的区别:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;war：将Web Application以包的形式上传到服务器&lt;/li&gt;
&lt;li&gt;war exploded：将Web Application以当前文件夹的位置关系上传到服务器, 因此这种方式支持&lt;strong&gt;hot deployment&lt;/strong&gt;，一般在开发的时候也是用这种方式.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hot deployment&lt;/strong&gt; is the process of adding new components (such as WAR files, EJB Jar files, enterprise Java beans, servlets, and JSP files) to a running server without having to stop the application server process and start it again.&lt;/p&gt;</description>
      <content>&lt;p&gt;在 IDEA 把 webapp deploy 到 tomcat上的时候会看到以下设置:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/war-vs-war-exploded/a.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/war-vs-war-exploded/b.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中选择war或者war exploded的时候, 如果选择前者, on frame deactivation diaglog就不会有update resources选项:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/war-vs-war-exploded/c.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;有很多疑问比如war和war exploded是什么, update resources和update classes and resources的区别是什么, 这都是干啥的?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在使用 IDEA 开发Java Web项目部署 Tomcat 的时候通常会出现下面的情况:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/war-vs-war-exploded/d.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;是选择 &lt;code&gt;war&lt;/code&gt; 还是 &lt;code&gt;war exploded&lt;/code&gt;呢?&lt;/p&gt;
&lt;p&gt;看一下他们两个的区别:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;war：将Web Application以包的形式上传到服务器&lt;/li&gt;
&lt;li&gt;war exploded：将Web Application以当前文件夹的位置关系上传到服务器, 因此这种方式支持&lt;strong&gt;hot deployment&lt;/strong&gt;，一般在开发的时候也是用这种方式.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hot deployment&lt;/strong&gt; is the process of adding new components (such as WAR files, EJB Jar files, enterprise Java beans, servlets, and JSP files) to a running server without having to stop the application server process and start it again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以现在知道上面为啥选择war的话, 在on frame deactivation diaglog就不会有update resources选项了吧.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/war-vs-war-exploded/e.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;On Upate Action : update classes and resources 更新代码和资源&lt;/li&gt;
&lt;li&gt;On Frame Deactivation : update classes and resources在IDE失去焦点时(你点开浏览器离开IDE的时候)更新并发布代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果On Upate Action选择了update classes and resources，然后On Frame Deactivation 选择了do nothing, 那你无论是修改了servlet, doGet等动态代码还是jsp，h5等静态资源代码，需要手动更新, 就是你得自己点击那个更新按钮, 然后再刷新浏览器页面, 你的修改才能生效:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/war-vs-war-exploded/f.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/war-vs-war-exploded/g.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果On Upate Action和On Frame Deactivation都选择了update classes and resources，那就是每次修改了servlet代码或者jsp等静态代码后你都不用点击那个更新按钮了, 直接进入浏览器刷新页面就行,这样显然会浪费电脑资源,如果你不心疼cpu, 那就这样最好, 我是心疼, 所以我选择的如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/war-vs-war-exploded/h.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这样每次修改了servlet之后我点击更新按钮, 修改了jsp之后我就不用点击了, 直接进入浏览器刷新页面就可以了.&lt;/p&gt;
&lt;p&gt;参考: &lt;a href=&#34;https://blog.csdn.net/u013626215/article/details/103685304&#34;&gt;https://blog.csdn.net/u013626215/article/details/103685304&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>

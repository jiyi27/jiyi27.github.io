<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机基础 on 为霜的博客</title>
    <link>https://blog.jiyi27.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in 计算机基础 on 为霜的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 22 Jan 2025 14:58:10 +0000</lastBuildDate><atom:link href="https://blog.jiyi27.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>虚拟内存</title>
      <link>https://blog.jiyi27.com/posts/cs-basics/008-virtual-memory/</link>
      <pubDate>Wed, 22 Jan 2025 14:58:10 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/cs-basics/008-virtual-memory/</guid>
      <description>&lt;h2 id=&#34;1-virtual-memory&#34;&gt;1. Virtual Memory&lt;/h2&gt;
&lt;p&gt;Virtual memory is a memory management technique that gives applications the impression that they have contiguous working memory (a continuous and complete address space), even though physical memory may be fragmented and some data may be temporarily stored on external disk storage, being swapped between them as needed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A memory management unit (MMU) is &lt;strong&gt;a computer hardware unit&lt;/strong&gt; that examines all memory references on the memory bus, translating these requests, known as virtual memory addresses, into physical addresses in main memory. &lt;a href=&#34;https://en.wikipedia.org/wiki/Memory_management_unit&#34;&gt;Memory management unit&lt;/a&gt;&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-virtual-memory&#34;&gt;1. Virtual Memory&lt;/h2&gt;
&lt;p&gt;Virtual memory is a memory management technique that gives applications the impression that they have contiguous working memory (a continuous and complete address space), even though physical memory may be fragmented and some data may be temporarily stored on external disk storage, being swapped between them as needed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A memory management unit (MMU) is &lt;strong&gt;a computer hardware unit&lt;/strong&gt; that examines all memory references on the memory bus, translating these requests, known as virtual memory addresses, into physical addresses in main memory. &lt;a href=&#34;https://en.wikipedia.org/wiki/Memory_management_unit&#34;&gt;Memory management unit&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-risc&#34; data-lang=&#34;risc&#34;&gt;ld r1, 400(r2)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This instruction means to load data into register r1 from the address calculated by adding an offset of 400 to the content of register r2.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Calculate the Virtual Address:
&lt;ul&gt;
&lt;li&gt;Assume the register r2 currently holds the virtual address 0x1000 (4096 in decimal).&lt;/li&gt;
&lt;li&gt;The offset 400 (0x190) is added to the content of r2.&lt;/li&gt;
&lt;li&gt;Therefore, the calculated virtual address is 0x1000 + 0x190 = 0x1190 (virtual address).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Virtual to Physical Address Translation:
&lt;ul&gt;
&lt;li&gt;The MMU receives the virtual address 0x1190 and begins to look up the page table for the current process.&lt;/li&gt;
&lt;li&gt;Suppose the page table entry shows that this virtual address maps to the physical address 0x5000.&lt;/li&gt;
&lt;li&gt;The page offset (offset within the page) remains 0x190.&lt;/li&gt;
&lt;li&gt;Thus, the complete physical address is 0x5000 + 0x190 = 0x5190.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access Physical Memory and Execute Instruction:
&lt;ul&gt;
&lt;li&gt;Once the physical address is determined, the MMU instructs the system to load data from physical address 0x5190.&lt;/li&gt;
&lt;li&gt;The data is loaded into register r1.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-how-does-virtual-memory-work&#34;&gt;2. How Does Virtual Memory Work&lt;/h2&gt;
&lt;p&gt;RISC is a type of microprocessor design. Both MIPS and ARM are types of RISC architectures. MIPS gives each program its own 32-bit address space. Programs can only access any byte in their own address space.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What if we don&amp;rsquo;t have enough memory?&lt;/li&gt;
&lt;li&gt;Holes in our address space?&lt;/li&gt;
&lt;li&gt;Keeping programs secure with virtual memory.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=59rEMnKWoS4&amp;amp;list=PLiwt1iVUib9s2Uo5BeYmwkDFUh70fJPxX&amp;amp;index=4&#34;&gt;Virtual Memory: 4 How Does Virtual Memory Work?&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-how-does-a-game-that-is-several-hundred-gigabytes-run-on-a-computer-with-only-a-few-gigabytes-of-memory&#34;&gt;3. How does a game that is several hundred gigabytes run on a computer with only a few gigabytes of memory?&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s Not All Loaded at Once:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Games, even huge ones, don&amp;rsquo;t need all their data in memory at the same time. Think of a vast open-world game: you only need the data for the area immediately around your character.&lt;/li&gt;
&lt;li&gt;The game constantly loads and unloads data as you move through the world. This is called &lt;strong&gt;streaming&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The operating system (OS) swaps data between your RAM and your storage drive (HDD or SSD). This means less frequently used game data sits on the drive until needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-segment-fault&#34;&gt;4. Segment Fault&lt;/h2&gt;
&lt;p&gt;A segmentation fault is a specific type of error that occurs when a program tries to access a segment of memory that it doesn’t have the permissions to access or that doesn’t exist, leading to the program’s abrupt termination by the operating system.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.percona.com/blog/segmentation-fault-a-dba-perspective/&#34;&gt;Understanding Segmentation Fault: What it is &amp;amp; How to Fix it&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Pass by Value or Reference</title>
      <link>https://blog.jiyi27.com/posts/cs-basics/001-pass-by-value-reference/</link>
      <pubDate>Tue, 28 Nov 2023 23:02:06 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/cs-basics/001-pass-by-value-reference/</guid>
      <description>&lt;h2 id=&#34;1-python&#34;&gt;1. Python&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_function&lt;/span&gt;(x, y):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    test_function(a, b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a =&amp;#34;&lt;/span&gt;, a)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b =&amp;#34;&lt;/span&gt;, b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you pass a &lt;em&gt;mutable&lt;/em&gt; object into a method, the method gets a reference to that same object and you can mutate it to your heart&amp;rsquo;s delight, but if you rebind the reference in the method, the outer scope will know nothing about it, and after you&amp;rsquo;re done, the outer reference will still point at the original object.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-python&#34;&gt;1. Python&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_function&lt;/span&gt;(x, y):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    test_function(a, b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a =&amp;#34;&lt;/span&gt;, a)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b =&amp;#34;&lt;/span&gt;, b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you pass a &lt;em&gt;mutable&lt;/em&gt; object into a method, the method gets a reference to that same object and you can mutate it to your heart&amp;rsquo;s delight, but if you rebind the reference in the method, the outer scope will know nothing about it, and after you&amp;rsquo;re done, the outer reference will still point at the original object.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;integer, str are immutable objects in Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you pass an &lt;em&gt;immutable&lt;/em&gt; object to a method, you still can&amp;rsquo;t rebind the outer reference, and you can&amp;rsquo;t even mutate the object.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; def main&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...     n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...     print&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Initial address of n: {id(n)}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...     increment&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...     print&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  Final address of n: {id(n)}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; def increment&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...     print&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Initial address of x: {id(x)}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...     x &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...     print&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  Final address of x: {id(x)}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; main&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Initial address of n: &lt;span style=&#34;color:#ae81ff&#34;&gt;140562586057840&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Initial address of x: &lt;span style=&#34;color:#ae81ff&#34;&gt;140562586057840&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Final address of x: &lt;span style=&#34;color:#ae81ff&#34;&gt;140562586057968&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Final address of n: &lt;span style=&#34;color:#ae81ff&#34;&gt;140562586057840&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-javascript&#34;&gt;2. Javascript&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;changeStuff&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;changed&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;changed&amp;#34;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unchanged&amp;#34;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unchanged&amp;#34;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;changeStuff&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;obj1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;obj2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;obj1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;obj2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This produces the output:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-none&#34; data-lang=&#34;none&#34;&gt;10
changed
unchanged
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3-golang-java-c--javascript&#34;&gt;3. Golang, Java, C++ &amp;amp; Javascript&lt;/h2&gt;
&lt;p&gt;Python, Java, C++ and JS are all pass by value, but they do have references. When you assign or pass a reference-type, the copied value is still the value of the reference, namely the address, giving us the illusion of &amp;ldquo;pass by reference not value.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;C++ has another application where passing const references is preferred to enhance efficiency. However, in Java, Python, and JS, references are passed every time, but they lack the concept of const references.&lt;/p&gt;
&lt;p&gt;Actually Golang doesn&amp;rsquo;t have reference type (all are values), reference type often refers to the maps, slice, channels and strings in Golang which are pointers themselves or a struct holding a pointer to the underlying data structure.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Data Types in Programming Languages</title>
      <link>https://blog.jiyi27.com/posts/cs-basics/001-data-types-programming-language/</link>
      <pubDate>Tue, 28 Nov 2023 20:50:06 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/cs-basics/001-data-types-programming-language/</guid>
      <description>&lt;h2 id=&#34;1-javascript&#34;&gt;1. Javascript&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;As you have know that javascript is a dynamic language from &lt;a href=&#34;https://davidzhu.xyz/post/other/000-languge-types-practice/&#34;&gt;previous post&lt;/a&gt;, which means the values have types, not variables.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Javascript value types can be categorized into two main categories: &lt;strong&gt;objects&lt;/strong&gt; and &lt;strong&gt;primitives&lt;/strong&gt;. Among these types, the &lt;strong&gt;objects are mutable&lt;/strong&gt;, which means their values can be modified or changed after they are created. On the other hand, the &lt;strong&gt;primitive types are immutable&lt;/strong&gt;, meaning their values cannot be changed once they are assigned.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-javascript&#34;&gt;1. Javascript&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;As you have know that javascript is a dynamic language from &lt;a href=&#34;https://davidzhu.xyz/post/other/000-languge-types-practice/&#34;&gt;previous post&lt;/a&gt;, which means the values have types, not variables.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Javascript value types can be categorized into two main categories: &lt;strong&gt;objects&lt;/strong&gt; and &lt;strong&gt;primitives&lt;/strong&gt;. Among these types, the &lt;strong&gt;objects are mutable&lt;/strong&gt;, which means their values can be modified or changed after they are created. On the other hand, the &lt;strong&gt;primitive types are immutable&lt;/strong&gt;, meaning their values cannot be changed once they are assigned.&lt;/p&gt;
&lt;h3 id=&#34;11-primitive-types&#34;&gt;1.1. Primitive types&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Type&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;&lt;code&gt;typeof&lt;/code&gt; return value&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Object wrapper&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#null_type&#34;&gt;Null&lt;/a&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;&amp;quot;object&amp;quot;&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;N/A&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#undefined_type&#34;&gt;Undefined&lt;/a&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;&amp;quot;undefined&amp;quot;&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;N/A&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#boolean_type&#34;&gt;Boolean&lt;/a&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;&amp;quot;boolean&amp;quot;&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean&#34;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#number_type&#34;&gt;Number&lt;/a&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;&amp;quot;number&amp;quot;&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number&#34;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#bigint_type&#34;&gt;BigInt&lt;/a&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;&amp;quot;bigint&amp;quot;&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt&#34;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#string_type&#34;&gt;String&lt;/a&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;&amp;quot;string&amp;quot;&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&#34;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#symbol_type&#34;&gt;Symbol&lt;/a&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;&amp;quot;symbol&amp;quot;&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol&#34;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;All primitive types, except &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null&#34;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined&#34;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, have their corresponding object wrapper types, which provide useful methods for working with the primitive values. For example, the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number&#34;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; object provides methods like &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential&#34;&gt;&lt;code&gt;toExponential()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All primitive types, except &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null&#34;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, can be tested by the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof&#34;&gt;&lt;code&gt;typeof&lt;/code&gt;&lt;/a&gt; operator. &lt;code&gt;typeof null&lt;/code&gt; returns &lt;code&gt;&amp;quot;object&amp;quot;&lt;/code&gt;, so one has to use &lt;code&gt;=== null&lt;/code&gt; to test for &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;12-object-types&#34;&gt;1.2. Object types&lt;/h3&gt;
&lt;p&gt;Learn more:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://davidzhu.xyz/post/js/basics/001-javascript-basics/&#34;&gt;Objects &amp;amp; Collections in Javascript - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures&#34;&gt;JavaScript data types and data structures - JavaScript | MDN&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-python&#34;&gt;2. Python&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Python is a dynamic language which means &lt;strong&gt;the values have types, not variables&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In Python &lt;strong&gt;all values are objects&lt;/strong&gt;, so doesn&amp;rsquo;t like Java, there is no primitives, &lt;strong&gt;all variable are references&lt;/strong&gt;. (Variables are associated with values, values have types)&lt;/p&gt;
&lt;h3 id=&#34;21-data-types&#34;&gt;2.1. Data types&lt;/h3&gt;
&lt;p&gt;Python has the following data types built-in by default, in these categories:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Text Type:&lt;/th&gt;
          &lt;th&gt;&lt;code&gt;str&lt;/code&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Numeric Types:&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;complex&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Sequence Types:&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;list&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, &lt;code&gt;range&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Mapping Type:&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Set Types:&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;set&lt;/code&gt;, &lt;code&gt;frozenset&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Boolean Type:&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Binary Types:&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;bytes&lt;/code&gt;, &lt;code&gt;bytearray&lt;/code&gt;, &lt;code&gt;memoryview&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;None Type:&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;NoneType&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;22-mutable-and-immutable-objects&#34;&gt;2.2. Mutable and immutable objects&lt;/h3&gt;
&lt;p&gt;Everything in Python is an object. And all objects in Python can be either &lt;strong&gt;mutable&lt;/strong&gt; or &lt;strong&gt;immutable&lt;/strong&gt;. Mutable objects are those that allow you to change their value or data in place without affecting the object’s identity. In contrast, immutable objects don’t allow this kind of operation, you have to create a new objects of the same type with different values.&lt;/p&gt;
&lt;p&gt;Objects of built-in types like (&lt;em&gt;&lt;strong&gt;int&lt;/strong&gt;, float, bool, &lt;strong&gt;str&lt;/strong&gt;, tuple, unicode&lt;/em&gt;) are immutable. Objects of built-in types like (&lt;em&gt;list, set, dict&lt;/em&gt;) are mutable. Custom classes are generally mutable.&lt;/p&gt;
&lt;p&gt;Find &lt;a href=&#34;https://stackoverflow.com/a/62177555/16317008&#34;&gt;a good explanation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The integer is immutable. When you write x=5, x points to a memory location that holds 5. When you go on and code y=x, the variable y points to the same location as x.&lt;/p&gt;
&lt;p&gt;Then you type x+1=6, and now x points to a new location that holds 6, and not the previous location. ( Here, the integer still holds immutable because the original integer 5 still exists, but the variable x is not bound to it now. x is now bound to a new location. But y is still bound to the integer 5)&lt;/p&gt;
&lt;p&gt;But y still points to the same location that holds 5. So, integers are still immutable and this is how it works. To see it better, use id(x) or id(y) after every step.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The &lt;em&gt;variable&lt;/em&gt; is not immutable; the &lt;code&gt;int&lt;/code&gt; object &lt;em&gt;referred to&lt;/em&gt; by the variable is.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-java&#34;&gt;3. Java&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Java is a static language which means &lt;strong&gt;the variable have types, not values have types&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Types of variables in Java are divided into two categories—&lt;strong&gt;primitive types&lt;/strong&gt; and &lt;strong&gt;reference types&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2025/01/abfa9bf89da62c46a77ca56b5f3cd477.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;31-primitive-types&#34;&gt;3.1. Primitive types&lt;/h3&gt;
&lt;p&gt;The primitive types are &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt;. All other types are reference types.&lt;/p&gt;
&lt;p&gt;• A primitive-type variable can store exactly one value of its declared type at a time.&lt;/p&gt;
&lt;p&gt;• Primitive-type instance variables are initialized by default. Variables of types &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt; are initialized to &lt;code&gt;0&lt;/code&gt;. Variables of type &lt;code&gt;boolean&lt;/code&gt; are initialized to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;32-reference-types&#34;&gt;3.2. Reference types&lt;/h3&gt;
&lt;p&gt;Reference types in Java are non-primitive data types. It&amp;rsquo;s called reference ecause it holds &lt;strong&gt;the memory address&lt;/strong&gt; (or reference) of the objects.&lt;/p&gt;
&lt;p&gt;In Java, &lt;strong&gt;all objects&lt;/strong&gt; are allocated on Heap. This is different from C++ where objects can be allocated memory either on Stack or on Heap.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Whenever you use &lt;code&gt;new&lt;/code&gt;, an object is created on the heap.&lt;/li&gt;
&lt;li&gt;Local variables are stored on the stack. That includes primitives (such as &lt;code&gt;int&lt;/code&gt;) and the &lt;strong&gt;references&lt;/strong&gt; to any objects created. The actual objects themselves aren&amp;rsquo;t created on the stack, as I mentioned when you use &lt;code&gt;new&lt;/code&gt; they&amp;rsquo;ll be created on the heap. &lt;a href=&#34;https://stackoverflow.com/a/8061692/16317008&#34;&gt;https://stackoverflow.com/a/8061692/16317008&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// variable age: primitive, stored on stack&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; age &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 77;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// variable person: reference, stored on stack, &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// its value is the address of the object stored on heap&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Person person &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2025/01/1f7623bcd0db262e0068e1a64d9699ec.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Just as men and women are fundamentally different (according to John Gray, author of Men Are from Mars, Women Are from Venus), &lt;strong&gt;primitive variables&lt;/strong&gt; and &lt;strong&gt;object reference variables&lt;/strong&gt; differ from each other in multiple ways. The basic difference is that &lt;strong&gt;primitive variables store the actual values&lt;/strong&gt;, whereas reference variables store the addresses of the objects they refer to. Let’s assume that a class Person is already defined. If you create an int variable a, and an object reference variable person, they will store their values in memory as shown in figure 2.13. &lt;a href=&#34;https://stackoverflow.com/a/32049775/16317008&#34;&gt;https://stackoverflow.com/a/32049775/16317008&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that similar to Python, strings in Java are objects, and they are immutable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;4-golang&#34;&gt;4. Golang&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Golang is static language,  golang has no concept of object, all are values. So you can think the variable have types or values have types, all are fine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Golang has no refernce-type, all are values. But there is a concept of pointer, some types like &lt;code&gt;slice&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;channel&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt; which are a pointer or a struct that has a pointer element, we usually catagorize them as reference-type.&lt;/p&gt;
&lt;h2 id=&#34;5-c&#34;&gt;5. C++&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;C++ is a static language which means &lt;strong&gt;the variable have types, not values have types&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;C++ has variable, reference and object. A &lt;strong&gt;variable&lt;/strong&gt; is a named object that can hold a value of a specific data type. A &lt;strong&gt;reference&lt;/strong&gt; is an alias for a variable, which means that it refers to the same memory location as the variable it is referencing.  An &lt;strong&gt;object&lt;/strong&gt; is used to store a value in memory.&lt;/p&gt;
&lt;p&gt;A variable is an object that has a name (identifier). Naming our objects let us refer to them again later in the program. Although objects in C++ can be unnamed (anonymous), more often we name our objects using an identifier. An object with a name is called a &lt;strong&gt;variable&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x; &lt;span style=&#34;color:#75715e&#34;&gt;// define a variable named x, of type int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;In C++, we use objects to access memory. A named object is called a variable. Variables have an identifier, a type, and a value (and some other attributes that aren’t relevant here). A variable’s type is used to determine how the value in memory should be interpreted.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;You can think of RAM as a series of numbered boxes that can be used to store data while the program is running. In some older programming languages (like Applesoft BASIC), you could directly access these boxes (e.g. you could write a statement to “go get the value stored in mailbox number 7532”).  In C++, direct memory access is discouraged. Instead, we access memory indirectly through an object. An &lt;strong&gt;object&lt;/strong&gt; is a region of storage (usually memory) that can store a value, and has other associated properties.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.learncpp.com/cpp-tutorial/introduction-to-objects-and-variables/&#34;&gt;1.3 — Introduction to objects and variables – Learn C++&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;6-conclusion&#34;&gt;6. Conclusion&lt;/h2&gt;
&lt;p&gt;Variables, values, types, the concepts of these terms may a little different. Don&amp;rsquo;t need to remember what exactly these terms mean in each language, our goal is to know the behavior of the language so that we can use the language correctly and efficiently. Such as pass by value or reference, and if can return a reference of a locla variable.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Typing in Programming Language</title>
      <link>https://blog.jiyi27.com/posts/cs-basics/000-languge-types-design/</link>
      <pubDate>Tue, 28 Nov 2023 20:30:17 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/cs-basics/000-languge-types-design/</guid>
      <description>&lt;h2 id=&#34;1-compiled-vs-interpreted-language&#34;&gt;1. Compiled vs interpreted language&lt;/h2&gt;
&lt;p&gt;Programming languages are for humans to read and understand. The program (source code) must be translated into machine language so that the computer can execute the program. &lt;strong&gt;The time when this translation occurs&lt;/strong&gt; depends on whether the programming language is a &lt;strong&gt;compiled language&lt;/strong&gt; or an &lt;strong&gt;interpreted language&lt;/strong&gt;. Instead of translating the source code into machine language before the executable file is created, an interpreter converts the source code into machine language at the same time the program runs. So you can&amp;rsquo;t say a language doesn’t have compilation step, because any language needs to be translated to machine code.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-compiled-vs-interpreted-language&#34;&gt;1. Compiled vs interpreted language&lt;/h2&gt;
&lt;p&gt;Programming languages are for humans to read and understand. The program (source code) must be translated into machine language so that the computer can execute the program. &lt;strong&gt;The time when this translation occurs&lt;/strong&gt; depends on whether the programming language is a &lt;strong&gt;compiled language&lt;/strong&gt; or an &lt;strong&gt;interpreted language&lt;/strong&gt;. Instead of translating the source code into machine language before the executable file is created, an interpreter converts the source code into machine language at the same time the program runs. So you can&amp;rsquo;t say a language doesn’t have compilation step, because any language needs to be translated to machine code.&lt;/p&gt;
&lt;h2 id=&#34;2-statically-vs-dynamically-typing&#34;&gt;2. Statically vs dynamically typing&lt;/h2&gt;
&lt;p&gt;Also know as statically/dynamically typed, &lt;strong&gt;static/dynamic language&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Static Typing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In statically typed languages, the type of a variable is known at compile time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The programmer must explicitly declare the data type of each variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Examples of statically typed languages include Java, C, C++, and Go.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Static typing allows for early detection of type-related errors during the compilation process.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dynamic Typing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In dynamically typed languages, the type of a variable is determined at runtime.&lt;/li&gt;
&lt;li&gt;The programmer does not need to explicitly declare the data type of each variable.&lt;/li&gt;
&lt;li&gt;Examples of dynamically typed languages include Python, JavaScript, Ruby, and PHP.&lt;/li&gt;
&lt;li&gt;Type checking occurs during runtime, which means that type-related errors may only be discovered when the code is executed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example in Java:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;String str = &amp;#34;Hello&amp;#34;;  //statically typed as string
str = 5;               //would throw an error since java is statically typed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Whereas in a &lt;strong&gt;dynamically typed language&lt;/strong&gt; the type is &lt;em&gt;dynamic&lt;/em&gt;, meaning after you set a variable to a type, you CAN change it. That is because typing is associated with the value rather than the variable. For example in Python:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;str = &amp;#34;Hello&amp;#34; # it is a string
str = 5       # now it is an integer; perfectly OK
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3-strong-vs-weak-typing&#34;&gt;3. Strong vs weak typing&lt;/h2&gt;
&lt;p&gt;The strong/weak typing in a language is related to &lt;strong&gt;implicit type conversions&lt;/strong&gt; (partly taken from @Dario&amp;rsquo;s answer):&lt;/p&gt;
&lt;p&gt;For example in Python:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;str = 5 + &amp;#34;hello&amp;#34; 
# would throw an error since it does not want to cast one type to the other implicitly. 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;whereas in PHP:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$str = 5 + &amp;#34;hello&amp;#34;; // equals 5 because &amp;#34;hello&amp;#34; is implicitly casted to 0 
// PHP is weakly typed, thus is a very forgiving language.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Static typing allows for checking type correctness at compile time. Statically typed languages are usually compiled, and dynamically typed languages are interpreted. Therefore, dynamicly typed languages can check typing at run time.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://stackoverflow.com/a/34004765/16317008&#34;&gt;https://stackoverflow.com/a/34004765/16317008&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-conclusion&#34;&gt;4. Conclusion&lt;/h2&gt;
&lt;p&gt;Dynamically typing languages (where type checking happens at run time) can also be strongly typed (Python for example).&lt;/p&gt;
&lt;p&gt;Note that in dynamically checking languages, &lt;strong&gt;values have types&lt;/strong&gt;, not variables (have types). Whereas, in statically checking languages, variables have types.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Static/Dynamic Typing&lt;/em&gt; is about &lt;strong&gt;when&lt;/strong&gt; type information is acquired (Either at compile time or at runtime)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Strong/Weak Typing&lt;/em&gt; is about &lt;strong&gt;how strictly&lt;/strong&gt; types are distinguished (e.g. whether the language tries to do an implicit conversion from strings to numbers).&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Typing in Programming Language - Example</title>
      <link>https://blog.jiyi27.com/posts/cs-basics/000-languge-types-practice/</link>
      <pubDate>Tue, 28 Nov 2023 19:20:17 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/cs-basics/000-languge-types-practice/</guid>
      <description>&lt;h2 id=&#34;1-javascript&#34;&gt;1. Javascript&lt;/h2&gt;
&lt;p&gt;JavaScript is a dynamic language with dynamic types. Variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned (and re-assigned) values of all types:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// foo is now a number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// foo is now a string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// foo is now a boolean
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is in dynamic languages (dynamically typing), values have types, not variables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You don&amp;rsquo;t need know what is &lt;strong&gt;dynamic languages&lt;/strong&gt;, you just need know values have types, not variables.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-javascript&#34;&gt;1. Javascript&lt;/h2&gt;
&lt;p&gt;JavaScript is a dynamic language with dynamic types. Variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned (and re-assigned) values of all types:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// foo is now a number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// foo is now a string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// foo is now a boolean
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is in dynamic languages (dynamically typing), values have types, not variables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You don&amp;rsquo;t need know what is &lt;strong&gt;dynamic languages&lt;/strong&gt;, you just need know values have types, not variables.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JavaScript is also a &lt;strong&gt;weakly typed&lt;/strong&gt; language, which means it allows implicit type conversion when an operation involves mismatched types, instead of throwing type errors.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// foo is a number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// JavaScript coerces foo to a string, so it can be concatenated with the other operand
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 421
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;As you can see, &lt;strong&gt;weakly typed&lt;/strong&gt; language means it allows implicit type conversion when an operation involves mismatched types, instead of throwing type errors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-python&#34;&gt;2. Python&lt;/h2&gt;
&lt;p&gt;Python is dynamic language, and is strongly typed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bob&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This works because the variable does not have a type; it can name any object. After &lt;code&gt;bob=1&lt;/code&gt;, you&amp;rsquo;ll find that &lt;code&gt;type(bob)&lt;/code&gt; returns &lt;code&gt;int&lt;/code&gt;, but after &lt;code&gt;bob=&amp;quot;bob&amp;quot;&lt;/code&gt;, it returns &lt;code&gt;str&lt;/code&gt;. (Note that &lt;code&gt;type&lt;/code&gt; is a regular function, so it evaluates its argument, then returns the type of the value.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Attempting to add a string and an integer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;string_var &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;integer_var &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This line will result in a TypeError&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string_var &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; integer_var
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-cc&#34;&gt;3. C/C++&lt;/h2&gt;
&lt;p&gt;Bbviously, they are static language, but strong or weak?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s hard to classify every language into &amp;lsquo;weakly&amp;rsquo; or &amp;lsquo;strongly&amp;rsquo; typed &amp;ndash; it&amp;rsquo;s more of a continuum. But, in comparison to other languages, C is fairly strongly typed. Every object has a compile-time type, and the compiler will let you know (loudly) if you&amp;rsquo;re doing something with an object that its type doesn&amp;rsquo;t let you do. For example, you can&amp;rsquo;t call functions with the wrong types of parameters, access struct/union members which don&amp;rsquo;t exist, etc.&lt;/p&gt;
&lt;p&gt;But there are a few weaknesses. One major weakness is typecasts - they essentially say that you&amp;rsquo;re going to be mucking around with the types of objects, and the compiler should be quiet (when it can). &lt;code&gt;void*&lt;/code&gt; is also another weakness &amp;ndash; it&amp;rsquo;s a generic pointer to an unknown type, and when you use them, you have to be extra careful that you&amp;rsquo;re doing the right thing. The compiler can&amp;rsquo;t statically check most uses of &lt;code&gt;void*&lt;/code&gt;. &lt;code&gt;void*&lt;/code&gt; can also be converted to a pointer to any type without a cast (only in C, not in C++), which is another weakness.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/a/430204/16317008&#34;&gt;https://stackoverflow.com/a/430204/16317008&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;4-java&#34;&gt;4. Java&lt;/h2&gt;
&lt;p&gt;Java is static and strongly typed.&lt;/p&gt;
&lt;p&gt;In Java or C/C++, every variable must have a declared type, and the type is checked at compile-time. Once a variable is declared with a specific type, it cannot be assigned a value of a different type. Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 10; &lt;span style=&#34;color:#75715e&#34;&gt;// The variable &amp;#39;num&amp;#39; is declared as an integer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// This will result in a compilation error because we are trying to assign a string to an integer variable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Strongly Typed: Java is also a strongly typed language, which means that type conversions or implicit type coercion are limited. In Java, you cannot perform operations between incompatible types without explicitly converting them. Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; num1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 10;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;20&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str; &lt;span style=&#34;color:#75715e&#34;&gt;// This will result in a compilation error because we are trying to add an integer and a string without explicit conversion&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4-golang&#34;&gt;4. Golang&lt;/h2&gt;
&lt;p&gt;Golang is indeed a static and strongly typed language:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// invalid operation: a + b (mismatched types int and float64)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Static Linking vs Dynamic Linking</title>
      <link>https://blog.jiyi27.com/posts/cs-basics/002-statically-linking/</link>
      <pubDate>Fri, 03 Nov 2023 10:49:20 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/cs-basics/002-statically-linking/</guid>
      <description>&lt;h2 id=&#34;1-compilation-process-in-c&#34;&gt;1. Compilation process in C&lt;/h2&gt;
&lt;p&gt;C/C++ programs are built in two main phases (ignore the preprocess, assemble):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Compilation - produces object code (&lt;code&gt;.obj&lt;/code&gt;, &lt;code&gt;.o&lt;/code&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Compile source code into an object file without linking:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcc -c path/to/source.c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;The extension of the &lt;em&gt;&lt;strong&gt;object file&lt;/strong&gt;&lt;/em&gt; in DOS is &lt;code&gt;.obj&lt;/code&gt;, and in UNIX, the extension is &lt;code&gt;.o&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linking - produces executable code (.exe or .dll)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;executable file&lt;/strong&gt;&lt;/em&gt; with an extension of &lt;code&gt;exe&lt;/code&gt; in DOS and &lt;code&gt;.out&lt;/code&gt; in UNIX OSL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-static-linking-and-dynamic-linking&#34;&gt;2. Static linking and dynamic linking&lt;/h2&gt;
&lt;h3 id=&#34;21-static-linking---portable-fast&#34;&gt;2.1. Static linking - portable, fast&lt;/h3&gt;
&lt;p&gt;Mainly, all the programs written in C use library functions. These library functions are pre-compiled, and the object code of these library files is stored with &lt;code&gt;.lib&lt;/code&gt; (or &lt;code&gt;.a&lt;/code&gt;) extension. &lt;strong&gt;The main working of the linker&lt;/strong&gt; is to combine the &lt;em&gt;&lt;strong&gt;object code&lt;/strong&gt;&lt;/em&gt; of library files with the &lt;em&gt;&lt;strong&gt;object code&lt;/strong&gt;&lt;/em&gt; of our program. The output of the linker is the executable file. So the &lt;strong&gt;static Linking creates larger binary files&lt;/strong&gt;.  Note that this is the process of static linking, and &lt;code&gt;.lib&lt;/code&gt; and &lt;code&gt;.a&lt;/code&gt; is static library in windows and linux respectively.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-compilation-process-in-c&#34;&gt;1. Compilation process in C&lt;/h2&gt;
&lt;p&gt;C/C++ programs are built in two main phases (ignore the preprocess, assemble):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Compilation - produces object code (&lt;code&gt;.obj&lt;/code&gt;, &lt;code&gt;.o&lt;/code&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Compile source code into an object file without linking:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcc -c path/to/source.c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;The extension of the &lt;em&gt;&lt;strong&gt;object file&lt;/strong&gt;&lt;/em&gt; in DOS is &lt;code&gt;.obj&lt;/code&gt;, and in UNIX, the extension is &lt;code&gt;.o&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linking - produces executable code (.exe or .dll)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;executable file&lt;/strong&gt;&lt;/em&gt; with an extension of &lt;code&gt;exe&lt;/code&gt; in DOS and &lt;code&gt;.out&lt;/code&gt; in UNIX OSL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-static-linking-and-dynamic-linking&#34;&gt;2. Static linking and dynamic linking&lt;/h2&gt;
&lt;h3 id=&#34;21-static-linking---portable-fast&#34;&gt;2.1. Static linking - portable, fast&lt;/h3&gt;
&lt;p&gt;Mainly, all the programs written in C use library functions. These library functions are pre-compiled, and the object code of these library files is stored with &lt;code&gt;.lib&lt;/code&gt; (or &lt;code&gt;.a&lt;/code&gt;) extension. &lt;strong&gt;The main working of the linker&lt;/strong&gt; is to combine the &lt;em&gt;&lt;strong&gt;object code&lt;/strong&gt;&lt;/em&gt; of library files with the &lt;em&gt;&lt;strong&gt;object code&lt;/strong&gt;&lt;/em&gt; of our program. The output of the linker is the executable file. So the &lt;strong&gt;static Linking creates larger binary files&lt;/strong&gt;.  Note that this is the process of static linking, and &lt;code&gt;.lib&lt;/code&gt; and &lt;code&gt;.a&lt;/code&gt; is static library in windows and linux respectively.&lt;/p&gt;
&lt;p&gt;In static linking, everything is bundled into your application, you don’t have to worry that the client will have the right library (and version) available on their system. Since all library code have connected at compile time, the final executable has no dependencies on the library at run time. You have everything under your control and there is no dependency.&lt;/p&gt;
&lt;p&gt;One major advantage of static libraries being preferred even now “is speed”. There will be no dynamic querying of symbols in static libraries.&lt;/p&gt;
&lt;p&gt;One drawback of static libraries is, for any change(up-gradation) in the static libraries, you have to recompile the main program every time.&lt;/p&gt;
&lt;h3 id=&#34;22-dynamic-linking---smaller-binary&#34;&gt;2.2. Dynamic linking - smaller binary&lt;/h3&gt;
&lt;p&gt;Dynamic Linking doesn’t require the code to be copied, it is done by just placing name of the library in the binary file. The actual linking happens when the program is run, when both the binary file and the library are in memory.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://www.geeksforgeeks.org/static-vs-dynamic-libraries/&#34;&gt;Static and Dynamic Libraries | Set 1 - GeeksforGeeks&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-static-library-vs-dynamic-library&#34;&gt;3. Static library vs dynamic library&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Static library: windows &lt;code&gt;.lib&lt;/code&gt;,  linux &lt;code&gt;.a&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dynamic library (shared library): windows &lt;code&gt;.dll&lt;/code&gt;, linux &lt;code&gt;.so&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Static library &lt;code&gt;.lib&lt;/code&gt; is just a bundle of &lt;code&gt;.obj&lt;/code&gt; files and therefore isn&amp;rsquo;t a complete program. It hasn&amp;rsquo;t undergone the second (linking) phase of building a program. Dlls, on the other hand, are like exe&amp;rsquo;s and therefore are complete programs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you build a static library&lt;/strong&gt;, it isn&amp;rsquo;t linked yet and therefore consumers of your static library will have to use the same compiler that you used (if you used g++, they will have to use g++). If the static library uses C++ library, such as &lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If instead you built a dll (and built it &lt;a href=&#34;http://www.codeproject.com/Articles/28969/HowTo-Export-C-classes-from-a-DLL&#34;&gt;correctly&lt;/a&gt;), you have built a complete program that all consumers can use, no matter which compiler they are using. There are several restrictions though, on exporting from a dll, if cross compiler compatibility is desired.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://stackoverflow.com/a/25209275/16317008&#34;&gt;https://stackoverflow.com/a/25209275/16317008&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-example-in-practice&#34;&gt;4. Example in practice&lt;/h2&gt;
&lt;p&gt;Dynamic linking means the use of shared libraries. Shared libraries usually end with &lt;code&gt;.so&lt;/code&gt; (short for &amp;ldquo;shared object&amp;rdquo;) or &lt;code&gt;.dylib&lt;/code&gt; on MacOS.&lt;/p&gt;
&lt;p&gt;Another thing to note is that when a bug is fixed in a shared library, every application that references this library will profit from it. This also means that if the bug remains undetected, each referencing application will suffer from it (if the application uses the affected parts).&lt;/p&gt;
&lt;p&gt;It can be very hard for beginners &lt;strong&gt;when an application requires a specific version of the library, but the linker only knows the location of an incompatible versio&lt;/strong&gt;n. In this case, you must help the linker find the path to the correct version.&lt;/p&gt;
&lt;p&gt;Although this is not an everyday issue, understanding dynamic linking will surely help you in fixing such problems.&lt;/p&gt;
&lt;p&gt;Fortunately, the mechanics for this are quite straightforward. To detect which libraries are required for an application to start, you can use &lt;code&gt;ldd&lt;/code&gt;, which will print out the shared libraries used by a given file.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ldd my_app 
	linux-vdso.so.1 (0x00007ffd1299c000)
	libmy_shared.so =&amp;gt; not found
	libc.so.6 =&amp;gt; /lib64/libc.so.6 (0x00007f56b869b000)
	/lib64/ld-linux-x86-64.so.2 (0x00007f56b8881000)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that the library &lt;code&gt;libmy_shared.so&lt;/code&gt; is part of the repository but is not found. This is because the &lt;strong&gt;dynamic linker&lt;/strong&gt;, which is responsible for loading all dependencies into memory before executing the application, cannot find this library in the standard locations it searches.&lt;/p&gt;
&lt;p&gt;Errors associated with linkers finding incompatible versions of common libraries (like &lt;code&gt;bzip2&lt;/code&gt;, for example) can be quite confusing for a new user. One way around this is to add the repository folder to the environment variable &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; to tell the linker where to look for the correct version. In this case, the right version is in this folder, so you can export it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ LD_LIBRARY_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pwd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;:$LD_LIBRARY_PATH
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ export LD_LIBRARY_PATH
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the dynamic linker knows where to find the library, and the application can be executed. You can rerun &lt;code&gt;ldd&lt;/code&gt; to invoke the dynamic linker, which inspects the application&amp;rsquo;s dependencies and loads them into memory. The memory address is shown after the object path:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ldd my_app 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	linux-vdso.so.1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007ffd385f7000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	libmy_shared.so &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /home/stephan/library_sample/libmy_shared.so &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f3fad401000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib64/libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f3fad21d000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	/lib64/ld-linux-x86-64.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f3fad408000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To find out which linker is invoked, you can use &lt;code&gt;file&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ file my_app 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;my_app: ELF 64-bit LSB executable, x86-64, version &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SYSV&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;sha1&lt;span style=&#34;color:#f92672&#34;&gt;]=&lt;/span&gt;26c677b771122b4c99f0fd9ee001e6c743550fa6, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; GNU/Linux 3.2.0, not stripped
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The linker &lt;code&gt;/lib64/ld-linux-x86–64.so.2&lt;/code&gt; is a symbolic link to &lt;code&gt;ld-2.30.so&lt;/code&gt;, which is the default linker for my Linux distribution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ file /lib64/ld-linux-x86-64.so.2 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/lib64/ld-linux-x86-64.so.2: symbolic link to ld-2.31.so
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looking back to the output of &lt;code&gt;ldd&lt;/code&gt;, you can also see (next to &lt;code&gt;libmy_shared.so&lt;/code&gt;) that each dependency ends with a number (e.g., &lt;code&gt;/lib64/libc.so.6&lt;/code&gt;). The usual naming scheme of shared objects is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;**lib** XYZ.so **.&amp;lt;MAJOR&amp;gt;** . **&amp;lt;MINOR&amp;gt;**
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On my system, &lt;code&gt;libc.so.6&lt;/code&gt; is also a symbolic link to the shared object &lt;code&gt;libc-2.30.so&lt;/code&gt; in the same folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ file /lib64/libc.so.6 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/lib64/libc.so.6: symbolic link to libc-2.31.so
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you are facing the issue that an application will not start because the loaded library has the wrong version, it is very likely that you can fix this issue by inspecting and rearranging the symbolic links or specifying the correct search path (see &amp;ldquo;The dynamic loader: ld.so&amp;rdquo; below).&lt;/p&gt;
&lt;p&gt;For more information, look on the &lt;a href=&#34;https://www.man7.org/linux/man-pages/man1/ldd.1.html&#34;&gt;&lt;code&gt;ldd&lt;/code&gt; man page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://opensource.com/article/20/6/linux-libraries&#34;&gt;How to handle dynamic and static libraries in Linux | Opensource.com&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that the dynamic linker on MacOS is called &lt;code&gt;dyld&lt;/code&gt;, try &lt;code&gt;man dyld&lt;/code&gt; to check the details. Learn more: &lt;a href=&#34;https://stackoverflow.com/a/34905091/16317008&#34;&gt;https://stackoverflow.com/a/34905091/16317008&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// go build -o server main.go&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then check the shared libraries this executable file &lt;code&gt;server&lt;/code&gt; required:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# otool -L: print shared libraries used&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ otool -L server           
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;server:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	/usr/lib/libSystem.B.dylib &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;compatibility version 0.0.0, current version 0.0.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	/usr/lib/libresolv.9.dylib &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;compatibility version 0.0.0, current version 0.0.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ldd&lt;/code&gt; is on linux, on MaxOS you should use &lt;code&gt;otool&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>C 标准库 运行时库(动静态链接库) 浅析</title>
      <link>https://blog.jiyi27.com/posts/cs-basics/002-standard-library/</link>
      <pubDate>Tue, 17 Oct 2023 17:58:57 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/cs-basics/002-standard-library/</guid>
      <description>&lt;h2 id=&#34;1-iso-制定标准库规范&#34;&gt;1. ISO 制定标准库规范&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ISO/IEC&lt;/strong&gt; 制定 C 和 C++ 编程语言的标准，其中包括&lt;strong&gt;标准库&lt;/strong&gt;的规范。这些标准定义了语言的语法、语义以及标准库中包含的函数、类型和宏&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;标准库&lt;/strong&gt;是标准定义的一组函数和类型, 标准库的规范只定义了接口（即函数原型、类型定义等），而没有定义具体的实现&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;glibc&lt;/strong&gt;（GNU C Library）是 GNU 项目为 GNU 系统（包括 Linux）提供的 C 语言标准库的&lt;strong&gt;一种实现&lt;/strong&gt;, 它是 Linux 系统中最常用的 C 库, 提供了符合 ISO C 标准的函数和类型, 以及一些 Linux 特有的扩展&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MSVCRT&lt;/strong&gt;（Microsoft Visual C Runtime）是 Microsoft 为 Windows 操作系统提供的 C 和 C++ 运行时库, 其中包含了 C 语言标准库的&lt;strong&gt;一种实现&lt;/strong&gt;, 它与 Microsoft Visual Studio 编译器紧密集成，为 Windows 应用程序提供必要的运行时支持。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ISO 定义了标准库的规范, glibc 和 MSVCRT 是标准库的不同实现, 分别用于不同的操作系统（Linux 和 Windows）&lt;/p&gt;
&lt;p&gt;为什么要实现不同版本的运行时库: There are functions for memory allocation, creating threads, and input/output operations (such as those in &lt;code&gt;stdio.h&lt;/code&gt;)  in C language. All of these functions rely on system calls. Therefore, when third-party manufacturers implement the standard library of C language, they must create different versions for the different OS because each OS has its own set of system calls.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-iso-制定标准库规范&#34;&gt;1. ISO 制定标准库规范&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ISO/IEC&lt;/strong&gt; 制定 C 和 C++ 编程语言的标准，其中包括&lt;strong&gt;标准库&lt;/strong&gt;的规范。这些标准定义了语言的语法、语义以及标准库中包含的函数、类型和宏&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;标准库&lt;/strong&gt;是标准定义的一组函数和类型, 标准库的规范只定义了接口（即函数原型、类型定义等），而没有定义具体的实现&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;glibc&lt;/strong&gt;（GNU C Library）是 GNU 项目为 GNU 系统（包括 Linux）提供的 C 语言标准库的&lt;strong&gt;一种实现&lt;/strong&gt;, 它是 Linux 系统中最常用的 C 库, 提供了符合 ISO C 标准的函数和类型, 以及一些 Linux 特有的扩展&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MSVCRT&lt;/strong&gt;（Microsoft Visual C Runtime）是 Microsoft 为 Windows 操作系统提供的 C 和 C++ 运行时库, 其中包含了 C 语言标准库的&lt;strong&gt;一种实现&lt;/strong&gt;, 它与 Microsoft Visual Studio 编译器紧密集成，为 Windows 应用程序提供必要的运行时支持。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ISO 定义了标准库的规范, glibc 和 MSVCRT 是标准库的不同实现, 分别用于不同的操作系统（Linux 和 Windows）&lt;/p&gt;
&lt;p&gt;为什么要实现不同版本的运行时库: There are functions for memory allocation, creating threads, and input/output operations (such as those in &lt;code&gt;stdio.h&lt;/code&gt;)  in C language. All of these functions rely on system calls. Therefore, when third-party manufacturers implement the standard library of C language, they must create different versions for the different OS because each OS has its own set of system calls.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-运行时-runtime-库&#34;&gt;2. 运行时 (runtime) 库&lt;/h2&gt;
&lt;p&gt;运行时库分为静态链接库和动态链接库两种形式, 我们在源代码中使用 printf 时, 编译器看到的只是一个函数声明, 这些函数(比如 printf、malloc 等)的真正实现代码在运行时库文件中, 在 &lt;strong&gt;链接 阶段&lt;/strong&gt;, 链接器会把运行时库中我们用到的函数实现和我们的代码链接到一起, 然后&lt;strong&gt;生成可执行文件&lt;/strong&gt;, 有两种链接方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态链接方式：编译阶段 直接把 静态链接库文件 和obj 二进制文件链接, 生成可执行文件&lt;/li&gt;
&lt;li&gt;动态链接方式：程序运行时从动态链接库文件中加载运行时库的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;静态链接库&lt;/th&gt;
          &lt;th&gt;动态链接库&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Windows 扩展名&lt;/td&gt;
          &lt;td&gt;.lib&lt;/td&gt;
          &lt;td&gt;.dll (Dynamic Link Library)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Linux/Unix 扩展名&lt;/td&gt;
          &lt;td&gt;.a (archive)&lt;/td&gt;
          &lt;td&gt;.so (Shared Object)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;加载时机&lt;/td&gt;
          &lt;td&gt;编译时完整复制到可执行文件&lt;/td&gt;
          &lt;td&gt;程序运行时才加载&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;优点&lt;/td&gt;
          &lt;td&gt;程序独立性强，不依赖外部环境&lt;/td&gt;
          &lt;td&gt;• 可执行文件较小&lt;!-- raw HTML omitted --&gt;• 多个程序可共享同一库文件&lt;!-- raw HTML omitted --&gt;• 库文件更新不需重新编译程序&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;缺点&lt;/td&gt;
          &lt;td&gt;生成的可执行文件较大，内存占用较多&lt;/td&gt;
          &lt;td&gt;• 程序运行依赖特定动态链接库&lt;!-- raw HTML omitted --&gt;• 可能出现版本兼容性问题&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;C语言标准库示例&lt;/td&gt;
          &lt;td&gt;• Linux/Unix: libc.a&lt;!-- raw HTML omitted --&gt;• Windows: libcmt.lib&lt;/td&gt;
          &lt;td&gt;• Linux/Unix: libc.so&lt;!-- raw HTML omitted --&gt;• Windows: msvcrt.dll&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The term &lt;code&gt;library&lt;/code&gt; (runtime library) and &lt;code&gt;header&lt;/code&gt; are not same&lt;/strong&gt;. &lt;code&gt;Library&lt;/code&gt; are the implementations of the &lt;code&gt;header&lt;/code&gt;, which exist as binary files (the static library &lt;code&gt;.a&lt;/code&gt;/&lt;code&gt;.lib&lt;/code&gt; or the dynamic library &lt;code&gt;.so&lt;/code&gt;/&lt;code&gt;.dll&lt;/code&gt; ), whereas headers are &lt;code&gt;.h&lt;/code&gt; files. Therefore, we usually cannot find the source code of the implementation of C standard library, such as function &lt;code&gt;printf()&lt;/code&gt;. Because the implementation of these functions are provided as compiled binary files. But you can find the glibc&amp;rsquo;s implementation of &lt;code&gt;printf()&lt;/code&gt; on  the internet, because glibc is open source.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-libca-va-libcso&#34;&gt;3. libc.a va libc.so&lt;/h2&gt;
&lt;p&gt;The size of libc.a is &lt;code&gt;5.8 MB&lt;/code&gt; which is huge for codes, &lt;code&gt;libc.a&lt;/code&gt; is a static library, also known as a &amp;ldquo;archive&amp;rdquo; library, It contains compiled object code that gets linked into the final executable at compile time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls -lh /usr/lib/x86_64-linux-gnu/libc.a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root 5.8M Sep &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; 14:45 /usr/lib/x86_64-linux-gnu/libc.a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Don&amp;#39;t archive libc.a directly, archive it on a different folder&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ar -x libc.a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls | grep printf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;printf.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sprintf.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;为什么静态运行库里面一个目标文件只包含一个函数？比如libc.a里面printf.o只有printf()函数、strlen.o只有strlen()函数，为什么要这样组织？&lt;/p&gt;
&lt;p&gt;链接器在链接静态库的时候是以目标文件为单位的, 比如我们引用了&lt;code&gt;printf()&lt;/code&gt;函数, 如果进行静态链接的话, 那么链接器就只会把库中包含printf()函数的那个目标文件链接进来, 由于运行库有成百上千个函数, 如果把这些函数都放在一个目标文件中就会很大&amp;hellip;&lt;/p&gt;
&lt;p&gt;如果把整个链接过程比作一台计算机, 那么ld链接器就是计算机的CPU, 所有的目标文件、库文件就是输入, 链接结果输出的可执行文件就是输出, 而链接控制脚本正是这台计算机的“程序”, 它控制CPU的运行, 以“程序”要求的方式将输入加工成所须要的输出结果.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;libc.so&lt;/code&gt; is a shared library, often referred to as a &amp;ldquo;dynamic link library.&amp;rdquo; It contains compiled code that is loaded into memory at runtime, allowing multiple programs to share the same code in memory.&lt;/p&gt;
&lt;p&gt;Both &lt;code&gt;libc.a&lt;/code&gt; and &lt;code&gt;libc.so&lt;/code&gt; are implementations of the C library, but they differ in their form and how they are linked to programs.&lt;/p&gt;
&lt;p&gt;When we staticlly compile a source file, then &lt;code&gt;libc.a&lt;/code&gt; will be used at compiled time, if we dynamically compile a source file (compile with dynamically linked) then &lt;code&gt;libc.so&lt;/code&gt; will be used at runtime.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc -static -o main main.c         
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ file main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main: ELF 64-bit LSB executable, x86-64, version &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;GNU/Linux&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, statically linked, BuildID&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;sha1&lt;span style=&#34;color:#f92672&#34;&gt;]=&lt;/span&gt;7fd47f129d345aa2ef6c44b06ffa01be4174d098, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; GNU/Linux 3.2.0, not stripped
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls -lh main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwxrwxr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ubuntu ubuntu 880K Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; 00:51 main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcc -o main main.c 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ file main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main: ELF 64-bit LSB pie executable, x86-64, version &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SYSV&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;sha1&lt;span style=&#34;color:#f92672&#34;&gt;]=&lt;/span&gt;f14bf2e15cabc179d82a09a2de5bf15da6e5b75c, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; GNU/Linux 3.2.0, not stripped
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls -lh main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rwxrwxr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ubuntu ubuntu 16K Oct &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; 00:54 main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, the dynamically linked binary is very small just 1&lt;code&gt;6k&lt;/code&gt; compared with the statically linked binary &lt;code&gt;880K&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;4-glibc-vs-libc&#34;&gt;4. glibc vs libc&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;特性&lt;/th&gt;
          &lt;th&gt;libc&lt;/th&gt;
          &lt;th&gt;glibc&lt;/th&gt;
          &lt;th&gt;其他libc实现(如musl/uClibc)&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;定义&lt;/td&gt;
          &lt;td&gt;C标准库的接口规范&lt;/td&gt;
          &lt;td&gt;GNU项目开发的libc具体实现&lt;/td&gt;
          &lt;td&gt;轻量级/嵌入式场景的libc实现&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;性质&lt;/td&gt;
          &lt;td&gt;概念性称呼&lt;/td&gt;
          &lt;td&gt;实际库文件&lt;/td&gt;
          &lt;td&gt;实际库文件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;使用范围&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;Linux系统主流实现&lt;/td&gt;
          &lt;td&gt;嵌入式系统、资源受限环境&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;体积&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;较大&lt;/td&gt;
          &lt;td&gt;小巧精简&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;功能&lt;/td&gt;
          &lt;td&gt;定义基础接口&lt;/td&gt;
          &lt;td&gt;完整的功能实现，特性丰富&lt;/td&gt;
          &lt;td&gt;基础功能实现，针对性优化&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;运行环境&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;主要用于桌面和服务器&lt;/td&gt;
          &lt;td&gt;嵌入式设备、IoT设备等&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;特点&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;功能全面，向后兼容性好&lt;/td&gt;
          &lt;td&gt;启动快、内存占用小&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;5-conclusion&#34;&gt;5. Conclusion&lt;/h2&gt;
&lt;p&gt;程序如何使用操作系统提供的API(system call)? 在一般的情况下，一种语言的开发环境往往会附带有语言库（Language Library也可以说是标准库,运行时库）。这些库就是对操作系统的API的包装，比如我们经典的C语言版“Hello World”程序，它使用C语言标准库的“printf”函数来输出一个字符串，“printf”函数对字符串进行一些必要的处理以后，最后会调用操作系统提供的API。各个操作系统下，往终端输出字符串的API都不一样，在Linux下，它是一个“write”的系统调用，而在Windows下它是“WriteConsole”系统API。&lt;strong&gt;标准库函数(运行库)依赖的是system call&lt;/strong&gt;。库里面还带有那些很常用的函数，比如C语言标准库里面有很常用一个函数取得一个字符串的长度叫strlen()，该函数即遍历整个字符串后返回字符串长度，这个函数并没有调用任何操作系统的API，也没有做任何输入输出。但是很大一部分库函数(运行库)都是要调用操作系统的API的.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Any problem in computer science can be solved by another layer of indirection.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2025/01/1f35f2b6abb298af70e6c922f5be2f32.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;每个层次之间都须要相互通信，既然须要通信就必须有一个通信的协议，我们一般将其称为接口（Interface），接口的下面那层是接口的提供者，由它定义接口；接口的上面那层是接口的使用者，它使用该接口来实现所需要的功能.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;运行时库(标准库, static library, dynamic library) 依赖 system call, 它提供头文件(&lt;code&gt;stdio.h&lt;/code&gt;, &lt;code&gt;math.h&lt;/code&gt;)供我们使用. 所以它很重要, 它在应用层和操作系统中间. 我们使用它提供的接口(&lt;code&gt;printf()&lt;/code&gt;)和操作系统进行交流(通过system call).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们的软件体系中，位于最上层的是应用程序，比如我们平时用到的网络浏览器、Email客户端、多媒体播放器、图片浏览器等。从整个层次结构上来看，开发工具与应用程序是属于同一个层次的，因为它们都使用一个接口，那就是操作系统应用程序编程接口（Application Programming Interface, 就是标准库的头文件）。应用程序接口(头文件)的提供者是运行库，什么样的运行库提供什么样的API，比如Linux下的Glibc库提供POSIX的API；Windows的运行库提供Windows API，最常见的32位Windows提供的API又被称为Win32。&lt;/p&gt;
&lt;p&gt;运行库使用操作系统提供的系统调用接口（System call Interface），系统调用接口在实现中往往以软件中断（Software Interrupt）的方式提供，比如Linux使用0x80号中断作为系统调用接口，Windows使用0x2E号中断作为系统调用接口（从Windows XP Sp2开始，Windows开始采用一种新的系统调用方式）。&lt;/p&gt;
&lt;p&gt;操作系统内核层对于硬件层来说是硬件接口的使用者，而硬件是接口的定义者，硬件的接口定义决定了操作系统内核，具体来讲就是驱动程序如何操作硬件，如何与硬件进行通信。这种接口往往被叫做硬件规格（Hardware Specification），硬件的生产厂商负责提供硬件规格，操作系统和驱动程序的开发者通过阅读硬件规格文档所规定的各种硬件编程接口标准来编写操作系统和驱动程序。&lt;/p&gt;
&lt;p&gt;&amp;mdash;程序员的自我修养：链接、装载与库&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Is Multithreaded Server Better than a Single Thread Server?</title>
      <link>https://blog.jiyi27.com/posts/cs-basics/007-multithread-singlethread-server/</link>
      <pubDate>Sat, 26 Aug 2023 19:03:59 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/cs-basics/007-multithread-singlethread-server/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt; &lt;a href=&#34;https://qr.ae/pyztor&#34;&gt;https://qr.ae/pyztor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why is a multithreaded web server better than a single thread server?&lt;/em&gt; &lt;strong&gt;It isn’t.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are four basic ways how a web server can handle concurrency:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;forking an OS process per request (like old versions of Apache)&lt;/li&gt;
&lt;li&gt;spawning an OS thread per request (like a new versions of Apache)&lt;/li&gt;
&lt;li&gt;using a single-threaded event loop (like nginx)&lt;/li&gt;
&lt;li&gt;using green threads or lightweight processes scheduled by a VM runtime instead of the OS (like in Erlang)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Currently the most common approaches are number 2 and 3.&lt;/p&gt;</description>
      <content>&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt; &lt;a href=&#34;https://qr.ae/pyztor&#34;&gt;https://qr.ae/pyztor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why is a multithreaded web server better than a single thread server?&lt;/em&gt; &lt;strong&gt;It isn’t.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are four basic ways how a web server can handle concurrency:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;forking an OS process per request (like old versions of Apache)&lt;/li&gt;
&lt;li&gt;spawning an OS thread per request (like a new versions of Apache)&lt;/li&gt;
&lt;li&gt;using a single-threaded event loop (like nginx)&lt;/li&gt;
&lt;li&gt;using green threads or lightweight processes scheduled by a VM runtime instead of the OS (like in Erlang)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Currently the most common approaches are number 2 and 3.&lt;/p&gt;
&lt;p&gt;There are pros and cons of both of them. For &lt;strong&gt;I/O-bound&lt;/strong&gt; operations (a characteristic of a typical web server) you get &lt;strong&gt;better performance&lt;/strong&gt; and &lt;strong&gt;higher number of concurrent requests&lt;/strong&gt; when you use a &lt;strong&gt;single-threaded event loop&lt;/strong&gt;. But the drawback is that you need to use exclusively asynchronous non-blocking I/O for all operations or otherwise you’ll block the event loop and lose performance. For that reason it’s easier to implement a multi-threaded server but you pay in performance.&lt;/p&gt;
&lt;p&gt;For &lt;strong&gt;CPU-bound&lt;/strong&gt; operations (less common for a usual web server, maybe more common for a computationally intensive API) it’s best to have &lt;strong&gt;one OS thread or process per core&lt;/strong&gt;. It’s easy to do with single-threaded event loops because you can run a cluster of a number of processes one per core. It’s hard to do with multi-threaded servers because if spawning threads is your only way to handle concurrent requests then you cannot really control how many threads you will have - as you don’t control the number of requests. Once you have more threads than the number of CPU cores then you loose performance for &lt;strong&gt;context switches&lt;/strong&gt; and you also use a lot of RAM.&lt;/p&gt;
&lt;p&gt;That is why a &lt;strong&gt;single-threaded nginx server&lt;/strong&gt; performs better than a multi-threaded Apache web server (and that is why nginx was created in the first place). Also &lt;strong&gt;Redis&lt;/strong&gt;, a database known for exceptionally high performance is &lt;strong&gt;single-threaded&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A real example I can give you is this: My first web server was Apache running on a Linux machine with 500MB of RAM. It forked a new process for every request (it actually had a pool so there was not much forking involved but it had to keep those processes alive to reuse them and kill them once in a while to avoid resource leakage).&lt;/p&gt;
&lt;p&gt;My OS used around 100MB of RAM. Every Apache process used 20MB of RAM. It meant that my server could only handle 20 concurrent requests and there was no way around it because I had no more RAM. The processes were mostly blocked on I/O so the CPU utilization was very low, every request above those 20 had to wait and if those 20 was e.g. long running downloads then my server was completely unresponsive.&lt;/p&gt;
&lt;p&gt;When nginx web server was introduced it used a single-threaded event loop and didn’t block for any request. It could handle much more concurrent requests, having no problem with the mythical c10k problem - nginx was basically created to solve the c10k problem (10,000 concurrent requests).&lt;/p&gt;
&lt;p&gt;Imagine how much RAM is wasted for 10,000 threads if you could even spawn that many and how much time is used for context switches.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Memory usage of multi-threaded Apache vs single-threaded nginx:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2025/01/3753c8d5681b143ae824ebc3830d959d.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Incidentally, this is the reason why Ryan Dahl used a non-blocking I/O and a single-threaded event loop in Node.js and he still uses the same idea in Deno, because that is the way to write high performance network servers (contrary to what you might read in other answers here).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that &lt;a href=&#34;https://nginx.org/en/docs/ngx_core_module.html#worker_processes&#34;&gt;nginx “core functionality” doc&lt;/a&gt; mentions that on most servers nginx defaults to multiple workers (which will be ran as threads) so it’s not always “single threaded.” &lt;a href=&#34;https://www.quora.com/profile/Alex-Sergeyev&#34;&gt;from a comment of this blog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Session, JWT &amp; Cookie</title>
      <link>https://blog.jiyi27.com/posts/cs-basics/005-session-cookie/</link>
      <pubDate>Thu, 17 Aug 2023 07:39:56 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/cs-basics/005-session-cookie/</guid>
      <description>&lt;p&gt;HTTP 是一个无状态协议, 对于每个用户 HTTP 请求, 服务器无法得知上一次请求所包含的状态, 可是在淘宝的某个页面中, 你进行了登陆操作, 当你跳转到商品页时, 服务端怎么记住你登陆的状态？&lt;/p&gt;
&lt;h2 id=&#34;1-cookie&#34;&gt;1. Cookie&lt;/h2&gt;
&lt;p&gt;首先产生了 cookie 这门技术来解决这个问题, cookie 是 http 协议的一部分, 它的处理分为如下几步:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器主动向客户端发送 cookie, 通常使用 HTTP 协议规定的 &lt;code&gt;set-cookie&lt;/code&gt; 头操作&lt;/li&gt;
&lt;li&gt;客户端浏览器自动保存 Cookie&lt;/li&gt;
&lt;li&gt;每次请求浏览器都会自动将 cookie 发向服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里有个问题, 用户会访问多个网站, 浏览器会保存来自不同网站服务器的 cookie, 浏览器怎么把知道应该把 cookie 发给正确的网站?&lt;/p&gt;
&lt;p&gt;答案是浏览器使用 Cookie 的域名 (Domain) 和路径 (Path) 属性来决定将哪些 Cookie 发送回哪个网站, 其实 Cookie 不仅仅是在一个值, 它是有很多属性的, 在后端服务器可以设置, 比如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;path：表示 cookie 影响到的路径, 匹配该路径才发送这个 cookie&lt;/li&gt;
&lt;li&gt;expires 和 maxAge：expires 是 UTC 格式时间, maxAge 是 cookie 多久后过期的相对时间, 当不设置这两个选项时, cookie 默认是 transient，即当用户关闭浏览器时，就被清除&lt;/li&gt;
&lt;li&gt;secure: 仅HTTPS 中才有效&lt;/li&gt;
&lt;li&gt;httpOnly：禁止前端 JS 代码读取, 避免被 xss 攻击拿到 cookie&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;后端开发小贴士 1 ⚠️: 设置此属性前, 需要先即把格式转为 UTC 格式, 因为客户端和服务器的时区可能不一样, 比如客户端比服务器快几个小时, 若直接设置 expires = Now() + 30, 半小时后过期, 传到客户端立刻过期了, 因为客户端浏览器默认来自服务器的 cookie expires 是 UTC,&lt;/p&gt;</description>
      <content>&lt;p&gt;HTTP 是一个无状态协议, 对于每个用户 HTTP 请求, 服务器无法得知上一次请求所包含的状态, 可是在淘宝的某个页面中, 你进行了登陆操作, 当你跳转到商品页时, 服务端怎么记住你登陆的状态？&lt;/p&gt;
&lt;h2 id=&#34;1-cookie&#34;&gt;1. Cookie&lt;/h2&gt;
&lt;p&gt;首先产生了 cookie 这门技术来解决这个问题, cookie 是 http 协议的一部分, 它的处理分为如下几步:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器主动向客户端发送 cookie, 通常使用 HTTP 协议规定的 &lt;code&gt;set-cookie&lt;/code&gt; 头操作&lt;/li&gt;
&lt;li&gt;客户端浏览器自动保存 Cookie&lt;/li&gt;
&lt;li&gt;每次请求浏览器都会自动将 cookie 发向服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里有个问题, 用户会访问多个网站, 浏览器会保存来自不同网站服务器的 cookie, 浏览器怎么把知道应该把 cookie 发给正确的网站?&lt;/p&gt;
&lt;p&gt;答案是浏览器使用 Cookie 的域名 (Domain) 和路径 (Path) 属性来决定将哪些 Cookie 发送回哪个网站, 其实 Cookie 不仅仅是在一个值, 它是有很多属性的, 在后端服务器可以设置, 比如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;path：表示 cookie 影响到的路径, 匹配该路径才发送这个 cookie&lt;/li&gt;
&lt;li&gt;expires 和 maxAge：expires 是 UTC 格式时间, maxAge 是 cookie 多久后过期的相对时间, 当不设置这两个选项时, cookie 默认是 transient，即当用户关闭浏览器时，就被清除&lt;/li&gt;
&lt;li&gt;secure: 仅HTTPS 中才有效&lt;/li&gt;
&lt;li&gt;httpOnly：禁止前端 JS 代码读取, 避免被 xss 攻击拿到 cookie&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;后端开发小贴士 1 ⚠️: 设置此属性前, 需要先即把格式转为 UTC 格式, 因为客户端和服务器的时区可能不一样, 比如客户端比服务器快几个小时, 若直接设置 expires = Now() + 30, 半小时后过期, 传到客户端立刻过期了, 因为客户端浏览器默认来自服务器的 cookie expires 是 UTC,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;后端开发小贴士 2 ⚠️ : All HTTP date/time stamps MUST be represented in Greenwich Mean Time (GMT), without exception. For the purposes of HTTP, GMT is exactly equal to UTC (Coordinated Universal Time). &lt;em&gt;Both GMT and UTC display the same time&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/a/35729939/16317008&#34;&gt;Stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-session--jwt&#34;&gt;2. Session &amp;amp; JWT&lt;/h2&gt;
&lt;p&gt;Session 和 JWT 目的相同, 都是为了实现用户认证, 只不过前者在后端维护, 后者就是简单使用一个 token 来实现用户登录认证, Cookie 则是运输工具, 用来存储 Session ID 或者 JWT Token, 即: 服务器生成 Session ID 或 JWT Token, 然后把它们放到 Cookie 中, 之后每次发起请求时, 由浏览器自动发送给服务器, 实现服务器识别用户, 记住登录状态的目的,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;后端开发小贴士 3 ⚠️: Cookie 本质上是明文存储和传输的, 直接在 Cookie 中存储敏感信息（如密码、银行账号等）是非常危险的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;后端开发小贴士 4 ⚠️: Session在服务端是如何存储的呢？内存(一个多线程安全的map), Redis 缓存 (更好的横向拓展),&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;了解更多: &lt;a href=&#34;https://stackoverflow.com/a/45214431/16317008&#34;&gt;Authentication: JWT usage vs session&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Rust 引发的类型安全的思考</title>
      <link>https://blog.jiyi27.com/posts/cs-basics/003-type-safety/</link>
      <pubDate>Sat, 05 Aug 2023 18:32:53 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/cs-basics/003-type-safety/</guid>
      <description>&lt;p&gt;关于 type safety, 一直没有一个确切的定义, 每个语言的作者对 type safety 可能有不同的理解, 我比较喜欢的是维基百科对 type safety 的定义, 即 type safety 阻止或者使 type errors 不容易发生, 而什么是 type errors 在下面这段话里也给出了定义:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computer science, &lt;strong&gt;type safety&lt;/strong&gt; is the extent to which a programming language discourages or prevents &lt;strong&gt;type errors&lt;/strong&gt;. The behaviors classified as type errors are usually that result from attempts to perform operations on values that are not of the appropriate data type, e.g., &lt;strong&gt;adding a string to an integer when there&amp;rsquo;s no definition on how to handle this case&lt;/strong&gt;. This classification is partly based on opinion. &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_safety&#34;&gt;https://en.wikipedia.org/wiki/Type_safety&lt;/a&gt;&lt;/p&gt;</description>
      <content>&lt;p&gt;关于 type safety, 一直没有一个确切的定义, 每个语言的作者对 type safety 可能有不同的理解, 我比较喜欢的是维基百科对 type safety 的定义, 即 type safety 阻止或者使 type errors 不容易发生, 而什么是 type errors 在下面这段话里也给出了定义:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computer science, &lt;strong&gt;type safety&lt;/strong&gt; is the extent to which a programming language discourages or prevents &lt;strong&gt;type errors&lt;/strong&gt;. The behaviors classified as type errors are usually that result from attempts to perform operations on values that are not of the appropriate data type, e.g., &lt;strong&gt;adding a string to an integer when there&amp;rsquo;s no definition on how to handle this case&lt;/strong&gt;. This classification is partly based on opinion. &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_safety&#34;&gt;https://en.wikipedia.org/wiki/Type_safety&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;感觉维基百科对类型安全的定义与 Why Rust 一书的作者观点不谋而合:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If a program has been written so that no possible execution can exhibit undefined behavior, we say that program is well defined. If a language’s type system ensures that every program is well defined, we say that language is type safe.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;undefined behavior: 在 c99 的定义中, undefined behaviors 有很多: 如分母为 0, 访问超出数组大小的位置 (c 是没有越界检查的), 让一个int能表示的最大数加一,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7ffff7b36cebUL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;According to C99, because this program accesses an element off the end of the array &lt;code&gt;a&lt;/code&gt;, its behavior is undefined, meaning that it can do anything whatsoever.&lt;/p&gt;
&lt;p&gt;A carefully written C or C++ program might be well defined, but C and C++ are not type safe: the program shown earlier has no type errors, yet exhibits undefined behavior. By contrast, Python is type safe. Python is willing to spend processor time to detect and handle out-of-range array indices in a friendlier fashion than C:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x7ffff7b36ceb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Traceback &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;most recent call last&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;&lt;/span&gt;, line 1, in &amp;lt;module&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IndexError: list assignment index out of range
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Python raised an exception, which is not undefined behavior: the Python documentation specifies that the assignment to &lt;code&gt;a[3]&lt;/code&gt; should raise an &lt;code&gt;IndexError&lt;/code&gt; exception, as we saw. Certainly, a module like &lt;code&gt;ctypes&lt;/code&gt; that provides unconstrained access to the machine can introduce undefined behavior into Python, but the core language itself is type safe. Java, JavaScript, Ruby, and Haskell are similar in this way.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that being type safe is independent of whether a language checks types at compile time or at runtime: C checks at compile time, and is not type safe; Python checks at runtime, and is type safe.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上讨论来自: &lt;a href=&#34;https://www.oreilly.com/library/view/programming-rust/9781491927274/ch01.html&#34;&gt;Why Rust Chapter 1&lt;/a&gt; , 感兴趣可以自己翻阅,&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>ssh 免密登陆 中间人攻击 网络安全</title>
      <link>https://blog.jiyi27.com/posts/cs-basics/004-ssh/</link>
      <pubDate>Sat, 03 Jun 2023 17:14:27 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/cs-basics/004-ssh/</guid>
      <description>&lt;h3 id=&#34;1-ssh-应对中间人攻击的方法&#34;&gt;1. SSH 应对中间人攻击的方法&lt;/h3&gt;
&lt;p&gt;SSH 采用了公钥加密, 过程如下：&lt;/p&gt;
&lt;p&gt;（1）Remote Host 收到用户的登录请求, 把自己的公钥发给用户&lt;/p&gt;
&lt;p&gt;（2）用户使用这个公钥, 将登录密码加密后, 发送过去&lt;/p&gt;
&lt;p&gt;（3）Remote Host 用自己的私钥, 解密信息, 验证密码是否正确&lt;/p&gt;
&lt;p&gt;这个过程存在一个漏洞：如果有人截获了用户的登录请求，然后冒充 Remote Host，将伪造的公钥发给用户，那么用户很难辨别真伪。这就是 Man-in-the-middle attack, 应对方法有两种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用公钥指纹人工进行对比验证,&lt;/li&gt;
&lt;li&gt;上传公钥实现免密登录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我们一一介绍这两种方法,&lt;/p&gt;
&lt;h2 id=&#34;2-利用公钥指纹人工进行对比验证&#34;&gt;2. 利用公钥指纹人工进行对比验证&lt;/h2&gt;
&lt;p&gt;看来面的例子, 在Mac上通过ssh连接远程的服务器, 第一次连接的时候会问下面提示:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh root@144.202.16.29        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The authenticity of host &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;144.202.16.29 (144.202.16.29)&amp;#39;&lt;/span&gt; can&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t be established.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ED25519 key fingerprint is SHA256:sa5vDYS0yhdMRXO6CgMrp9AcQoVQRiDw6TnzTKesnzQ.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This key is not known by any other names
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Are you sure you want to &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt; connecting &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;yes/no/&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;fingerprint&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt;? yes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;....
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是 ssh 在提醒它无法确认 remost host 是不是就是你要连接的那个主机, 因为可能会发生中间人攻击嘛, 但知道它的公钥指纹是&lt;code&gt;sa5vDYS0...&lt;/code&gt;, 问我们还要继续连接吗 (注意单词 establish 在这是 “认证确认” 的意思),&lt;/p&gt;</description>
      <content>&lt;h3 id=&#34;1-ssh-应对中间人攻击的方法&#34;&gt;1. SSH 应对中间人攻击的方法&lt;/h3&gt;
&lt;p&gt;SSH 采用了公钥加密, 过程如下：&lt;/p&gt;
&lt;p&gt;（1）Remote Host 收到用户的登录请求, 把自己的公钥发给用户&lt;/p&gt;
&lt;p&gt;（2）用户使用这个公钥, 将登录密码加密后, 发送过去&lt;/p&gt;
&lt;p&gt;（3）Remote Host 用自己的私钥, 解密信息, 验证密码是否正确&lt;/p&gt;
&lt;p&gt;这个过程存在一个漏洞：如果有人截获了用户的登录请求，然后冒充 Remote Host，将伪造的公钥发给用户，那么用户很难辨别真伪。这就是 Man-in-the-middle attack, 应对方法有两种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用公钥指纹人工进行对比验证,&lt;/li&gt;
&lt;li&gt;上传公钥实现免密登录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我们一一介绍这两种方法,&lt;/p&gt;
&lt;h2 id=&#34;2-利用公钥指纹人工进行对比验证&#34;&gt;2. 利用公钥指纹人工进行对比验证&lt;/h2&gt;
&lt;p&gt;看来面的例子, 在Mac上通过ssh连接远程的服务器, 第一次连接的时候会问下面提示:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh root@144.202.16.29        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The authenticity of host &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;144.202.16.29 (144.202.16.29)&amp;#39;&lt;/span&gt; can&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t be established.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ED25519 key fingerprint is SHA256:sa5vDYS0yhdMRXO6CgMrp9AcQoVQRiDw6TnzTKesnzQ.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This key is not known by any other names
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Are you sure you want to &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt; connecting &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;yes/no/&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;fingerprint&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt;? yes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;....
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是 ssh 在提醒它无法确认 remost host 是不是就是你要连接的那个主机, 因为可能会发生中间人攻击嘛, 但知道它的公钥指纹是&lt;code&gt;sa5vDYS0...&lt;/code&gt;, 问我们还要继续连接吗 (注意单词 establish 在这是 “认证确认” 的意思),&lt;/p&gt;
&lt;p&gt;那我们怎么知道远程主机的公钥指纹应该是多少？当然是去你的服务器上查看公钥指纹:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@vultr ssh&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ssh-keygen -lf /etc/ssh/ssh_host_ed25519_key.pub&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; SHA256:sa5vDYS0yhdMRXO6CgMrp9AcQoVQRiDw6TnzTKesnzQ root@vultr.guest &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ED25519&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意如果你的服务器使用的是其他hash function生成的公钥指纹, 那你就要查看其他文件了:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-keygen -E md5 -lf /etc/ssh/ssh_host_ed25519_key.pub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以发现输出内容与上面 ssh 警告的指纹相同, 所以我们要来接的这个是我们的真正主机,&lt;/p&gt;
&lt;p&gt;可能有人会说, 那我们买的服务器物理主机在谷歌阿里, 怎么去直接验证?  你可以在你购买VPS的网站上连接自己服务器保证你连接的一定是你的主机, 但我们只是测试, 所以你直接忽略 ssh 的提示警告, 输入yes, 连上服务器后去验证一下就好了, 因为肯定不会有中间人闲的蛋疼来攻击我们的连接吧? 几块钱一个月的服务器, 谁来攻击你,&lt;/p&gt;
&lt;p&gt;有人可能又会疑问, 那我们也可以直接去远程主机查看他的公钥啊, 为啥还要用个hash函数来生成它的指纹, 再去比对, 不是多此一举吗? 首先你没发现公钥的指纹很短吗? 我们去远程主机验证一般是用肉眼来比对吧, 那公钥那么长, 几百个字符, 很容易比对错, 而公钥指纹的主要目的就在于它很短, 方便我们比对,&lt;/p&gt;
&lt;p&gt;最后关于 ssh 输出的信息, 还有其它想说的, 根据输出:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh root@144.202.16.29        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The authenticity of host &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;144.202.16.29 (144.202.16.29)&amp;#39;&lt;/span&gt; can&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t be established.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ED25519 key fingerprint is SHA256:sa5vDYS0yhdMRXO6CgMrp9AcQoVQRiDw6TnzTKesnzQ.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该 remote host 上的 ssh 使用的公私钥是由 ED25519 算法生成的, ED25519 是非对称加密算法, 常见的非对称加密算法还有 RSA, 所以 RSA 和 ED25519 是并列的: Today, the RSA is the most widely used public-key algorithm for SSH key. But compared to Ed25519, it&amp;rsquo;s slower and even considered not safe if it&amp;rsquo;s generated with the key smaller than 2048-bit length. EdDSA is a digital signature scheme, Ed25519 is the EdDSA signature scheme using SHA-512 (SHA-2) and Curve25519. &amp;ndash;Wiki&lt;/p&gt;
&lt;p&gt;另外, 该公钥指纹是由 SHA256 hash function 生成的, 另外常见的 hash function 还有md5,&lt;/p&gt;
&lt;h3 id=&#34;21-验证公私钥位置&#34;&gt;2.1. 验证公私钥位置&lt;/h3&gt;
&lt;p&gt;这个时候我们在电脑终端输入yes, 然后就会提示输入密码 (比如root用户对应的密码), 然后系统会提示如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Warning: Permanently added &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;144.202.16.29&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ED25519&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; to the list of known hosts.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@144.202.16.29&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;s password: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Last login: Fri Apr  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; 20:36:06 &lt;span style=&#34;color:#ae81ff&#34;&gt;2023&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@vultr ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ls&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当远程主机的公钥被接受以后, 它会被保存在文件&lt;code&gt;~/.ssh/known_hosts&lt;/code&gt;之中, 下次再连接这台主机, 系统就会认出它的公钥已经保存在本地了, 从而跳过警告部分, 直接提示输入密码, 我们来查看Mac上的输出:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ls ~/.ssh 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;id_rsa          id_rsa.pub      known_hosts     known_hosts.old
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat ~/.ssh/known_hosts 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;github.com ssh-ed25519 AAAAC3NzaC1lZDI1N...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;github.com ecdsa-sha2-nistp256 AAAAE2VjZH....
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;github.com ssh-rsa AAAAB3NzaC1yc2EAAAADA....
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;144.202.16.29 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOpG35RMxOKeeLbTfdWlPgToThzrm00sRpMRQs+pdYig
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;144.202.16.29 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHP5xEl1122X1Vtc5LzqMp6vlvd4cHRD151ag61xXThvT7KM9vuUK23ol4LKoXMoivUH1SAcWandumVKG37zZfA&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再看看服务器上的输出,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@vultr ssh&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ls /etc/ssh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;moduli            ssh_host_dsa_key.pub    ssh_host_ed25519_key.pub
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh_config        ssh_host_ecdsa_key      ssh_host_rsa_key
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sshd_config       ssh_host_ecdsa_key.pub  ssh_host_rsa_key.pub
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh_host_dsa_key  ssh_host_ed25519_key
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@vultr ssh&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat ssh_host_ed25519_key.pub &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOpG35RMxOKeeLbTfdWlPgToThzrm00sRpMRQs+pdYig root@vultr.guest
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@vultr ssh&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat ssh_host_ecdsa_key.pub &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHP5xEl1122X1Vtc5LzqMp6vlvd4cHRD151ag61xXThvT7KM9vuUK23ol4LKoXMoivUH1SAcWandumVKG37zZfA&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root@vultr.guest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这两个一个是公钥, 一个是公钥的指纹, 可以看出和上面Mac的存储的内容是一样, 然后上面在服务器 &lt;code&gt;ls /etc/ssh&lt;/code&gt; 的输出, 有 &lt;code&gt;ssh_host_rsa_key.pub&lt;/code&gt;, &lt;code&gt;ssh_host_ecdsa_key.pub&lt;/code&gt; 这就是使用不同的算法产生的不同的key,&lt;/p&gt;
&lt;p&gt;最后 Mac 上 &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt; 的输出 github 那部分有 ssh-ed25519, ecdsa-sha2-nistp256, 这是什么呢?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For &lt;code&gt;ssh-ed25519&lt;/code&gt; and &lt;code&gt;ecdsa-sha2-nistp256&lt;/code&gt; which one is used for a given connection depends on the capabilities and preferences of the client, namely your ssh program. If you are using &lt;code&gt;OpenSSH&lt;/code&gt; versions 6.5 to 8.1, then it prefers &lt;code&gt;ecdsa&lt;/code&gt; then &lt;code&gt;ed25519&lt;/code&gt;, and only 8.2 up prefers &lt;code&gt;ed25519&lt;/code&gt; first. &lt;a href=&#34;https://superuser.com/questions/1688106/why-does-github-recommend-ed25519-ssh-key-encryption-scheme-but-itself-uses-ecd&#34;&gt;Why does GitHub recommend ed25519 SSH key encryption scheme, but itself uses ECDSA? - Super User&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ecdsa-sha2-nistp256: Specifies the ECDSA algorithm with 256-bit key strength&lt;/li&gt;
&lt;li&gt;rsa: Specifies the public key algorithm rsa&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-public-key-authentication-上传公钥实现免密登陆&#34;&gt;3. Public Key Authentication (上传公钥实现免密登陆)&lt;/h2&gt;
&lt;h3 id=&#34;31-过程分析&#34;&gt;3.1. 过程分析&lt;/h3&gt;
&lt;p&gt;使用密码登录, 每次都必须输入密码, 非常麻烦, 好在SSH还提供了公钥登录, 可以省去输入密码的步骤, 具体验证过程如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The client generates a public/private key pair, typically with RSA or ECC. The client keeps the private key secret and registers the public key with the SSH server.&lt;/li&gt;
&lt;li&gt;When the client connects to the server, the server authenticates the client by checking if it has the corresponding public key registered for that client.&lt;/li&gt;
&lt;li&gt;The server will send a challenge message to the client, requesting authentication.&lt;/li&gt;
&lt;li&gt;The client will take the challenge message and use its private key to generate a digital signature. This proves that the client has the correct private key without revealing the key itself.&lt;/li&gt;
&lt;li&gt;The client sends the digital signature back to the server as a response to the challenge.&lt;/li&gt;
&lt;li&gt;The server verifies the signature using the client&amp;rsquo;s registered public key. If the signature is validated, the server knows the client has proven possession of the corresponding private key and grants it access.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意关于验证过程, 不同 ssh 版本可能会有不同的实现, 你可能会看到有人说远程主机用 用户的公钥进行解密验证, 其实公钥并不可以用来解密, 别人指的应该是公钥可以用来验证数字签名, 即这种情况下私钥加密其实应该是私钥签名。 私钥 “加密” 以后，谁用公钥都可以打开，就已经失去了加密的意义，所以它只能起到一个“签名”的效果，来达到-大家知道这条信息是我，而且只有我发出的。&lt;/p&gt;
&lt;p&gt;记住公钥只能用来加密, 不可以用来解密, 不然就不叫公钥了, 所以是远程主机用 用户的公钥进行用户的验证数字签名, 总结公钥有俩功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加密&lt;/li&gt;
&lt;li&gt;验证数字签名&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-具体操作&#34;&gt;3.2. 具体操作&lt;/h3&gt;
&lt;p&gt;远程主机需要使用用户的公钥来验证用户的身份, 所以&lt;strong&gt;本地机器&lt;/strong&gt;要生成公私钥:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# generate ssh keys&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ssh-keygen
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一路回车之后在&lt;code&gt;~/.ssh/&lt;/code&gt;会新生成两个文件：&lt;code&gt;id_rsa.pub&lt;/code&gt;和&lt;code&gt;id_rsa&lt;/code&gt;, 前者是你的公钥, 后者是你的私钥, 这时再输入下面的命令, 将公钥传送到远程主机host上面:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ssh-copy-id root@144.202.16.29
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成, 之后再登录就不需要输入密码了:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ssh root@144.202.16.29
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;其实你也可以直接编辑远程主机 &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; 文件, 把你本地主机的公钥的内容添加进去就行了, &lt;code&gt;ssh-copy-id root@144.202.16.29&lt;/code&gt; 做的就是这件事. 下面我们会验证.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;4-authorized_keys-file&#34;&gt;4. &lt;code&gt;authorized_keys&lt;/code&gt; file&lt;/h2&gt;
&lt;p&gt;上面 &lt;code&gt;ssh-copy-id root@144.202.16.29&lt;/code&gt; 执行后, 本机公钥存储在了远程主机&lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@vultr ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ls -a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.   .bash_history  .bash_profile  .cache  .pki  .tcshrc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;..  .bash_logout   .bashrc        .cshrc  .ssh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@vultr ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat .ssh/authorized_keys &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDvbHLCIxxUDDqktbqdrICPa+JDd3kEyowKpy9igugi7R+f/94UDBDJLmeu+K8wi90pjwq+mTM6bSPXBkjmYGibCPbUKk7RtrVx5FdR488PR7/ptMqQXJeQeMOIXvK2Lfnzay+rH5Fg/8z1+pd7cuHPq0bWm5LroGq+bYXVTIYgjKC5NDxPbQCY7zd4c0L+SvxlwqrJFvRBZKY41UBLywtuM8geluLWaGcbikX1K2hFVcZ7ETogG7eqdRBtbfx+JxhyRY1Od+snM88CSfuQkOgs4xQli3GrGttgY0f8BA65/pbixG9gAPkacEkexS997iuTP9BmwLmwWq1pw91c0yEQO1JnsbGHj/YfRhBV6s4FL8n5uVC0My64tisqA+8eZTeld8Zwem4XQGjoqwt2HYy1YXv0kOU8NyI0EGDz3fmqER3ex0cL+MqvWf/cnWQ6MRvGI3w/gL3+V8ueZv5qXpnY+ZH2UcrqEv7Xl74fkdqPYo53ySLQ9ZCiCitHgMjl3bk&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shwezu@qq.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在Mac上查看我自己的公钥, 是一样的:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat id_rsa.pub &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDvbHLCIxxUDDqktbqdrICPa+JDd3kEyowKpy9igugi7R+f/94UDBDJLmeu+K8wi90pjwq+mTM6bSPXBkjmYGibCPbUKk7RtrVx5FdR488PR7/ptMqQXJeQeMOIXvK2Lfnzay+rH5Fg/8z1+pd7cuHPq0bWm5LroGq+bYXVTIYgjKC5NDxPbQCY7zd4c0L+SvxlwqrJFvRBZKY41UBLywtuM8geluLWaGcbikX1K2hFVcZ7ETogG7eqdRBtbfx+JxhyRY1Od+snM88CSfuQkOgs4xQli3GrGttgY0f8BA65/pbixG9gAPkacEkexS997iuTP9BmwLmwWq1pw91c0yEQO1JnsbGHj/YfRhBV6s4FL8n5uVC0My64tisqA+8eZTeld8Zwem4XQGjoqwt2HYy1YXv0kOU8NyI0EGDz3fmqER3ex0cL+MqvWf/cnWQ6MRvGI3w/gL3+V8ueZv5qXpnY+ZH2UcrqEv7Xl74fkdqPYo53ySLQ9ZCiCitHgMjl3bk&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shwezu@qq.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5-ssh_config-vs-sshd_config-file&#34;&gt;5. &lt;code&gt;ssh_config&lt;/code&gt; vs &lt;code&gt;sshd_config&lt;/code&gt; file&lt;/h2&gt;
&lt;p&gt;I would like to change my SSH port running Linux CentOS 6. I also noticed there&amp;rsquo;s an &lt;code&gt;/etc/ssh_config&lt;/code&gt; file along with &lt;code&gt;/etc/sshd_config&lt;/code&gt;. What&amp;rsquo;s the difference between the two? Should I change both?&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;sshd_config&lt;/code&gt; is the ssh &lt;em&gt;&lt;strong&gt;daemon&lt;/strong&gt;&lt;/em&gt; (or ssh server process) configuration file. As you&amp;rsquo;ve already stated, this is the file you&amp;rsquo;ll need to modify to change the server port.&lt;/p&gt;
&lt;p&gt;Whereas, the &lt;code&gt;ssh_config&lt;/code&gt; file is the ssh &lt;em&gt;&lt;strong&gt;client&lt;/strong&gt;&lt;/em&gt; configuration file. The client configuration file only has bearing on when you use the &lt;code&gt;ssh&lt;/code&gt; command to connect to another ssh host. So, in this case, you don&amp;rsquo;t need to modify it. It will be &lt;em&gt;other&lt;/em&gt; client machines connecting to your server.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://serverfault.com/questions/343533/changing-ssh-port-should-i-modify-only-sshd-config-or-also-ssh-config&#34;&gt;Should I modify only sshd_config, or also ssh_config?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/EdDSA&#34;&gt;https://en.wikipedia.org/wiki/EdDSA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Digital_signature&#34;&gt;https://en.wikipedia.org/wiki/Digital_signature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://superuser.com/a/1688126&#34;&gt;https://superuser.com/a/1688126&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://security.stackexchange.com/questions/230708/should-i-be-using-ecdsa-keys-instead-of-rsa&#34;&gt;https://security.stackexchange.com/questions/230708/should-i-be-using-ecdsa-keys-instead-of-rsa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&#34;&gt;Man-in-the-middle attack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitlaunch.io/blog/how-to-check-your-ssh-key-fingerprint/&#34;&gt;How to check your SSH key fingerprint (verify the authenticity of the remote host)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>编码和乱码 UTF-8 Unicode</title>
      <link>https://blog.jiyi27.com/posts/cs-basics/001-encoding/</link>
      <pubDate>Thu, 01 Jun 2023 22:13:25 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/cs-basics/001-encoding/</guid>
      <description>&lt;p&gt;编码问题很常见, 有时候读文件打开是乱码, 有的语言说自己字符串采用unicode表示字符, 可又来utf-8编码, 这都是什么?&lt;/p&gt;
&lt;h2 id=&#34;1-编码和乱码-unicode-vs-ascii&#34;&gt;1. 编码和乱码 (unicode vs ascii)&lt;/h2&gt;
&lt;p&gt;电脑只能看懂二进制数, 所以得想办法把人类语言用二进制表示, 这就是编码的目的. ASCII 规定数字&lt;code&gt;65&lt;/code&gt;代表字符&lt;code&gt;A&lt;/code&gt;, &lt;code&gt;66&lt;/code&gt;代表字符&lt;code&gt;B&lt;/code&gt;依次类推, 所以ASCII表就是一个map, 每个字符对应一个数, &lt;strong&gt;把字符按照预定规则对应到数字的过程就叫编码&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;到后来计算机普及, 全世界都使用不同语言, 出现了问题, 比如我们用&lt;code&gt;36&lt;/code&gt;代表汉字&lt;code&gt;牛&lt;/code&gt;, 韩国说用&lt;code&gt;36&lt;/code&gt;代表字符&lt;code&gt;&amp;amp;&lt;/code&gt;, 当我输入&lt;code&gt;牛&lt;/code&gt;, 软件就把&lt;code&gt;0010 0100&lt;/code&gt;存入磁盘, 然后我把文件传给韩国的朋友, 他们的程序认为&lt;code&gt;36&lt;/code&gt;即&lt;code&gt;0010 0100&lt;/code&gt;代表&lt;code&gt;&amp;amp;&lt;/code&gt;, 这就产生了乱码: &lt;strong&gt;软件尝试使用与文件编码不同的编码方式来解码文件&lt;/strong&gt;,&lt;/p&gt;
&lt;p&gt;所以我们需要一个新的标准, 可以涵盖全世界字符的那种, 然后所有软件都遵守这个标准, 这样才能无差错沟通, 我发送一串二进制在我这代表字符&lt;code&gt;A&lt;/code&gt;, 你的软件收到这串二进制后翻译出的也是字符&lt;code&gt;A&lt;/code&gt;, 而不是&lt;code&gt;B&lt;/code&gt;或&lt;code&gt;C&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;这时候 Unicode 就出来了, 它就是使用&lt;code&gt;0~0x10FFFF&lt;/code&gt;的数字来表示世界上所有的字符, 如汉字 &lt;code&gt;在&lt;/code&gt; 的Unicode值是 &lt;code&gt;0x5728&lt;/code&gt;, 注意&lt;code&gt;0x&lt;/code&gt;代表值&lt;code&gt;5728&lt;/code&gt;是十六进制, 又如字符 &lt;code&gt;A&lt;/code&gt; 的Unicode值是&lt;code&gt;0x41&lt;/code&gt;, 这里说一下, Unicode表示的字符里英文字符的值和ASCII表是相同的,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unicode 和 ASCII 都是字符集, 但是 ASCII 只包含 128 个字符, 而 Unicode 包含很多很多个字符.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-unicode-vs-utf-8-vs-utf-16&#34;&gt;2. Unicode vs UTF-8 vs UTF-16&lt;/h2&gt;
&lt;h3 id=&#34;21-unicode&#34;&gt;2.1. Unicode&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;定义和目的&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;Unicode 是一个国际标准，用于不同系统和程序间统一表示文本数据。&lt;/li&gt;
&lt;li&gt;它为世界上几乎所有的字符和文本符号分配了唯一的 code point。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Unicode standard describes how characters are represented by &lt;strong&gt;code points&lt;/strong&gt;. A code point value is an integer in the range 0 to 0x10FFFF. In the standard and in this document, a code point is written using the notation &lt;code&gt;U+265E&lt;/code&gt; to mean the character with value &lt;code&gt;0x265e&lt;/code&gt; (9,822 in decimal).&lt;/p&gt;</description>
      <content>&lt;p&gt;编码问题很常见, 有时候读文件打开是乱码, 有的语言说自己字符串采用unicode表示字符, 可又来utf-8编码, 这都是什么?&lt;/p&gt;
&lt;h2 id=&#34;1-编码和乱码-unicode-vs-ascii&#34;&gt;1. 编码和乱码 (unicode vs ascii)&lt;/h2&gt;
&lt;p&gt;电脑只能看懂二进制数, 所以得想办法把人类语言用二进制表示, 这就是编码的目的. ASCII 规定数字&lt;code&gt;65&lt;/code&gt;代表字符&lt;code&gt;A&lt;/code&gt;, &lt;code&gt;66&lt;/code&gt;代表字符&lt;code&gt;B&lt;/code&gt;依次类推, 所以ASCII表就是一个map, 每个字符对应一个数, &lt;strong&gt;把字符按照预定规则对应到数字的过程就叫编码&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;到后来计算机普及, 全世界都使用不同语言, 出现了问题, 比如我们用&lt;code&gt;36&lt;/code&gt;代表汉字&lt;code&gt;牛&lt;/code&gt;, 韩国说用&lt;code&gt;36&lt;/code&gt;代表字符&lt;code&gt;&amp;amp;&lt;/code&gt;, 当我输入&lt;code&gt;牛&lt;/code&gt;, 软件就把&lt;code&gt;0010 0100&lt;/code&gt;存入磁盘, 然后我把文件传给韩国的朋友, 他们的程序认为&lt;code&gt;36&lt;/code&gt;即&lt;code&gt;0010 0100&lt;/code&gt;代表&lt;code&gt;&amp;amp;&lt;/code&gt;, 这就产生了乱码: &lt;strong&gt;软件尝试使用与文件编码不同的编码方式来解码文件&lt;/strong&gt;,&lt;/p&gt;
&lt;p&gt;所以我们需要一个新的标准, 可以涵盖全世界字符的那种, 然后所有软件都遵守这个标准, 这样才能无差错沟通, 我发送一串二进制在我这代表字符&lt;code&gt;A&lt;/code&gt;, 你的软件收到这串二进制后翻译出的也是字符&lt;code&gt;A&lt;/code&gt;, 而不是&lt;code&gt;B&lt;/code&gt;或&lt;code&gt;C&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;这时候 Unicode 就出来了, 它就是使用&lt;code&gt;0~0x10FFFF&lt;/code&gt;的数字来表示世界上所有的字符, 如汉字 &lt;code&gt;在&lt;/code&gt; 的Unicode值是 &lt;code&gt;0x5728&lt;/code&gt;, 注意&lt;code&gt;0x&lt;/code&gt;代表值&lt;code&gt;5728&lt;/code&gt;是十六进制, 又如字符 &lt;code&gt;A&lt;/code&gt; 的Unicode值是&lt;code&gt;0x41&lt;/code&gt;, 这里说一下, Unicode表示的字符里英文字符的值和ASCII表是相同的,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unicode 和 ASCII 都是字符集, 但是 ASCII 只包含 128 个字符, 而 Unicode 包含很多很多个字符.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-unicode-vs-utf-8-vs-utf-16&#34;&gt;2. Unicode vs UTF-8 vs UTF-16&lt;/h2&gt;
&lt;h3 id=&#34;21-unicode&#34;&gt;2.1. Unicode&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;定义和目的&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;Unicode 是一个国际标准，用于不同系统和程序间统一表示文本数据。&lt;/li&gt;
&lt;li&gt;它为世界上几乎所有的字符和文本符号分配了唯一的 code point。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Unicode standard describes how characters are represented by &lt;strong&gt;code points&lt;/strong&gt;. A code point value is an integer in the range 0 to 0x10FFFF. In the standard and in this document, a code point is written using the notation &lt;code&gt;U+265E&lt;/code&gt; to mean the character with value &lt;code&gt;0x265e&lt;/code&gt; (9,822 in decimal).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code point 范围&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从 &lt;code&gt;U+0000&lt;/code&gt; 到 &lt;code&gt;U+10FFFF&lt;/code&gt;，包括了超过 100,000 个字符。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;重点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unicode 是字符集（character set），定义了字符和 code point 之间的映射，但不规定具体如何在计算机中存储这些code point。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;22-utf-8&#34;&gt;2.2. UTF-8&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定义和特点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UTF-8（8-bit Unicode Transformation Format）是一种对 Unicode code point 进行编码的方式。&lt;/li&gt;
&lt;li&gt;它是一种可变长度的字符编码方法，使用 1 到 4 个字节来表示一个 Unicode code point。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;兼容性好，ASCII 编码的字符在 UTF-8 中保持单字节形式，与传统 ASCII 编码兼容。&lt;/li&gt;
&lt;li&gt;在存储英文文本时空间效率高。因为英文字符在 UTF-8 中只占用 1 个字节。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;23-utf-16&#34;&gt;2.3. UTF-16&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定义和特点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UTF-16（16-bit Unicode Transformation Format）是另一种对 Unicode code point进行编码的格式。&lt;/li&gt;
&lt;li&gt;使用 2 个或 4 个字节来表示一个 Unicode code point。&lt;/li&gt;
&lt;li&gt;在UTF-16中，字符可以用一个或两个16位的 &lt;strong&gt;code units&lt;/strong&gt; 来表示.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;特性&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在处理某些语言（如中文、日文、韩文）时可能比 UTF-8 更加空间高效。&lt;/li&gt;
&lt;li&gt;因为多数汉字在 UTF-16 中只占用 2 个字节。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;24-主要区别&#34;&gt;2.4. 主要区别&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;编码长度&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;UTF-8 是可变长度的，从 1 到 4 个字节不等。&lt;/li&gt;
&lt;li&gt;UTF-16 通常使用 2 个或 4 个字节。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;兼容性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;UTF-8 与传统 ASCII 编码完全兼容。&lt;/li&gt;
&lt;li&gt;UTF-16 与 ASCII 不兼容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;空间效率&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;对于主要包含 ASCII 字符的文本，UTF-8 更加高效。&lt;/li&gt;
&lt;li&gt;对于包含大量非西方字符的文本，UTF-16 可能更加高效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总的来说，Unicode 是一个广泛的字符集，定义了全球各种字符的 code point。而 UTF-8 和 UTF-16 是这些code point在计算机存储和传输中的具体编码实现方式。选择哪种编码方式取决于特定的应用场景和空间效率需求。&lt;/p&gt;
&lt;p&gt;关于 utf-8 这里举个例子, 汉字&lt;code&gt;汉&lt;/code&gt;的Unicode值是两字节即 &lt;code&gt;6C49&lt;/code&gt;, 二进制为: &lt;code&gt;0110 1100 0100 1001&lt;/code&gt;, 因为 utf-8 规定汉字占 3 字节, 因此选择第三行进行编码, 根据上标经过utf-8编码变成 &lt;code&gt;11100110 10110001 10001001&lt;/code&gt;,  因此最终写入文件的是其三字节的 utf-8 encoding &lt;code&gt;11100110 10110001 10001001&lt;/code&gt;, 而不是其Unicode &lt;code&gt;0110 1100 0100 1001&lt;/code&gt; , 可以使用 &lt;code&gt;xxd&lt;/code&gt; 查看文件的16进制内容,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ xxd text.md
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000: e6b1 &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ file text.md
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;text.md: Unicode text, UTF-8 text
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;e6b1 89&lt;/code&gt;  = &lt;code&gt;11100110 10110001 10001001&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Binary&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sequence&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;st&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Byte&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nd&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Byte&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rd&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Byte&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;th&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Byte&lt;/span&gt;    Number &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Free&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Bits&lt;/span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;Maximum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Expressible&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Unicode&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xxxxxxx&lt;/span&gt;                                                &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;             &lt;span style=&#34;color:#ae81ff&#34;&gt;007&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;F&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hex&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xxxxx&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xxxxxx&lt;/span&gt;                                (&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FF&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hex&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2047&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1110&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xxxx&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xxxxxx&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xxxxxx&lt;/span&gt;                  (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;FFFF&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hex&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;65535&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11110&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xxx&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xxxxxx&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xxxxxx&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xxxxxx&lt;/span&gt;    (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FFFF&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hex&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;读到&lt;a href=&#34;http://www.imkevinyang.com/2010/06/%E5%85%B3%E4%BA%8E%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%EF%BC%8C%E4%BD%A0%E6%89%80%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84.html&#34;&gt;一篇文章&lt;/a&gt;总结的很好 分享片段:&lt;/p&gt;
&lt;p&gt;在Unicode出现之前，所有的字符集都是和具体编码方案绑定在一起的，都是直接将字符和最终字节流绑定死了，例如ASCII编码系统规定使用7比特来编码ASCII字符集；GB2312以及GBK字符集，限定了使用最多2个字节来编码所有字符，并且规定了字节序。这样的编码系统通常用简单的查表，也就是通过代码页就可以直接将字符映射为存储设备上的字节流了。例如下面这个例子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/001-encoding/a.png&#34; alt=&#34;a&#34;&gt;&lt;/p&gt;
&lt;p&gt;这种方式的缺点在于，字符和字节流之间耦合得太紧密了，从而限定了字符集的扩展能力。假设以后火星人入住地球了，要往现有字符集中加入火星文就变得很难甚至不可能了，而且很容易破坏现有的编码规则。&lt;/p&gt;
&lt;p&gt;因此Unicode在设计上考虑到了这一点，&lt;strong&gt;将字符集和字符编码方案分离开&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/001-encoding/b.png&#34; alt=&#34;b&#34;&gt;&lt;/p&gt;
&lt;p&gt;也就是说，&lt;strong&gt;虽然每个字符在Unicode字符集中都能找到唯一确定的编号（字符码，又称Unicode码），但是决定最终字节流的却是具体的字符编码&lt;/strong&gt;。例如同样是对Unicode字符“A”进行编码，UTF-8字符编码得到的字节流是0x41，而UTF-16（大端模式）得到的是0x00 0x41。&lt;/p&gt;
&lt;h3 id=&#34;3-修改文件编码方式&#34;&gt;3. 修改文件编码方式&lt;/h3&gt;
&lt;p&gt;如果你直接把utf-8编码的文件转为其它编码比如gbk, 那转换之后你的文件肯定是乱码, 因为在你写入一些内容比如&lt;code&gt;汉&lt;/code&gt;到你的文本文件, 此时这个文件的编码方式为&lt;code&gt;utf-8&lt;/code&gt;, 那你保存此文件后, 此文件的内容已经是经过utf-8编码二进制数, 即:&lt;code&gt;11100110 10110001 10001001&lt;/code&gt;也就是&lt;code&gt;e6b1 89&lt;/code&gt;就是上面的汉字&lt;code&gt;汉&lt;/code&gt;, 此时你硬要把文件的编码方式改为gbk, 而gbk采用完全与utf-8不同的编码方式(2字节1个字符),  此时当其他软件是图打开你这个文本文件时, 就会查看你文件的编码信息, 他们看到是gbk编码, 那就会把&lt;code&gt;11100110 10110001 10001001&lt;/code&gt;即&lt;code&gt;e6b1 89&lt;/code&gt;中的前两个字节解释为一个字符, 然后他们查找&lt;code&gt;11100110 10110001&lt;/code&gt;即&lt;code&gt;e6b1&lt;/code&gt;, 那肯定匹配不到&lt;code&gt;汉&lt;/code&gt;, 就会把&lt;code&gt;11100110 10110001&lt;/code&gt;解释为不可打印字符或者英文或者其它语言,,,&lt;/p&gt;
&lt;p&gt;但也可以实现不同编码的安全转换, 一个思路是, 假如知道文件是用的utf-8编码, 所以我们先把该文件的字符转换为unicode code point, 然后再利用gbk进行编码这些unicode code, 具体做法如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;article_1.md&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(file_path, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    utf_8_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; utf_8_str &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Contents of Text cannot be None!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        gbk_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; utf_8_str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gbk&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;article_2.md&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wb&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(gbk_str)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encoding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gbk&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意, 上面代码&lt;code&gt;utf_8_str = f.read()&lt;/code&gt;, 此时&lt;code&gt;utf_8_str&lt;/code&gt;已经是unicode code, 第二我们写如文件时, 要以二进制写入, 不然你写入的就是长得像16进制数的字符串, 而不是真正的写入二进制数据,&lt;/p&gt;
&lt;h3 id=&#34;4-python-中的编码&#34;&gt;4. Python 中的编码&lt;/h3&gt;
&lt;p&gt;电脑只能存储二进制数, 而python也有个bytes类用来代表二进制字符串,&lt;/p&gt;
&lt;p&gt;所以这里有两个概念, string和bytes string, 他们是不同的类, 拥有的函数不同, 对于一个普通的string, 它有个函数叫&lt;code&gt;encode()&lt;/code&gt;, 该函数的返回类型是&lt;code&gt;bytes&lt;/code&gt;, 如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bytes_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AB&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(type(bytes_str))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(bytes_str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hex())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4142&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后对于bytes类, 有个函数叫&lt;code&gt;decode()&lt;/code&gt;, 该函数的返回类型为&lt;code&gt;str&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bytes_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AB&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes_str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(type(a))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以在往一个文件写入的时候想好是直接写入二进制还是写入编码后的字符串, 即&lt;strong&gt;注意文件的打开方式&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 文件的内容: 汉在&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 文件的编码方式: gbk, 每个汉字2字节&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;article_2.md&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rb&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bin_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(type(bin_str))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(bin_str)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xba\xba\xd4\xda&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;article_2.md&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gbk&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    text_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(type(text_str))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(text_str)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;汉在
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为&lt;code&gt;article_2.md&lt;/code&gt;采用gbk编码方式, 而python默认是utf-8解码, 所以这里需要指定编码方式, 否则肯定乱码或者出错,&lt;/p&gt;
&lt;p&gt;写入也要&lt;strong&gt;注意打开文件的方式&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bin_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AB&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text.md&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wb&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(bin_str)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encoding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看文件的内容:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ xxd text.md
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000: &lt;span style=&#34;color:#ae81ff&#34;&gt;4142&lt;/span&gt;              AB
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们不指定以二进制写入, 则会报错:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bin_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AB&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text.md&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(bin_str)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encoding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# error: TypeError: write() argument must be str, not bytes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意, python挺好有报错, 但是有的语言比如C的接口, 就不会提醒, 你写入什么就是什么, 如果你打开方式不是二进制, 然后写入了二进制的字符串, 那结果就是, 这些二进制的字符串被当作普通字符串写入文件&amp;hellip;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Hyper-Threading &amp; Physical Threads</title>
      <link>https://blog.jiyi27.com/posts/cs-basics/006-cpu-architecture/</link>
      <pubDate>Sun, 28 May 2023 15:47:18 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/cs-basics/006-cpu-architecture/</guid>
      <description>&lt;h2 id=&#34;1-cpu-structure&#34;&gt;1. CPU structure&lt;/h2&gt;
&lt;p&gt;Single core CPU:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2025/01/838e3b5018958914f986430b086270e2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The CPU core consists of three parts: ALU, CU and Memory (Register + Cache), The multiple cores CPU has more than one core (ALU, CU, Memory (Register + Cache)) to execute instructions:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2025/01/8556c886045ef0f880cf279f3724c1ef.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-hyper-threading&#34;&gt;2. Hyper-threading&lt;/h2&gt;
&lt;p&gt;A single physical core with hyper-threading or simultaneous multithreading technology appears as two logical cores to an operating system. The CPU is still a single CPU, so it’s a little bit of a cheat. This can speed things up somewhat — if one virtual CPU is stalled and waiting, the other virtual CPU can borrow its execution resources.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-cpu-structure&#34;&gt;1. CPU structure&lt;/h2&gt;
&lt;p&gt;Single core CPU:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2025/01/838e3b5018958914f986430b086270e2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The CPU core consists of three parts: ALU, CU and Memory (Register + Cache), The multiple cores CPU has more than one core (ALU, CU, Memory (Register + Cache)) to execute instructions:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2025/01/8556c886045ef0f880cf279f3724c1ef.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-hyper-threading&#34;&gt;2. Hyper-threading&lt;/h2&gt;
&lt;p&gt;A single physical core with hyper-threading or simultaneous multithreading technology appears as two logical cores to an operating system. The CPU is still a single CPU, so it’s a little bit of a cheat. This can speed things up somewhat — if one virtual CPU is stalled and waiting, the other virtual CPU can borrow its execution resources.&lt;/p&gt;
&lt;p&gt;Most processors can use a process called simultaneous multithreading or, if it’s an Intel processor, &lt;strong&gt;Hyper-threading&lt;/strong&gt; (the two terms mean the same thing) to &lt;strong&gt;split a core into virtual cores, which are called threads&lt;/strong&gt;. For example, AMD CPUs with four cores use simultaneous multithreading to provide eight threads, and most Intel CPUs with two cores use Hyper-threading to provide four threads.&lt;/p&gt;
&lt;p&gt;Some apps take better advantage of multiple threads than others. Lightly-threaded apps, like games, don&amp;rsquo;t benefit from a lot of cores, while most video editing and animation programs can run much faster with extra threads.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Strictly speaking, &lt;em&gt;only&lt;/em&gt; Intel processors have hyper-threading, however, the term is sometimes used colloquially to refer to any kind of simultaneous multithreading.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Windows Task Manager shows this fairly well. Here, for example, you can see that this system has one actual CPU (socket) and 8 cores. Simultaneous multithreading makes each core look like two CPUs to the operating system, so it shows 16 logical processors.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-2a6758f3b2d64ef5bb71ba1601101d35.r2.dev/blogs/2025/01/75888124d5efc121b0ad287ac5b197aa.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;logical-core-vs-os-thread&#34;&gt;Logical core vs OS thread&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;OS Thread（操作系统线程）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程由操作系统内核管理，它可以调度线程在不同的 CPU 核心或逻辑处理器上运行。&lt;/li&gt;
&lt;li&gt;线程的调度和管理涉及 context switching, priority scheduling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hyper-threading（超线程）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hyper-threading 是 Intel 提供的一种硬件级别的技术，它允许单个物理 CPU 核心模拟出两个逻辑处理器。&lt;/li&gt;
&lt;li&gt;当启用 Hyper-threading 时，操作系统会看到比实际物理核心数更多的处理器。例如，一个拥有 4 个物理核心的 CPU 可能会显示为 8 个逻辑处理器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在操作系统管理线程的过程中，它会将多个 OS thread 分配给可用的 CPU 核心，包括通过 Hyper-threading 技术创建的逻辑处理器。这个分配过程考虑了多个因素，包括线程的优先级、CPU 亲和性（affinity）、以及核心的当前负载情况。因此，操作系统线程与 Hyper-threading 是协同工作的两个不同层面的概念：一个属于软件层面（操作系统管理），另一个属于硬件层面（CPU 架构）。&lt;/p&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.howtogeek.com/194756/cpu-basics-multiple-cpus-cores-and-hyper-threading-explained/&#34;&gt;CPU Basics: What Are Cores, Hyper-Threading, and Multiple CPUs?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.baeldung.com/cs/core-vs-cpu&#34;&gt;Differences Between Core and CPU | Baeldung on Computer Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tomshardware.com/news/cpu-core-definition,37658.html&#34;&gt;What Is a CPU Core? A Basic Definition | Tom&amp;rsquo;s Hardware&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>C Go Java Python内存结构及对比</title>
      <link>https://blog.jiyi27.com/posts/cs-basics/001-memory-strucutre-programming-language/</link>
      <pubDate>Sat, 27 May 2023 19:59:17 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/cs-basics/001-memory-strucutre-programming-language/</guid>
      <description>&lt;h2 id=&#34;1-javascript&#34;&gt;1. Javascript&lt;/h2&gt;
&lt;p&gt;Taken from &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_management&#34;&gt;JavaScript | MDN&lt;/a&gt; but &lt;strong&gt;this applies for all language with GC&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Low-level languages like C, have manual memory management primitives such as &lt;a href=&#34;https://pubs.opengroup.org/onlinepubs/009695399/functions/malloc.html&#34;&gt;&lt;code&gt;malloc()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/C_dynamic_memory_allocation#Overview_of_functions&#34;&gt;&lt;code&gt;free()&lt;/code&gt;&lt;/a&gt;. In contrast, JavaScript automatically allocates memory when objects are created and frees it when they are not used anymore (&lt;em&gt;garbage collection&lt;/em&gt;). This automaticity is a potential source of confusion: it can give developers the false impression that they don&amp;rsquo;t need to worry about memory management.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-javascript&#34;&gt;1. Javascript&lt;/h2&gt;
&lt;p&gt;Taken from &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_management&#34;&gt;JavaScript | MDN&lt;/a&gt; but &lt;strong&gt;this applies for all language with GC&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Low-level languages like C, have manual memory management primitives such as &lt;a href=&#34;https://pubs.opengroup.org/onlinepubs/009695399/functions/malloc.html&#34;&gt;&lt;code&gt;malloc()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/C_dynamic_memory_allocation#Overview_of_functions&#34;&gt;&lt;code&gt;free()&lt;/code&gt;&lt;/a&gt;. In contrast, JavaScript automatically allocates memory when objects are created and frees it when they are not used anymore (&lt;em&gt;garbage collection&lt;/em&gt;). This automaticity is a potential source of confusion: it can give developers the false impression that they don&amp;rsquo;t need to worry about memory management.&lt;/p&gt;
&lt;p&gt;Regardless of the programming language, the memory life cycle is pretty much always the same:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Allocate&lt;/strong&gt; the memory you need&lt;/li&gt;
&lt;li&gt;Use the allocated memory (read, write), &lt;strong&gt;each variable exists as long as there are references to it&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Release&lt;/strong&gt; the allocated memory when it is not needed anymore (Usually done by GC)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The second part is explicit in all languages. The first and last parts are explicit in low-level languages but are mostly implicit in high-level languages like JavaScript.&lt;/p&gt;
&lt;h3 id=&#34;11-allocation&#34;&gt;1.1. Allocation&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// allocates memory for a number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azerty&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// allocates memory for a string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;o&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}; &lt;span style=&#34;color:#75715e&#34;&gt;// allocates memory for an object and contained values
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// (like object) allocates memory for the array and
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// contained values
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abra&amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;// allocates a function (which is a callable object)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// function expressions also allocate an object
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;someElement&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;someElement&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;backgroundColor&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;12-using-values&#34;&gt;1.2. Using values&lt;/h3&gt;
&lt;p&gt;Using values basically means reading and writing in allocated memory. This can be done by reading or writing the value of a variable or an object property or even passing an argument to a function.&lt;/p&gt;
&lt;h3 id=&#34;13-release-when-the-memory-is-not-needed-anymore&#34;&gt;1.3. Release when the memory is not needed anymore&lt;/h3&gt;
&lt;p&gt;The majority of memory management issues occur at this phase. The most difficult aspect of this stage is determining when the allocated memory is no longer needed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Low-level languages&lt;/strong&gt; require the developer to manually determine at which point in the program the allocated memory is no longer needed and to release it.&lt;/p&gt;
&lt;p&gt;Some &lt;strong&gt;high-level languages&lt;/strong&gt;, such as JavaScript, utilize a form of automatic memory management known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29&#34;&gt;garbage collection&lt;/a&gt; (GC). The purpose of a garbage collector is to monitor memory allocation and determine when a block of allocated memory is no longer needed and reclaim it.&lt;/p&gt;
&lt;p&gt;Learn more: &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_management&#34;&gt;Memory management - JavaScript | MDN&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-python&#34;&gt;2. Python&lt;/h2&gt;
&lt;p&gt;Memory management in Python involves a private heap containing &lt;strong&gt;all Python objects&lt;/strong&gt; and data structures. The management of this private heap is ensured internally by the &lt;em&gt;&lt;strong&gt;Python memory manager&lt;/strong&gt;&lt;/em&gt;. The Python memory manager has different components which deal with various dynamic storage management aspects, like sharing, segmentation, preallocation or caching.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Everything is an object in Python, even types such as &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Learn more: &lt;a href=&#34;https://docs.python.org/3/c-api/memory.html&#34;&gt;Memory Management — Python 3.12.0 documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-golang&#34;&gt;3. Golang&lt;/h2&gt;
&lt;p&gt;From a correctness standpoint, you don&amp;rsquo;t need to know. Each variable in Go exists as long as there are references to it. The storage location chosen by the implementation is irrelevant to the semantics of the language.&lt;/p&gt;
&lt;p&gt;The storage location does have an effect on writing efficient programs. When possible, the Go compilers will allocate variables that are local to a function in that function&amp;rsquo;s &lt;strong&gt;stack frame&lt;/strong&gt;. However, if the compiler cannot prove that the variable is not referenced after the function returns, then the compiler must allocate the variable on the &lt;strong&gt;garbage-collected heap&lt;/strong&gt; to avoid dangling pointer errors. Also, if a local variable is very large, it might make more sense to store it on the heap rather than the stack.&lt;/p&gt;
&lt;p&gt;In the current compilers, if a variable has its address taken, that variable is a candidate for allocation on the heap. However, a basic &lt;em&gt;escape analysis&lt;/em&gt; recognizes some cases when such variables will not live past the return from the function and can reside on the stack.&lt;/p&gt;
&lt;h2 id=&#34;4-java&#34;&gt;4. Java&lt;/h2&gt;
&lt;p&gt;Learn more: &lt;a href=&#34;https://davidzhu.xyz/post/java/basics/005-memory-structure/&#34;&gt;https://davidzhu.xyz/post/java/basics/005-memory-structure/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-cc&#34;&gt;5. C/C++&lt;/h2&gt;
&lt;p&gt;C has three different pools of memory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;static&lt;/strong&gt;: global variable storage, permanent for the entire run of the program.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;stack&lt;/strong&gt;: local variable storage (automatic, continuous memory).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;heap&lt;/strong&gt;: dynamic storage (large pool of memory, not allocated in contiguous order).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;51-static-memory&#34;&gt;5.1. Static memory&lt;/h3&gt;
&lt;p&gt;Static memory persists throughout the entire life of the program, and is usually used to store things like &lt;em&gt;global&lt;/em&gt; variables, or variables created with the static clause. If a variable is declared &lt;em&gt;outside&lt;/em&gt; of a function, it is considered global, meaning it is accessible anywhere in the program. Global variables are static, and there is only one copy for the entire program. Inside a function the variable is allocated on the stack. It is also possible to force a variable to be static using the &lt;strong&gt;static&lt;/strong&gt; clause. For example, the same variable created inside a function using the static clause would allow it to be stored in static memory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; theforce;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;52-stack-memory&#34;&gt;5.2. Stack memory&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;stack&lt;/em&gt; is used to store variables used on the inside of a function (including the &lt;code&gt;main()&lt;/code&gt; function). It’s a LIFO, “&lt;strong&gt;L&lt;/strong&gt;ast-&lt;strong&gt;I&lt;/strong&gt;n,-&lt;strong&gt;F&lt;/strong&gt;irst-&lt;strong&gt;O&lt;/strong&gt;ut”, structure. Every time a function declares a new variable it is “pushed” onto the stack. Then when a function finishes running, all the variables associated with that function on the stack are deleted, and the memory they use is freed up. This leads to the “local” scope of function variables.&lt;/p&gt;
&lt;p&gt;Note that there is generally a limit on the size of the stack – which can vary with the operating system (for example OSX currently has a default stack size of 8MB). If a program tries to put too much information on the stack, &lt;strong&gt;stack overflow&lt;/strong&gt; will occur. Stack overflow happens when all the memory in the stack has been allocated, and further allocations begin overflowing into other sections of memory. Stack overflow also occurs in situations where recursion is incorrectly used.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the stack grows and shrinks as variables are created and destroyed&lt;/li&gt;
&lt;li&gt;stack variables only exist whilst the function that created them exists&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;53-heap-memory&#34;&gt;5.3. Heap Memory&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;heap&lt;/em&gt; is the diametrical opposite of the stack. The &lt;em&gt;heap&lt;/em&gt; is a large pool of memory that can be used dynamically – it is also known as the “free store”. This is memory that is not automatically managed in C/C++ – you have to explicitly allocate (using functions such as malloc), and deallocate (e.g. free) the memory. Failure to free the memory when you are finished with it will result in what is known as a &lt;em&gt;memory leak&lt;/em&gt; – memory that is still “being used”, and not available to other processes. Unlike the stack, there are generally no restrictions on the size of the heap (or the variables it creates), other than the physical size of memory in the machine. Variables created on the heap are accessible anywhere in the program.&lt;/p&gt;
&lt;h2 id=&#34;6-conclusion&#34;&gt;6. Conclusion&lt;/h2&gt;
&lt;p&gt;Most of languages are designed with stack and heap, the concept of stack and heap are not mentioned in Javascript, but some concepts like the function stack frame, heap are shared among the modern languages designs. Our goal is to grab the lifetime of objects so that can write good and robust codes, not stack and heap.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://craftofcoding.wordpress.com/2015/12/07/memory-in-c-the-stack-the-heap-and-static/&#34;&gt;Memory in C – the stack, the heap, and static – The Craft of Coding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/18406703/when-will-a-string-be-garbage-collected-in-java&#34;&gt;When will a string be garbage collected in java - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.baeldung.com/java-choosing-gc-algorithm&#34;&gt;Choosing a GC Algorithm in Java | Baeldung&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/&#34;&gt;Golang Memory Management: Allocation Efficiency in Go Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/c-api/memory.html&#34;&gt;Memory Management — Python 3.11.3 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.honeybadger.io/blog/memory-management-in-python/&#34;&gt;Memory Management in Python - Honeybadger Developer Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/CPython&#34;&gt;CPython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://deepu.tech/memory-management-in-golang/&#34;&gt;🚀 Visualizing memory management in Golang | Technorage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/73021/16317008&#34;&gt;methods - Is Java &amp;ldquo;pass-by-reference&amp;rdquo; or &amp;ldquo;pass-by-value&amp;rdquo;? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/10866195/stack-vs-heap-allocation-of-structs-in-go-and-how-they-relate-to-garbage-collec&#34;&gt;Stack vs heap allocation of structs in Go, and how they relate to garbage collection - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference&#34;&gt;python - How do I pass a variable by reference? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devguide.python.org/internals/garbage-collector/&#34;&gt;Garbage Collector Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://deepu.tech/memory-management-in-programming/&#34;&gt;🚀 Demystifying memory management in modern programming languages | Technorage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Thread Stack and CPU Cores</title>
      <link>https://blog.jiyi27.com/posts/cs-basics/006-thread-process/</link>
      <pubDate>Sat, 27 May 2023 18:05:16 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/cs-basics/006-thread-process/</guid>
      <description>&lt;h2 id=&#34;1-thread&#34;&gt;1. Thread&lt;/h2&gt;
&lt;p&gt;A thread is a segment or part of a process that executes some tasks of the process. A process can have multiple threads which can &lt;strong&gt;run concurrently&lt;/strong&gt; within the process. Each thread has its own thread stack but multiple threads of a process share a common heap area of that process.&lt;/p&gt;
&lt;h3 id=&#34;11-thread-stack&#34;&gt;1.1. Thread stack&lt;/h3&gt;
&lt;p&gt;Each thread has its own call stack, &amp;ldquo;call stack&amp;rdquo; and &amp;ldquo;thread stack&amp;rdquo; are the same thing. Calling it a &amp;ldquo;thread stack&amp;rdquo; just emphasizes that the call stack is specific to the thread.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-thread&#34;&gt;1. Thread&lt;/h2&gt;
&lt;p&gt;A thread is a segment or part of a process that executes some tasks of the process. A process can have multiple threads which can &lt;strong&gt;run concurrently&lt;/strong&gt; within the process. Each thread has its own thread stack but multiple threads of a process share a common heap area of that process.&lt;/p&gt;
&lt;h3 id=&#34;11-thread-stack&#34;&gt;1.1. Thread stack&lt;/h3&gt;
&lt;p&gt;Each thread has its own call stack, &amp;ldquo;call stack&amp;rdquo; and &amp;ldquo;thread stack&amp;rdquo; are the same thing. Calling it a &amp;ldquo;thread stack&amp;rdquo; just emphasizes that the call stack is specific to the thread.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;stack&lt;/em&gt; is used to store variables used on the inside of a function (including the &lt;code&gt;main()&lt;/code&gt; function). It’s a LIFO, “&lt;strong&gt;L&lt;/strong&gt;ast-&lt;strong&gt;I&lt;/strong&gt;n,-&lt;strong&gt;F&lt;/strong&gt;irst-&lt;strong&gt;O&lt;/strong&gt;ut”, structure. Every time a function declares a new variable it is “pushed” onto the stack. Then when a function finishes running, all the variables associated with that function on the stack are deleted, and the memory they use is freed up. This leads to the “local” scope of function variables. The stack is a special region of memory, and automatically managed by the CPU – so you don’t have to allocate or deallocate memory. Stack memory is divided into successive frames where each time a function is called, it allocates itself a fresh &lt;strong&gt;stack frame&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Note that there is generally a limit on the size of the stack – which can vary with the operating system (for example OSX currently has a default stack size of 8MB). If a program tries to put too much information on the stack, &lt;strong&gt;stack overflow&lt;/strong&gt; will occur. Stack overflow happens when all the memory in the stack has been allocated, and further allocations begin overflowing into other sections of memory. Stack overflow also occurs in situations where recursion is incorrectly used.&lt;/p&gt;
&lt;h2 id=&#34;2-process&#34;&gt;2. Process&lt;/h2&gt;
&lt;p&gt;A program is a set of instructions. It is stored on a disk of a computer and hence it is &lt;strong&gt;Passive&lt;/strong&gt;. When the same program is loaded into the main memory and the OS assigns some heap memory to this program(application) is under execution is called a &lt;strong&gt;Process&lt;/strong&gt;. Hence a process is a program under execution. So we can say it is &lt;strong&gt;Active&lt;/strong&gt;. A process can create child processes by using the &lt;strong&gt;fork&lt;/strong&gt; system calls.&lt;/p&gt;
&lt;h2 id=&#34;3-relationship-between-a-thread-and-a-cpu-core&#34;&gt;3. Relationship between a thread and a CPU core&lt;/h2&gt;
&lt;p&gt;A CPU core is a physical processing unit in a computer’s central processing unit (CPU) that can execute instructions independently. A thread, on the other hand, is a unit of execution within a process, which represents a sequence of instructions that can be executed independently by a CPU.&lt;/p&gt;
&lt;p&gt;In general, the number of threads that can be executed simultaneously on a CPU is limited by the number of cores available in the CPU. Each core can execute one thread at a time, so having multiple cores allows for multiple threads to be executed in parallel, potentially leading to improved performance.&lt;/p&gt;
&lt;p&gt;However, the relationship between threads and CPU cores is more complex than just one-to-one mapping.&lt;/p&gt;
&lt;p&gt;In modern computer systems, threads can be scheduled dynamically on different cores by the operating system, and a single core can switch between multiple threads in order to maximize the utilization of available resources and CPU cores.&lt;/p&gt;
&lt;p&gt;Additionally, some systems may also use techniques such as &lt;strong&gt;hyper-threading&lt;/strong&gt;, where a single physical core is treated as multiple virtual cores, potentially allowing for even more threads to be executed simultaneously.&lt;/p&gt;
&lt;p&gt;Note that **simultaneous not equals to parallel. **&lt;/p&gt;
&lt;p&gt;From this can also see the importance of those basic undergraduate courses, the principles of computer composition of a lot of content, including the CPU architecture, registers, buses, memory structure, how the CPU reads commands from the registers, which provides the basis for future operating system courses. For example, now we are learning about threads, processes, which are all part of the operating system curriculum, and hyper-threading, if you don&amp;rsquo;t know how the CPU handles instructions and how it waits for the bus to send data, how can you understand the interrupt system very well? Golang is very popular now, it is very good at concurrency, Goroutine is very lightweight, but why is goroutine lightweight? You&amp;rsquo;re probably going to get asked that in an interview, right? These are context switches, and you can&amp;rsquo;t understand why goroutines are so powerful without learning the above, but that&amp;rsquo;s just one example. This is just one example. Just one concurrency problem, and that&amp;rsquo;s a lot of knowledge and lessons. The rest of the course such as the network, compilation principles, are very important, may not have an immediate effect, but they will be the future to support you the most solid foundation of the building.&lt;/p&gt;
&lt;p&gt;Related article:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://davidzhu.xyz/post/cs-basics/008-context-switching/&#34;&gt;Context Switching - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://davidzhu.xyz/post/cs-basics/006-cpu-architecture/&#34;&gt;Hyper-Threading &amp;amp; Physical Threads - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/javarevisited/process-and-thread-context-switching-do-you-know-the-difference-updated-8fd93877dff6&#34;&gt;Process and Thread Context Switching, Do You Know the Difference? &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/31145052/difference-between-call-stack-and-thread-stack&#34;&gt;java - Difference between &amp;ldquo;call stack&amp;rdquo; and &amp;ldquo;thread stack&amp;rdquo; - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://craftofcoding.wordpress.com/2015/12/07/memory-in-c-the-stack-the-heap-and-static/&#34;&gt;Memory in C – the stack, the heap, and static – The Craft of Coding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Context Switching</title>
      <link>https://blog.jiyi27.com/posts/cs-basics/006-context-switching/</link>
      <pubDate>Sat, 27 May 2023 16:29:15 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/cs-basics/006-context-switching/</guid>
      <description>&lt;h2 id=&#34;1-context-switch&#34;&gt;1. Context switch&lt;/h2&gt;
&lt;p&gt;In a CPU, the term &amp;ldquo;context&amp;rdquo; refers to the data in the registers and program counter (PC) at a specific moment in time. A register holds the current CPU instruction. A program counter, also known as an instruction address register, is a small amount of fast memory that holds the address of the instruction to be executed immediately after the current one.&lt;/p&gt;
&lt;p&gt;In computing, a context switch is the process of storing the state of a process or thread, so that it can be restored and resume execution at a later point, and then restoring a different, previously saved, state. Two steps, the first step is to &lt;strong&gt;store the state of the thread and then restore the state of another&lt;/strong&gt;.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-context-switch&#34;&gt;1. Context switch&lt;/h2&gt;
&lt;p&gt;In a CPU, the term &amp;ldquo;context&amp;rdquo; refers to the data in the registers and program counter (PC) at a specific moment in time. A register holds the current CPU instruction. A program counter, also known as an instruction address register, is a small amount of fast memory that holds the address of the instruction to be executed immediately after the current one.&lt;/p&gt;
&lt;p&gt;In computing, a context switch is the process of storing the state of a process or thread, so that it can be restored and resume execution at a later point, and then restoring a different, previously saved, state. Two steps, the first step is to &lt;strong&gt;store the state of the thread and then restore the state of another&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;2-two-data-structure-pcb--tcb&#34;&gt;2. Two data structure: PCB &amp;amp; TCB&lt;/h2&gt;
&lt;p&gt;The &amp;lsquo;state&amp;rsquo; mentioned above is thread or process related information, stored in PCB (Process) and TCB (Thread) respectively.&lt;/p&gt;
&lt;h3 id=&#34;21-process-control-block-pcb&#34;&gt;2.1 Process control block (PCB)&lt;/h3&gt;
&lt;p&gt;A process control block (PCB) contains information about the process, i.e. registers, PID, priority, etc. The process table is an array of PCBs, that means logically contains a PCB for all of the current processes in the system.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Process State – new, ready, running, waiting, dead;&lt;/li&gt;
&lt;li&gt;Process Number (PID) – unique identification number for each process (also known as Process ID);&lt;/li&gt;
&lt;li&gt;Program Counter (PC) – a pointer to the address of the next instruction to be executed for this process;&lt;/li&gt;
&lt;li&gt;CPU Registers – register set where process needs to be stored for execution for running state;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-thread-control-block-tcb&#34;&gt;2.2 &lt;strong&gt;Thread control block&lt;/strong&gt; (&lt;strong&gt;TCB&lt;/strong&gt;)&lt;/h3&gt;
&lt;p&gt;An example of information contained within a TCB is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thread Identifier: Unique id (tid) is assigned to every new thread&lt;/li&gt;
&lt;li&gt;Stack pointer: Points to thread&amp;rsquo;s stack in the process&lt;/li&gt;
&lt;li&gt;Program counter (PC): Points to the current program instruction of the thread&lt;/li&gt;
&lt;li&gt;State of the thread (running, ready, waiting, start, done)&lt;/li&gt;
&lt;li&gt;Thread&amp;rsquo;s register values&lt;/li&gt;
&lt;li&gt;Pointer to the Process control block (PCB) of the process that the thread lives on&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-cost-of-context-switch&#34;&gt;3. Cost of context switch&lt;/h2&gt;
&lt;p&gt;Switching from one process to another requires a certain amount of time for doing the administration – saving and loading registers and memory maps, updating various tables and lists, etc.&lt;/p&gt;
&lt;p&gt;For example, in the Linux kernel, context switching involves &lt;em&gt;&lt;strong&gt;loading the corresponding process control block (PCB)&lt;/strong&gt;&lt;/em&gt; stored in the PCB table in the kernel stack to retrieve information about the state of the new process. &lt;em&gt;&lt;strong&gt;CPU state information&lt;/strong&gt;&lt;/em&gt; including the registers, stack pointer, and program counter as well as memory management information like segmentation tables and page tables (unless the old process shares the memory with the new) are loaded from the PCB for the new process. To avoid incorrect address translation in the case of the previous and current processes using different memory, &lt;em&gt;&lt;strong&gt;the translation lookaside buffer (TLB)&lt;/strong&gt;&lt;/em&gt; must be flushed. This negatively affects performance because every memory reference to the TLB will be a miss because it is empty after most context switches.&lt;/p&gt;
&lt;p&gt;Furthermore, analogous context switching happens between &lt;a href=&#34;https://en.wikipedia.org/wiki/User_thread&#34;&gt;user threads&lt;/a&gt;, notably &lt;a href=&#34;https://en.wikipedia.org/wiki/Green_thread&#34;&gt;green threads&lt;/a&gt;, and is often very lightweight, saving and restoring minimal context. In extreme cases, such as switching between goroutines in &lt;a href=&#34;https://en.wikipedia.org/wiki/Go_%28programming_language%29&#34;&gt;Go&lt;/a&gt;, a context switch is equivalent to a &lt;a href=&#34;https://en.wikipedia.org/wiki/Coroutine&#34;&gt;coroutine&lt;/a&gt; yield, which is only marginally more expensive than a &lt;a href=&#34;https://en.wikipedia.org/wiki/Subroutine&#34;&gt;subroutine&lt;/a&gt; call.&lt;/p&gt;
&lt;h2 id=&#34;4-when-context-switch-happens&#34;&gt;4. When context switch happens&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;System calls&lt;/strong&gt;: when a process makes any system calls, the OS switches the mode of the kernel and saves that process in context, and executes the system call.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Interrupt handling:&lt;/strong&gt; Modern architectures are &lt;a href=&#34;https://en.wikipedia.org/wiki/Interrupt&#34;&gt;interrupt&lt;/a&gt; driven. This means that if the CPU requests data from a disk, for example, it does not need to &lt;a href=&#34;https://en.wikipedia.org/wiki/Busy-wait&#34;&gt;busy-wait&lt;/a&gt; until the read is over; it can issue the request (to the I/O device) and continue with some other task. When the read is over, the CPU can be &lt;em&gt;interrupted&lt;/em&gt; (by a hardware in this case, which sends interrupt request to &lt;a href=&#34;https://en.wikipedia.org/wiki/Programmable_interrupt_controller&#34;&gt;PIC&lt;/a&gt;) and presented with the read. For interrupts, a program called an &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Interrupt_handler&#34;&gt;interrupt handler&lt;/a&gt;&lt;/em&gt; is installed, and it is the interrupt handler that handles the interrupt from the disk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User and Kernel Mode switching&lt;/strong&gt;: this trigger is used when the OS needed to switch between the user mode and kernel mode.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-performance&#34;&gt;5. Performance&lt;/h2&gt;
&lt;p&gt;Context switching itself has a cost in performance, due to running the task scheduler, TLB flushes, and indirectly due to sharing the CPU cache between multiple tasks. &lt;strong&gt;Switching between threads of a single process can be faster than between two separate processes, because threads share the same virtual memory maps, so a TLB flush is not necessary&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;6-conclusion&#34;&gt;6. Conclusion&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;program counter (PC): processor register, stores the address of next instruction to be executed.&lt;/li&gt;
&lt;li&gt;context switch: store state, restore state&lt;/li&gt;
&lt;li&gt;causes of context siwtch
&lt;ul&gt;
&lt;li&gt;system call&lt;/li&gt;
&lt;li&gt;interrupt handling: CPU requests data from a disk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Context_switch&#34;&gt;Context switch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Process_control_block&#34;&gt;Process control block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Thread_control_block&#34;&gt;Thread control block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Program_counter&#34;&gt;Program counter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/context-switch-in-operating-system/&#34;&gt;Context Switch in Operating System - GeeksforGeeks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html&#34;&gt;Scheduling In Go : Part I - OS Scheduler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>说说C的编译动态静态库及Go的Runtime</title>
      <link>https://blog.jiyi27.com/posts/cs-basics/003-go-runtime-complie-c/</link>
      <pubDate>Thu, 25 May 2023 18:50:14 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/cs-basics/003-go-runtime-complie-c/</guid>
      <description>&lt;p&gt;最近看线程总是看到 goroutine managed by go runtime, &amp;hellip; runtime, 也看到问题 Does Go has a runtime? 刚好Go在官方FAQs有回答, 就在这记录一下,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Does Go have a runtime?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go does have an extensive library, called the &lt;em&gt;runtime&lt;/em&gt;, that is part of every Go program. The runtime library implements garbage collection, concurrency, stack management, and other critical features of the Go language. Although it is more central to the language, Go&amp;rsquo;s runtime is analogous to &lt;code&gt;libc&lt;/code&gt;, the C library.&lt;/p&gt;</description>
      <content>&lt;p&gt;最近看线程总是看到 goroutine managed by go runtime, &amp;hellip; runtime, 也看到问题 Does Go has a runtime? 刚好Go在官方FAQs有回答, 就在这记录一下,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Does Go have a runtime?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go does have an extensive library, called the &lt;em&gt;runtime&lt;/em&gt;, that is part of every Go program. The runtime library implements garbage collection, concurrency, stack management, and other critical features of the Go language. Although it is more central to the language, Go&amp;rsquo;s runtime is analogous to &lt;code&gt;libc&lt;/code&gt;, the C library.&lt;/p&gt;
&lt;p&gt;It is important to understand, however, that Go&amp;rsquo;s runtime does not include a virtual machine, such as is provided by the Java runtime. Go programs are compiled ahead of time to native machine code (or JavaScript or WebAssembly, for some variant implementations). Thus, although the term is often used to describe the virtual environment in which a program runs, in Go the word “runtime” is just the name given to the library providing critical language services.&lt;/p&gt;
&lt;p&gt;所以, runtime在go里指的就是它的标准库,&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;另外说一下什么是runtime library, it&amp;rsquo;s a collection of functions, 它是static lib和dynamic lib的集合, 运行时是什么? 即程序运行的时候, 所以不要觉得编译的链接阶段就把静态库和我们的代码链接到一起了, 就认为静态库不属于runtime library, 难道你运行的时候不用静态库里的&lt;code&gt;printf&lt;/code&gt;函数吗? 静态动态库只是和程序结合的时间不一样, 但运行的时候都会用到,&lt;/p&gt;
&lt;p&gt;所以C Runtime Library里的函数就很多了, 就是我们能用到的那些C的头文件里的函数呗, 你如: &lt;code&gt;printf&lt;/code&gt;, &lt;code&gt;malloc&lt;/code&gt;, &lt;code&gt;abs&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;assert&lt;/code&gt;, 可以去微软看看他们的C Library的实现, 感受下微软实现的Runtime Library的函数都是哪些: &lt;a href=&#34;https://learn.microsoft.com/en-us/cpp/c-runtime-library/c-run-time-library-reference?view=msvc-170&#34;&gt;C runtime library reference | Microsoft Learn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;那libc是什么? 就是C的标准库, 或者说C的运行时库, 其实这你都可以认为是同义词, 不用太多纠结, 关键是知道编译的过程做了什么, 没人非要你区分哪个库具体包含啥, 重要的是分清楚静态库&lt;code&gt;.a&lt;/code&gt;, &lt;code&gt;lib&lt;/code&gt;, 动态库&lt;code&gt;.so&lt;/code&gt;, &lt;code&gt;.dll&lt;/code&gt;参与了编译和运行时的哪个阶段.&lt;/p&gt;
&lt;p&gt;MacOS下C标准库位置: &lt;code&gt;/Library/Developer/CommandLineTools/SDKs/MacOSX12.3.sdk/usr/include&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://go.dev/doc/faq#goroutines&#34;&gt;Go FAQs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/cpp/c-runtime-library/c-run-time-library-reference?view=msvc-170&#34;&gt;C runtime library reference | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;想到之前读的石河子的一本书, 程序员的自我修养, 不仅感叹写的真的很好, 只是那时候才大一, 看不懂, 在这再说一下:&lt;/p&gt;
&lt;p&gt;程序如何使用操作系统提供的API(system call)? 在一般的情况下，一种语言的开发环境往往会附带有语言库（Language Library也可以说是标准库,运行时库）。这些库就是对操作系统的API的包装，比如我们经典的C语言版“Hello World”程序，它使用C语言标准库的“printf”函数来输出一个字符串，“printf”函数对字符串进行一些必要的处理以后，最后会调用操作系统提供的API。各个操作系统下，往终端输出字符串的API都不一样，在Linux下，它是一个“write”的系统调用，而在Windows下它是“WriteConsole”系统API。&lt;strong&gt;标准库函数(运行库)依赖的是system call&lt;/strong&gt;。库里面还带有那些很常用的函数，比如C语言标准库里面有很常用一个函数取得一个字符串的长度叫strlen()，该函数即遍历整个字符串后返回字符串长度，这个函数并没有调用任何操作系统的API，也没有做任何输入输出。但是很大一部分库函数(运行库)都是要调用操作系统的API的.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Any problem in computer science can be solved by another layer of indirection.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/003-go-runtime-complie-c/b.png&#34; alt=&#34;b&#34;&gt;&lt;/p&gt;
&lt;p&gt;每个层次之间都须要相互通信，既然须要通信就必须有一个通信的协议，我们一般将其称为接口（Interface），接口的下面那层是接口的提供者，由它定义接口；接口的上面那层是接口的使用者，它使用该接口来实现所需要的功能.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;运行时库(标准库, static library, dynamic library) 依赖 system call, 它提供头文件(&lt;code&gt;stdio.h&lt;/code&gt;, &lt;code&gt;math.h&lt;/code&gt;)供我们使用. 所以它很重要, 它在应用层和操作系统中间. 我们使用它提供的接口(&lt;code&gt;printf()&lt;/code&gt;)和操作系统进行交流(通过system call).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们的软件体系中，位于最上层的是应用程序，比如我们平时用到的网络浏览器、Email客户端、多媒体播放器、图片浏览器等。从整个层次结构上来看，开发工具与应用程序是属于同一个层次的，因为它们都使用一个接口，那就是操作系统应用程序编程接口（Application Programming Interface, 就是标准库的头文件）。应用程序接口(头文件)的提供者是运行库，什么样的运行库提供什么样的API，比如Linux下的Glibc库提供POSIX的API；Windows的运行库提供Windows API，最常见的32位Windows提供的API又被称为Win32。&lt;/p&gt;
&lt;p&gt;运行库使用操作系统提供的系统调用接口（System call Interface），系统调用接口在实现中往往以软件中断（Software Interrupt）的方式提供，比如Linux使用0x80号中断作为系统调用接口，Windows使用0x2E号中断作为系统调用接口（从Windows XP Sp2开始，Windows开始采用一种新的系统调用方式）。&lt;/p&gt;
&lt;p&gt;操作系统内核层对于硬件层来说是硬件接口的使用者，而硬件是接口的定义者，硬件的接口定义决定了操作系统内核，具体来讲就是驱动程序如何操作硬件，如何与硬件进行通信。这种接口往往被叫做硬件规格（Hardware Specification），硬件的生产厂商负责提供硬件规格，操作系统和驱动程序的开发者通过阅读硬件规格文档所规定的各种硬件编程接口标准来编写操作系统和驱动程序。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;ISO and Standards&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先来看看ISO: The International Organization for Standardization, ISO每年discuss然后得出语言的standards, C99, C11 standards也就是这么来的, standards主要介绍了两部分内容, 语言本身功能和该语言的standard library. 对, 只是介绍, 剩下的实现由其他人完成(glibc, MSVCRT是c standard library的实现). 即ISO出版standards, standard包括standard library,&lt;/p&gt;
&lt;p&gt;比如99年他们讨论的结果就是这个C99 standard: &lt;a href=&#34;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwjo5rzimd_6AhVIa94KHe1PDMsQFnoECCMQAQ&amp;amp;url=https%3A%2F%2Fwww.dii.uchile.cl%2F~daespino%2Ffiles%2FIso_C_1999_definition.pdf&amp;amp;usg=AOvVaw1MPepaWR9aWSbzO1gNwbST&#34;&gt;ISO/IEC 9899:1999(E) &amp;ndash; Programming Languages &amp;ndash; C&lt;/a&gt;), C99 standard内容包括两部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the C/C++ features and functionalities;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the C/C++ API — a collection of classes, functions and macros that developers use in their C/C++ programs. It is called the Standard Library.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Static Library and Dynamic Library&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Shared libraries(dynamic library) are&lt;code&gt;.so&lt;/code&gt; (or in Windows &lt;code&gt;.dll&lt;/code&gt;, or in OS X &lt;code&gt;.dylib&lt;/code&gt;) files. All the code relating to the library is in this file, and it is referenced by programs using it at run-time. A program using a shared library only makes reference to the code that it uses in the shared library.&lt;/p&gt;
&lt;p&gt;Static libraries are &lt;code&gt;.a&lt;/code&gt; (or in Windows &lt;code&gt;.lib&lt;/code&gt;) files. All the code relating to the library is in this file, and it is directly linked into the program at compile time. A program using a static library takes copies of the code that it uses from the static library and makes it part of the program.&lt;/p&gt;
&lt;p&gt;在这说一下&lt;code&gt;libc.a&lt;/code&gt;文件:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;源代码经过预处理, 编译, 汇编后编程一个&lt;code&gt;.o&lt;/code&gt;目标文件, 这个目标文件需要和其他libraries(&lt;code&gt;libc.a&lt;/code&gt;是由多个&lt;code&gt;.o&lt;/code&gt;目标文件压缩得到的)进行最后一步 链接 才能得到最终的可执行文件.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/003-go-runtime-complie-c/a.png&#34; alt=&#34;a&#34;&gt;&lt;/p&gt;
&lt;p&gt;Linux下, 人们用&lt;code&gt;ar&lt;/code&gt;程序把很多目标文件压缩到了静态库&lt;code&gt;libc.a&lt;/code&gt;(glibc的c标准库), 比如输入输出有printf.o，scanf.o；文件操作有fread.o，fwrite.o；时间日期有date.o，time.o；内存管理有malloc.o等。&lt;/p&gt;
&lt;p&gt;为什么静态运行库里面一个目标文件只包含一个函数？比如libc.a里面printf.o只有printf()函数、strlen.o只有strlen()函数，为什么要这样组织？&lt;/p&gt;
&lt;p&gt;链接器在链接静态库的时候是以目标文件为单位的。比如我们引用了静态库中的&lt;code&gt;printf()&lt;/code&gt;函数，那么链接器就只会把库中包含printf()函数的那个目标文件链接进来，由于运行库有成百上千个函数，如果把这些函数都放在一个目标文件中&amp;hellip;&lt;/p&gt;
&lt;p&gt;如果把整个链接过程比作一台计算机，那么&lt;code&gt;ld&lt;/code&gt;链接器就是计算机的CPU，所有的目标文件、库文件就是输入，链接结果输出的可执行文件就是输出，而链接控制脚本正是这台计算机的“程序”，它控制CPU的运行，以“程序”要求的方式将输入加工成所须要的输出结果.&lt;/p&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/2649334/difference-between-static-and-shared-libraries&#34;&gt;Difference between static and shared libraries?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/c-static-libraries-how-work-why-we-use-them-create-one-chatti-iheb/&#34;&gt;C Static libraries, How they work; Why and how we use them and how to create one&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Implementation of Standard Library&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们知道C有个分配内存的函数, 还有创建线程, 输入输出(&lt;code&gt;stdio.h&lt;/code&gt;), 这些都必须依赖system call. 所以第三方厂商实现standard library的时候, 要根据不同的OS来实现不同版本, 因为它们有不同的system call.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GNU/Linux implementation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The GNU C Library和glibc是同义词, 是C的runtime library也是standard library.&lt;/p&gt;
&lt;p&gt;其实这个概念有必要澄清一下: runtime library包括static library, daynamic library. runtime library更像是个泛指.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;printf()&lt;/code&gt;和&lt;code&gt;malloc()&lt;/code&gt;等函数的声明在头文件&lt;code&gt;stdio.h&lt;/code&gt;, &lt;code&gt;stdlib.h&lt;/code&gt;中, 而它们的具体实现就在静态库&lt;code&gt;.a&lt;/code&gt;中 (&lt;code&gt;libc.a&lt;/code&gt;是由多个&lt;code&gt;.o&lt;/code&gt;目标文件压缩得到的), 即头文件 + 对应实现 = standard library.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;严格来说library和header不是一个东西, library是目标文件, header就是.h文件. 但是我们都说standard library包括包括printf等函数, 然后这些函数又被声明在这些标准头文件中. 所以这个library,&lt;/p&gt;
&lt;p&gt;标准库为你写代码提供一些现成的方法、宏等使用，这些方法被封装在动态链接库或静态链接库或直接在头文件里，然后由头文件声明供程序员使用。&lt;/p&gt;
&lt;p&gt;MacOS下c的头文件位置: &lt;code&gt;/Library/Developer/CommandLineTools/SDKs/MacOSX12.3.sdk/usr/include&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mac and iOS Implementation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On Mac and iOS the C Standard Library implementation is part of &lt;code&gt;libSystem&lt;/code&gt;, a core library located in &lt;code&gt;/usr/lib/libSystem.dylib&lt;/code&gt;. LibSystem includes other components such as the math library, the thread library and other low-level utilities. 注意我查了一下, mac上的C标准库好像不在说的这个文件夹了, 有人说在&lt;code&gt;/usr/lib/system/&lt;/code&gt;我看了下, 但不知道是不是他们实现的C标准库.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Windows Implementation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On Windows the implementation of the Standard Libraries has always been strictly bound to &lt;strong&gt;Visual Studio&lt;/strong&gt;, the official Microsoft compiler. They use to call it &lt;strong&gt;C/C++ Run-time Library&lt;/strong&gt; (CRT) and it covers both implementations.&lt;/p&gt;
&lt;p&gt;参考: &lt;a href=&#34;https://www.internalpointers.com/post/c-c-standard-library&#34;&gt;https://www.internalpointers.com/post/c-c-standard-library&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>

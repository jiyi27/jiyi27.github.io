<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell on 为霜的博客</title>
    <link>https://blog.jiyi27.com/tags/shell/</link>
    <description>Recent content in Shell on 为霜的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 01 Sep 2023 12:23:59 +0000</lastBuildDate><atom:link href="https://blog.jiyi27.com/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shell Script Basic Syntax</title>
      <link>https://blog.jiyi27.com/posts/linux/bash/001-shell-basics/</link>
      <pubDate>Fri, 01 Sep 2023 12:23:59 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/linux/bash/001-shell-basics/</guid>
      <description>&lt;h2 id=&#34;1-run-a-script&#34;&gt;1. Run a script&lt;/h2&gt;
&lt;p&gt;A hello world script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first here specifies which shell should execute this script, if you don&amp;rsquo;t write, the default shell on your computer will run it, check all the shells on your computer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat /etc/shells      
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# List of acceptable shells for chpass(1).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Ftpd will not allow users to connect who are not using&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# one of these shells.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/csh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/dash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/ksh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/tcsh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/zsh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Don&amp;rsquo;t write a wrong location of bash interpreter, &lt;code&gt;/bin/nmsd&lt;/code&gt; below doesn&amp;rsquo;t exist, execute this script will go wrong:&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-run-a-script&#34;&gt;1. Run a script&lt;/h2&gt;
&lt;p&gt;A hello world script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first here specifies which shell should execute this script, if you don&amp;rsquo;t write, the default shell on your computer will run it, check all the shells on your computer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat /etc/shells      
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# List of acceptable shells for chpass(1).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Ftpd will not allow users to connect who are not using&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# one of these shells.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/csh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/dash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/ksh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/tcsh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/zsh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Don&amp;rsquo;t write a wrong location of bash interpreter, &lt;code&gt;/bin/nmsd&lt;/code&gt; below doesn&amp;rsquo;t exist, execute this script will go wrong:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat script.sh 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/nmsd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ chmod u+x script.sh 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./script.sh 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;zsh: ./a.sh: bad interpreter: /bin/ash: no such file or directory
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;chmod u+x&lt;/code&gt; will made the file executable for your user (it will only add it for your user, though it may be already executable by the group owner, or &amp;ldquo;other&amp;rdquo;). &lt;code&gt;chmod a+x&lt;/code&gt; (&amp;lsquo;all plus executable bit&amp;rsquo;) makes the file executable by everyone. The &lt;code&gt;u&lt;/code&gt; is standing for &amp;ldquo;user&amp;rdquo;. That means that the executable flag only applies to the current user of the file.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;u for user&lt;/strong&gt; (the user who is owner of the file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;g for group&lt;/strong&gt; (other users in the file group&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;o for others&lt;/strong&gt; (users not in the file group&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;a for all&lt;/strong&gt; (all users&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-bash-variables-are-untyped&#34;&gt;2. Bash variables are untyped&lt;/h2&gt;
&lt;p&gt;Bash does not type variables like C and related languages, defining them as integers, floating points, or string types. In Bash, all variables are strings. A string that is an integer can be used in integer arithmetic, which is the only type of math that Bash is capable of doing.&lt;/p&gt;
&lt;p&gt;The assignment &lt;code&gt;VAR=10&lt;/code&gt; sets the value of the variable &lt;code&gt;VAR&lt;/code&gt; to 10. To print the value of the variable, you can use the statement &lt;code&gt;echo $VAR&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: The syntax of variable assignment is very strict. There must be no spaces on either side of the equal &lt;code&gt;=&lt;/code&gt; sign in the assignment statement.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is not suitable for scientific computing or anything that requires decimals, such as financial calculations.&lt;/p&gt;
&lt;h2 id=&#34;3-for-loop--and-array&#34;&gt;3. for loop  and array&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item in &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;list&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	command_one
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	command_two
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;e.g.,&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;archs&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt;amd64 arm64 ppc64le ppc64 s390x&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; arch in &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;archs&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	env GOOS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;linux GOARCH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;arch&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; go build -o prepnode_&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;arch&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# rename all file under current folder form lowercase to capital&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; file in *; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	mv &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$file&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; 	&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;echo $file |  tr &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a-z&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A-Z&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But this isn&amp;rsquo;t the best choice, the command below will rename all files recursively which the code above cannot do,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install rename
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ find . -depth -execdir rename -f &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y/A-Z/a-z/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You probably wonder what is the &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;,  &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;;&lt;/code&gt;  above, I&amp;rsquo;ll explain it to you next.&lt;/p&gt;
&lt;h2 id=&#34;4-control-operators&#34;&gt;4. Control operators&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;;&lt;/code&gt;: Will run one command after another has finished, irrespective of the outcome of the first. This means even there is wrong in fiest command, the second can execute.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;: if the precceeding command goes wrong, the commands left won&amp;rsquo;t be executed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;||&lt;/code&gt;: It executes the command on the right only if the command on the left returned an error.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# even command `cd fd.sh` goes wrong, command `ls` can be executed &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd fd.sh; ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd: not a directory: fd.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;economic fd.sh    test.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd fd.sh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd: not a directory: fd.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd fd.sh &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd: not a directory: fd.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;economic fd.sh    test.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5-quotes&#34;&gt;5. Quotes&lt;/h2&gt;
&lt;h3 id=&#34;51-why-need-qoutes&#34;&gt;5.1. Why need qoutes&lt;/h3&gt;
&lt;p&gt;Quoting is used to remove the special meaning of &lt;em&gt;&lt;strong&gt;metacharacters&lt;/strong&gt;&lt;/em&gt; or words to the shell. Quoting can be used to disable special treatment for special characters, to prevent reserved words from being recognized as such, and to prevent &lt;em&gt;&lt;strong&gt;parameter expansion&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Metacharacter&lt;/strong&gt;: a character that, when unquoted, separates words. A metacharacter is a &lt;code&gt;space&lt;/code&gt;, &lt;code&gt;tab&lt;/code&gt;, &lt;code&gt;newline&lt;/code&gt;, or one of the following characters: &lt;code&gt;*&lt;/code&gt;,  &lt;code&gt;?&lt;/code&gt;,  &lt;code&gt;|&lt;/code&gt;,   &lt;code&gt;&amp;amp;&lt;/code&gt;,   &lt;code&gt;;&lt;/code&gt;,  &lt;code&gt;(&lt;/code&gt;,  &lt;code&gt;)&lt;/code&gt;,   &lt;code&gt;&amp;lt;&lt;/code&gt;, or &lt;code&gt;&amp;gt;&lt;/code&gt;, etc&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameter Expansion&lt;/strong&gt;: The &lt;code&gt;$&lt;/code&gt; character introduces parameter expansion, command substitution, or arithmetic expansion. &lt;a href=&#34;https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For example, you want to print &lt;code&gt;&amp;lt;-$1500.**&amp;gt;; (update?) [y|n]&lt;/code&gt;, but &lt;code&gt;&amp;lt;&amp;gt;*;$&lt;/code&gt; has a special meaning in bash, and printing it directly won&amp;rsquo;t work.&lt;/p&gt;
&lt;p&gt;You can use escape character &lt;code&gt;\&lt;/code&gt; to solve this problem:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bash-3.2$ echo &lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;lt;&lt;/span&gt;-&lt;span style=&#34;color:#ae81ff&#34;&gt;\$&lt;/span&gt;1500.&lt;span style=&#34;color:#ae81ff&#34;&gt;\*\*\&amp;gt;\;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\(&lt;/span&gt;update&lt;span style=&#34;color:#ae81ff&#34;&gt;\?\)&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\[&lt;/span&gt;y&lt;span style=&#34;color:#ae81ff&#34;&gt;\|&lt;/span&gt;n&lt;span style=&#34;color:#ae81ff&#34;&gt;\]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;-$1500.**&amp;gt;; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;update?&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;y|n&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But this is not elegant, you can use &lt;strong&gt;single quote&lt;/strong&gt; to solve this problem:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bash-3.2$ echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;-$1500.**&amp;gt;; (update?) [y|n]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;-$1500.**&amp;gt;; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;update?&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;y|n&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Why does this work?  Because all special characters between single quotes lose their special meaning, I find a table will help:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Sr.No.&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Quoting &amp;amp; Description&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;**Single quote ** All special characters between these quotes lose their special meaning.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;strong&gt;Backslash&lt;/strong&gt; &lt;code&gt;\&lt;/code&gt; Any character immediately following the backslash loses its special meaning.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;3&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;strong&gt;Backquote&lt;/strong&gt;  Anything in between back quotes would be treated as a command and would be executed.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;The characters &lt;code&gt; $&lt;/code&gt;  and &amp;lsquo;`&amp;rsquo; retain their special meaning within &lt;strong&gt;double quotes&lt;/strong&gt;.&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;52-backqoute&#34;&gt;5.2. Backqoute&lt;/h3&gt;
&lt;p&gt;You may wonder what does back quote mean in the table, I&amp;rsquo;ll give you an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat a.txt 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hello world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ A&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;cat a.txt&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$A&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hello world
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code between back quotes will be executed, and if there is output, you can save it into a variable,&lt;/p&gt;
&lt;h3 id=&#34;53-double-quotes&#34;&gt;5.3. Double quotes&lt;/h3&gt;
&lt;p&gt;Sometimes &lt;code&gt;*&lt;/code&gt; may acts like it remains its spcecial meaning in double quotes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Without any special options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Inside double quotes (&lt;code&gt;&amp;quot;&lt;/code&gt;), the asterisk &lt;code&gt;*&lt;/code&gt; retains its literal meaning and does not perform globbing (expansion to match filenames).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For example, &lt;code&gt;&amp;quot;*&amp;quot;&lt;/code&gt; will be treated as a literal asterisk character.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With some spcecial options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;find . -name &amp;quot;*.sh&amp;quot; -type f &lt;/code&gt;, in the command the &lt;code&gt;-name &amp;quot;*.sh&amp;quot;&lt;/code&gt; the &lt;code&gt;&amp;quot;*.sh&amp;quot;&lt;/code&gt; acts as a pattern, the double quotes prevent the shell from interpreting the asterisk as a wildcard character and expanding it to match filenames in the current directory.&lt;/li&gt;
&lt;li&gt;Therefore, in the given command, &lt;code&gt;&amp;quot;*.c&amp;quot;&lt;/code&gt; is treated as a literal string by the shell. The &lt;code&gt;find&lt;/code&gt; command receives the pattern &lt;code&gt;&amp;quot;*.c&amp;quot;&lt;/code&gt; as an argument, and it performs the matching internally during its execution.&lt;/li&gt;
&lt;li&gt;Which acts like the &lt;code&gt;*&lt;/code&gt; doesn&amp;rsquo;t lose its special meaning.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6----in-bash&#34;&gt;6. &lt;code&gt;$&lt;/code&gt; &amp;amp; &lt;code&gt;*&lt;/code&gt; in bash&lt;/h2&gt;
&lt;h3 id=&#34;61-&#34;&gt;6.1. &lt;code&gt;$&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;$&lt;/code&gt; has many use cases, I&amp;rsquo;ll introduce one here, in bash scripting, variables are used to store values, the &lt;code&gt;$&lt;/code&gt; symbol is used to retrieve the value of a variable Value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mark&amp;#34;&lt;/span&gt;; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My name is &lt;/span&gt;$name&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;⚠ Don&amp;rsquo;t forget &lt;code&gt;$&lt;/code&gt; and &amp;lsquo;back quote&amp;rsquo; sign retain their special meaning between double quote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;62-&#34;&gt;6.2. &lt;code&gt;*&lt;/code&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠ &lt;code&gt;*&lt;/code&gt; will lose its special meaning between double quote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Shell (bash) considers an asterisk &lt;code&gt;*&lt;/code&gt; to be a wildcard character that can match one or more occurrences of any character, including no character.&lt;/p&gt;
&lt;p&gt;The “*” character is a shortcut for “everything”. Thus, if you enter &lt;code&gt;ls *&lt;/code&gt;, you will see all of the contents of a given directory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ls *fq&lt;/code&gt; lists every file that ends with a &lt;code&gt;fq&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ls /usr/bin/*.sh&lt;/code&gt; This lists every file in &lt;code&gt;/usr/bin&lt;/code&gt; directory that ends in the characters &lt;code&gt;.sh&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; can be placed anywhere in your pattern: &lt;code&gt;ls Mov10*fq&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now when you check the command we did before, you may understand:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# rename all file under current folder form lower-case to upper-case&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; file in *; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	mv &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$file&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; 	&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;echo $file |  tr &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a-z&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A-Z&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5-arithmetic-expansion&#34;&gt;5. Arithmetic expansion&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Parameter Expansion&lt;/strong&gt;: The &lt;code&gt;$&lt;/code&gt; character introduces parameter expansion, command substitution, or arithmetic expansion. &lt;a href=&#34;https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html&#34;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The behaviour of bash interpreter is different from other programming interpreter so if you write code like below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$ a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3; b&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;5; c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;a+b; echo $c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Print: a+b &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You may not get the result you want, the correct way to do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3; b&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;5; c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$((&lt;/span&gt;a+b&lt;span style=&#34;color:#66d9ef&#34;&gt;))&lt;/span&gt;; echo $c     
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3; b&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;5; echo &lt;span style=&#34;color:#66d9ef&#34;&gt;$((&lt;/span&gt;a+b&lt;span style=&#34;color:#66d9ef&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3; b&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;5; let c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a+b&amp;#34;&lt;/span&gt;; echo $c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$((...))&lt;/code&gt; is called &lt;a href=&#34;http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_06_04&#34;&gt;arithmetic expansion&lt;/a&gt;, which is typical of the &lt;code&gt;bash&lt;/code&gt; and &lt;code&gt;ksh&lt;/code&gt; shells. This allows doing simple &lt;em&gt;integer&lt;/em&gt; arithmetic, no floating point stuff though. The result of the expression replaces the expression, as in &lt;code&gt;echo $((1+1))&lt;/code&gt; would become &lt;code&gt;echo 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;((...))&lt;/code&gt; is referred to as &lt;a href=&#34;https://wiki-dev.bash-hackers.org/syntax/ccmd/arithmetic_eval&#34;&gt;arithmetic evaluation&lt;/a&gt; and can be used as part of &lt;code&gt;if ((...)); then&lt;/code&gt; or &lt;code&gt;while ((...)) ; do&lt;/code&gt; statements. Arithmetic expansion &lt;code&gt;$((..))&lt;/code&gt; substitutes the output of the operation and can be used to assign variables as in &lt;code&gt;i=$((i+1))&lt;/code&gt; but cannot be used in conditional statements.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt; is a &lt;code&gt;bash&lt;/code&gt; and &lt;code&gt;ksh&lt;/code&gt; keyword which allows for variable creation with simple arithmetic evaluation. If you try to assign a string there like &lt;code&gt;let a=&amp;quot;hello world&amp;quot;&lt;/code&gt; you&amp;rsquo;ll get a syntax error.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-conclusion&#34;&gt;6. Conclusion&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;There must be no spaces on either side of the equal &lt;code&gt;=&lt;/code&gt; sign in the assignment statement.&lt;/li&gt;
&lt;li&gt;Three control operators: &lt;code&gt;;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set defalul shell: &lt;code&gt;chsh -s /bin/zsh&lt;/code&gt;, switch shell temporarily: &lt;code&gt;shell-name&lt;/code&gt; + &lt;code&gt;enter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;check version of shell: &lt;code&gt;echo &amp;quot;$ZSH_VERSION&amp;quot;&lt;/code&gt;, &lt;code&gt;echo &amp;quot;$BASH_VERSION&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;check all shells: &lt;code&gt;cat /etc/shells&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://askubuntu.com/questions/29589&#34;&gt;bash - &amp;lsquo;chmod u+x&amp;rsquo; versus &amp;lsquo;chmod +x&amp;rsquo; - Ask Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.askingbox.com/question/linux-difference-between-chmod-x-and-chmod-u-x&#34;&gt;Linux: Difference between &amp;ldquo;chmod +x&amp;rdquo; and &amp;ldquo;chmod u+x&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/bash/manual/html_node/Quoting.html&#34;&gt;Quoting (Bash Reference Manual)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tutorialspoint.com/unix/unix-quoting-mechanisms.htm&#34;&gt;Unix / Linux - Shell Quoting Mechanisms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://unix.stackexchange.com/questions/48392/understanding-backtick&#34;&gt;bash - Understanding backtick (`) - Unix &amp;amp; Linux Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/bash/manual/html_node/Shell-Expansions.html#Shell-Expansions&#34;&gt;Shell Expansions (Bash Reference Manual)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hbctraining.github.io/Intro-to-shell-flipped/lessons/02_wildcards_shortcuts.html&#34;&gt;The Shell | Introduction to the command line interface (Shell)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Shell Expansion</title>
      <link>https://blog.jiyi27.com/posts/linux/bash/002-shell-expansion/</link>
      <pubDate>Sat, 26 Aug 2023 11:30:20 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/linux/bash/002-shell-expansion/</guid>
      <description>&lt;h2 id=&#34;1-shell-expansion&#34;&gt;1. Shell expansion&lt;/h2&gt;
&lt;p&gt;When the shell receives a command, either from the user typing at the keyboard, or from a shell script, it breaks it up into words. After this happens, the shell performs seven operations on the words, which can change how they are interpreted. There are seven operations are collectively known as &amp;lsquo;shell expansion&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;The seven operations that the shell performs are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Brace Expansion - expanding values between braces, such as &lt;code&gt;file{1..3}&lt;/code&gt; into &lt;code&gt;file1 file2 file3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tilde Expansion - expanding the &lt;code&gt;~&lt;/code&gt; tilde symbol for the home directory into the path to the home directory, such as &lt;code&gt;~/effective-shell&lt;/code&gt; into &lt;code&gt;/home/dwmkerr/effective-shell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Parameter Expansion - expanding terms that start with a &lt;code&gt;$&lt;/code&gt; symbol into parameter values, such as &lt;code&gt;$HOME&lt;/code&gt; into the value of the variable named &lt;code&gt;HOME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Command Substitution - evaluation of the contents of &lt;code&gt;$(command)&lt;/code&gt; sequences, which are used to run commands and return the results to the shell command line&lt;/li&gt;
&lt;li&gt;Arithmetic Expansion - evaluation of the contents of &lt;code&gt;$((expression))&lt;/code&gt; sequences, which are used to perform basic mathematical operations&lt;/li&gt;
&lt;li&gt;Word Splitting - once all of the previous operations are run, the shell splits the command up into &amp;lsquo;words&amp;rsquo;, which are the units of text that you can run loops over&lt;/li&gt;
&lt;li&gt;Pathname Expansion - the shell expands wildcards and special characters in pathnames, such as &lt;code&gt;*.txt&lt;/code&gt; into the set of files that are matched by the sequence&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Brace Expansion&lt;/strong&gt;&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-shell-expansion&#34;&gt;1. Shell expansion&lt;/h2&gt;
&lt;p&gt;When the shell receives a command, either from the user typing at the keyboard, or from a shell script, it breaks it up into words. After this happens, the shell performs seven operations on the words, which can change how they are interpreted. There are seven operations are collectively known as &amp;lsquo;shell expansion&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;The seven operations that the shell performs are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Brace Expansion - expanding values between braces, such as &lt;code&gt;file{1..3}&lt;/code&gt; into &lt;code&gt;file1 file2 file3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tilde Expansion - expanding the &lt;code&gt;~&lt;/code&gt; tilde symbol for the home directory into the path to the home directory, such as &lt;code&gt;~/effective-shell&lt;/code&gt; into &lt;code&gt;/home/dwmkerr/effective-shell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Parameter Expansion - expanding terms that start with a &lt;code&gt;$&lt;/code&gt; symbol into parameter values, such as &lt;code&gt;$HOME&lt;/code&gt; into the value of the variable named &lt;code&gt;HOME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Command Substitution - evaluation of the contents of &lt;code&gt;$(command)&lt;/code&gt; sequences, which are used to run commands and return the results to the shell command line&lt;/li&gt;
&lt;li&gt;Arithmetic Expansion - evaluation of the contents of &lt;code&gt;$((expression))&lt;/code&gt; sequences, which are used to perform basic mathematical operations&lt;/li&gt;
&lt;li&gt;Word Splitting - once all of the previous operations are run, the shell splits the command up into &amp;lsquo;words&amp;rsquo;, which are the units of text that you can run loops over&lt;/li&gt;
&lt;li&gt;Pathname Expansion - the shell expands wildcards and special characters in pathnames, such as &lt;code&gt;*.txt&lt;/code&gt; into the set of files that are matched by the sequence&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Brace Expansion&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir /tmp/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;one,two,three&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# The line above is expanded to:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mdkir /tmp/one /tmp/two /tmp/three
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;touch file&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1..5&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# The line above is expanded to:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;touch file1.txt file2.txt file3.txt file4.txt file5.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x in &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;0..10..2&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; print $x; &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# The line above is expanded to:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x in &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; 10; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; print $x; &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Parameter Expansion&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fruit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;apples
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I like &lt;/span&gt;$fruit&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# The line above is expanded to:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I like apples&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When using parameter expansion it is generally preferable to surround the name of the parameter with braces - this allows you to tell the shell unambiguously what the name of the parameter is. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My backup folder is: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;backup&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# The line above is expanded to:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My backup folder is: /home/dwmkerrbackup&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should use&lt;code&gt;&amp;quot;My backup folder is: ${HOME}backup&amp;quot;&lt;/code&gt;, not &lt;code&gt;&amp;quot;I like $fruit&amp;quot; &lt;/code&gt;style.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tilde Expansion&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd ~/effective-shell
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# The line above is expanded to:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd $HOME/effective-shell
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that if you want check what the command  exactly is after expansion, check it with &lt;code&gt;echo&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;one.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;two.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;three.dat
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ echo rm *.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm one.txt two.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-wildcard-pattern&#34;&gt;2. Wildcard pattern&lt;/h2&gt;
&lt;h3 id=&#34;21-wildcard-pattern-in-shell&#34;&gt;2.1. Wildcard pattern in shell&lt;/h3&gt;
&lt;p&gt;A string is a &lt;em&gt;&lt;strong&gt;wildcard pattern&lt;/strong&gt;&lt;/em&gt; if it contains one of the characters &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, or &lt;code&gt;[&lt;/code&gt;,  Globbing is the operation that expands a wildcard pattern into the list of &lt;strong&gt;pathnames&lt;/strong&gt; matching the pattern.  Matching is defined by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;?&lt;/code&gt; (not between brackets) matches any single character.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;*&lt;/code&gt; (not between brackets) matches any string, including the empty string.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don&amp;rsquo;t forget  &lt;code&gt;*&lt;/code&gt; may lose its special meaning in double qoutes, but it depends, at some conditions, it won&amp;rsquo;t lost its special meaning for globing wich is filepath expansion. Learn more: &lt;a href=&#34;https://davidzhu.xyz/post/linux/002-bash-basics/&#34;&gt;Shell Script Basic Syntax - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Expands to: tar xvf file1.tar file2.tar file42.tar ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar xvf *.tar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Delete all files ends with .txt under current folder&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm *.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# with double, it won&amp;#39;t be expanded&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ rm &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.txt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm: *.txt: No such file or directory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# search for a string in your current directory and all other subdirectories&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ grep -r ‘hello’ *  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a.txt:hello world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sub/c.txt:hello, this is...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sub/b.txt:hello, this is...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# check what the command is after expansion&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ echo grep -r ‘hello’ *
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;22-metacharacter-in-regular-expressions&#34;&gt;2.2. Metacharacter in regular expressions&lt;/h3&gt;
&lt;p&gt;In regular expression the  &lt;code&gt;*&lt;/code&gt;  is a metacharacter that represents zero or more occurrences of the preceding element.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;colour\ncolor\ncolouur\n&amp;#34;&lt;/span&gt; | egrep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;colou*r&amp;#39;&lt;/span&gt;                          
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;colour
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;color
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;colouur
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/glob.7.html&#34;&gt;glob(7) - Linux manual page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://effective-shell.com/part-6-advanced-techniques/understanding-shell-expansion/&#34;&gt;Understanding Shell Expansion | Effective Shell&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>

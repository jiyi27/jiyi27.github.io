<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>请求头 on 为霜的博客</title>
    <link>https://blog.jiyi27.com/tags/%E8%AF%B7%E6%B1%82%E5%A4%B4/</link>
    <description>Recent content in 请求头 on 为霜的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 06 Nov 2023 22:06:07 +0000</lastBuildDate><atom:link href="https://blog.jiyi27.com/tags/%E8%AF%B7%E6%B1%82%E5%A4%B4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MIME Types</title>
      <link>https://blog.jiyi27.com/posts/http/001-mime-type/</link>
      <pubDate>Mon, 06 Nov 2023 22:06:07 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/http/001-mime-type/</guid>
      <description>&lt;h2 id=&#34;1-background&#34;&gt;1. Background&lt;/h2&gt;
&lt;p&gt;When I first started writing backend code, if the server return a file (any type), and I would add a &lt;code&gt;Content-Type&lt;/code&gt; header and set its value to &lt;code&gt;application/octet-stream&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Disposition&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;attachment; filename=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;strconv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Quote&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/octet-stream&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServeFile&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;filePath&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I don&amp;rsquo;t know what does this mean, but it works. Haha, it&amp;rsquo;s not a good habit, so I decide to take some time to learn it.&lt;/p&gt;
&lt;h2 id=&#34;2-mime-types&#34;&gt;2. MIME types&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;media type&lt;/strong&gt; (also known as a &lt;strong&gt;Multipurpose Internet Mail Extensions or MIME type&lt;/strong&gt;) indicates the nature and format of a document, file, or assortment of bytes.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-background&#34;&gt;1. Background&lt;/h2&gt;
&lt;p&gt;When I first started writing backend code, if the server return a file (any type), and I would add a &lt;code&gt;Content-Type&lt;/code&gt; header and set its value to &lt;code&gt;application/octet-stream&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Disposition&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;attachment; filename=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;strconv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Quote&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/octet-stream&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServeFile&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;filePath&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I don&amp;rsquo;t know what does this mean, but it works. Haha, it&amp;rsquo;s not a good habit, so I decide to take some time to learn it.&lt;/p&gt;
&lt;h2 id=&#34;2-mime-types&#34;&gt;2. MIME types&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;media type&lt;/strong&gt; (also known as a &lt;strong&gt;Multipurpose Internet Mail Extensions or MIME type&lt;/strong&gt;) indicates the nature and format of a document, file, or assortment of bytes.&lt;/p&gt;
&lt;h3 id=&#34;21-structure-of-a-mime-type&#34;&gt;2.1. Structure of a MIME type&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type/subtype
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;strong&gt;type&lt;/strong&gt; represents the general category into which the data type falls, such as &lt;code&gt;video&lt;/code&gt; or &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;subtype&lt;/strong&gt; identifies the exact kind of data of the specified type the MIME type represents. For example, for the MIME type &lt;code&gt;text&lt;/code&gt;, the subtype might be &lt;code&gt;plain&lt;/code&gt; (plain text), &lt;code&gt;html&lt;/code&gt; (&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/HTML&#34;&gt;HTML&lt;/a&gt; source code), or &lt;code&gt;calendar&lt;/code&gt; (for iCalendar/&lt;code&gt;.ics&lt;/code&gt;) files.&lt;/p&gt;
&lt;p&gt;An optional &lt;strong&gt;parameter&lt;/strong&gt; can be added to provide additional details:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type/subtype;parameter=value
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For any MIME type whose main type is &lt;code&gt;text&lt;/code&gt;, you can add the optional &lt;code&gt;charset&lt;/code&gt; parameter to specify the character set used for the characters in the data. If no &lt;code&gt;charset&lt;/code&gt; is specified, the default is &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/ASCII&#34;&gt;ASCII&lt;/a&gt; (&lt;code&gt;US-ASCII&lt;/code&gt;) unless overridden by the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/User_agent&#34;&gt;user agent&amp;rsquo;s&lt;/a&gt; settings. To specify a UTF-8 text file, the MIME type &lt;code&gt;text/plain;charset=UTF-8&lt;/code&gt; is used.&lt;/p&gt;
&lt;p&gt;There are two classes of type: &lt;strong&gt;discrete&lt;/strong&gt; and &lt;strong&gt;multipart&lt;/strong&gt;: &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_Types#types&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_Types#types&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-common-mime-types&#34;&gt;3. Common MIME types&lt;/h2&gt;
&lt;h3 id=&#34;31-applicationoctet-stream&#34;&gt;3.1. application/octet-stream&lt;/h3&gt;
&lt;p&gt;This is the default for binary files. As it means &lt;em&gt;unknown binary&lt;/em&gt; file, &lt;strong&gt;browsers usually don&amp;rsquo;t execute it, or even ask if it should be executed&lt;/strong&gt;. They treat it as if the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition&#34;&gt;&lt;code&gt;Content-Disposition&lt;/code&gt;&lt;/a&gt; header was set to &lt;code&gt;attachment&lt;/code&gt;, and propose a &amp;ldquo;Save As&amp;rdquo; dialog.&lt;/p&gt;
&lt;h3 id=&#34;32-textplain&#34;&gt;3.2. text/plain&lt;/h3&gt;
&lt;p&gt;This is the default for textual files. Even if it really means &amp;ldquo;unknown textual file,&amp;rdquo; &lt;strong&gt;browsers assume&lt;/strong&gt; they can display it.&lt;/p&gt;
&lt;h3 id=&#34;33-textcss&#34;&gt;3.3. text/css&lt;/h3&gt;
&lt;p&gt;CSS files used to style a Web page &lt;strong&gt;must&lt;/strong&gt; be sent with &lt;code&gt;text/css&lt;/code&gt;. If a server doesn&amp;rsquo;t recognize the &lt;code&gt;.css&lt;/code&gt; suffix for CSS files, it may send them with &lt;code&gt;text/plain&lt;/code&gt; or &lt;code&gt;application/octet-stream&lt;/code&gt; MIME types. If so, they &lt;strong&gt;won&amp;rsquo;t be recognized as CSS by most browsers and will be ignored&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Learn more: &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types&#34;&gt;Common MIME types - HTTP | MDN&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;References: &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_Types&#34;&gt;MIME types (IANA media types) - HTTP | MDN&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>HTTP Headers (2)</title>
      <link>https://blog.jiyi27.com/posts/http/001-http-headers-2/</link>
      <pubDate>Mon, 30 Oct 2023 22:06:07 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/http/001-http-headers-2/</guid>
      <description>&lt;h2 id=&#34;1-strict-transport-security&#34;&gt;1. Strict-Transport-Security&lt;/h2&gt;
&lt;p&gt;Q: Disable HTTP access to the domain, don’t even redirect or link it to SSL. Just inform the users this website is not accessible over HTTP and they have to access it over SSL.&lt;/p&gt;
&lt;p&gt;A: I can&amp;rsquo;t see any technical reason why HTTP needs to be completely blocked either, and &lt;strong&gt;many sites do forward HTTP to HTTPS. When doing this&lt;/strong&gt; it is highly advisable to implement HTTP Strict Transport Security (HSTS) which is a web security mechanism which declares that browsers are to only use HTTPS connections.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-strict-transport-security&#34;&gt;1. Strict-Transport-Security&lt;/h2&gt;
&lt;p&gt;Q: Disable HTTP access to the domain, don’t even redirect or link it to SSL. Just inform the users this website is not accessible over HTTP and they have to access it over SSL.&lt;/p&gt;
&lt;p&gt;A: I can&amp;rsquo;t see any technical reason why HTTP needs to be completely blocked either, and &lt;strong&gt;many sites do forward HTTP to HTTPS. When doing this&lt;/strong&gt; it is highly advisable to implement HTTP Strict Transport Security (HSTS) which is a web security mechanism which declares that browsers are to only use HTTPS connections.&lt;/p&gt;
&lt;p&gt;HSTS is implemented by specifying a &lt;strong&gt;response header&lt;/strong&gt; such as &lt;code&gt;Strict-Transport-Security: max-age=31536000&lt;/code&gt;. Complying user agents will automatically turn insecure links into secure links, thereby reducing the risk of man-in-the-middle attacks.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://stackoverflow.com/questions/4365294/is-redirecting-http-to-https-a-bad-idea&#34;&gt;security - Is redirecting http to https a bad idea? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Learn more: &lt;a href=&#34;https://davidzhu.xyz/post/networking/004-common-attacks/&#34;&gt;Common Network Attacks - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-keep-alive&#34;&gt;2. keep-alive&lt;/h2&gt;
&lt;p&gt;HTTP keep-alive, a.k.a., HTTP persistent connection, is an instruction that allows a single TCP connection to remain open for multiple HTTP requests/responses.&lt;/p&gt;
&lt;p&gt;By default, HTTP connections close after each request. When someone visits your site, their browser needs to create new connections to request each of the files that make up your web pages (e.g. images, Javascript, and CSS stylesheets), a process that can lead to high &lt;a href=&#34;https://www.imperva.com/learn/performance/page-load-time/&#34;&gt;page load times&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Enabling the keep-alive header allows you to serve all web page resources &lt;strong&gt;over a single TCP connection&lt;/strong&gt;. Keep-alive also reduces both CPU and memory usage on your server.&lt;/p&gt;
&lt;p&gt;Learn more: &lt;a href=&#34;https://www.imperva.com/learn/performance/http-keep-alive/&#34;&gt;What is HTTP Keep Alive | Benefits of Connection Keep Alive | Imperva&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-user-agent&#34;&gt;3. user-agent&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;User-Agent&lt;/strong&gt; &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/Request_header&#34;&gt;request header&lt;/a&gt; is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/User_agent&#34;&gt;user agent&lt;/a&gt;.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>HTTP Headers (1)</title>
      <link>https://blog.jiyi27.com/posts/http/001-http-headers-1/</link>
      <pubDate>Thu, 26 Oct 2023 09:58:10 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/http/001-http-headers-1/</guid>
      <description>&lt;h2 id=&#34;0-header-types&#34;&gt;0. Header types&lt;/h2&gt;
&lt;p&gt;Headers can be grouped according to their contexts:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/Request_header&#34;&gt;Request headers&lt;/a&gt; contain more information about the resource to be fetched, or about the client requesting the resource.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/Response_header&#34;&gt;Response headers&lt;/a&gt; hold additional information about the response, like its location or about the server providing it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/Representation_header&#34;&gt;Representation headers&lt;/a&gt; contain information about the body of the resource, like its &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types&#34;&gt;MIME type&lt;/a&gt;, or encoding/compression applied.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/Payload_header&#34;&gt;Payload headers&lt;/a&gt; contain representation-independent information about payload data, including content length and the encoding used for transport.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;0-header-types&#34;&gt;0. Header types&lt;/h2&gt;
&lt;p&gt;Headers can be grouped according to their contexts:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/Request_header&#34;&gt;Request headers&lt;/a&gt; contain more information about the resource to be fetched, or about the client requesting the resource.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/Response_header&#34;&gt;Response headers&lt;/a&gt; hold additional information about the response, like its location or about the server providing it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/Representation_header&#34;&gt;Representation headers&lt;/a&gt; contain information about the body of the resource, like its &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types&#34;&gt;MIME type&lt;/a&gt;, or encoding/compression applied.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/Payload_header&#34;&gt;Payload headers&lt;/a&gt; contain representation-independent information about payload data, including content length and the encoding used for transport.&lt;/p&gt;
&lt;h2 id=&#34;1-content-type&#34;&gt;1. &lt;code&gt;Content-Type&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Common values of &lt;code&gt;Content-Type&lt;/code&gt; header can be &lt;code&gt;application/json&lt;/code&gt;, &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;, &lt;code&gt;multipart/form-data&lt;/code&gt;, the first two is usually used with posting form data to server, the third is used to upload file to the server.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;: the keys and values are encoded in key-value tuples separated by &lt;code&gt;&#39;&amp;amp;&#39;&lt;/code&gt;, with a &lt;code&gt;&#39;=&#39;&lt;/code&gt; between the key and the value.
&lt;ul&gt;
&lt;li&gt;The format of &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; is &lt;code&gt;&amp;quot;username=davidzhu&amp;amp;password=778899a&amp;quot; &lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The format of &lt;code&gt;application/json&lt;/code&gt; is &lt;code&gt;&#39;{&amp;quot;username&amp;quot;:&amp;quot;davidzhu&amp;quot;, &amp;quot;password&amp;quot;:&amp;quot;778899a&amp;quot;}&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipart/form-data&lt;/code&gt;: each value is sent as a block of data (&amp;ldquo;body part&amp;rdquo;), with a user agent-defined delimiter (&amp;ldquo;boundary&amp;rdquo;) separating each part. The keys are given in the &lt;code&gt;Content-Disposition&lt;/code&gt; header of each part. Usually used to send form data that contains both files and strings. Learn more: check &lt;code&gt;FormData()&lt;/code&gt; object.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text/plain&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note 1:&lt;/strong&gt; If you don&amp;rsquo;t set &lt;code&gt;Content-Type&lt;/code&gt; header explicitly, the browser will set Content-Type header to &lt;code&gt;multipart/form-data&lt;/code&gt; automatically.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note 2:&lt;/strong&gt; Query String vs &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Query string: Appended to the URL after a question mark (?).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;: Sent in the request body&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-access-control-allow-origin&#34;&gt;2. &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; header allows servers to specify which origins &lt;strong&gt;are allowed to access their resources&lt;/strong&gt;, even if they are from different origins.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Learn more: &lt;a href=&#34;https://davidzhu.xyz/post/http/003-cors-sop/&#34;&gt;Cross-origin Request HTTP - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-location&#34;&gt;3. &lt;code&gt;Location&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/strong&gt; response header indicates the URL to redirect a page to. It only provides a meaning when served with a &lt;code&gt;3xx&lt;/code&gt; (redirection) or &lt;code&gt;201&lt;/code&gt; (created) status response.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;handleMkdir&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;currentPath&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Parse form.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ParseForm&lt;/span&gt;(); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to parse folder name: %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// clean url and redirect&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RawQuery&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Location&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WriteHeader&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusSeeOther&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Note that &lt;code&gt;Location&lt;/code&gt; is a response header.&lt;/p&gt;
&lt;p&gt;Ajax call in js doesn&amp;rsquo;t need redirection to go back to the current page.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Status code 303: &lt;a href=&#34;https://davidzhu.xyz/post/http/002-http-status-codes/&#34;&gt;HTTP Status Codes - David&amp;rsquo;s Blog&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-cache-control&#34;&gt;4. &lt;code&gt;Cache-Control&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cache-control: no-cache&lt;/code&gt;: This directive means that cached versions of &lt;strong&gt;the requested resource&lt;/strong&gt; cannot be used without first checking to see if there is an updated version. &lt;code&gt;max-age=0&lt;/code&gt; is &lt;em&gt;a workaround for no-cache&lt;/em&gt; , because many old (HTTP/1.0) cache implementations don&amp;rsquo;t support no-cache.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cache-control: private&lt;/code&gt;: A response with a &lt;code&gt;private&lt;/code&gt; directive can only be cached by the client and never by an intermediary agent, such as a &lt;a href=&#34;https://www.cloudflare.com/learning/cdn/what-is-a-cdn/&#34;&gt;CDN&lt;/a&gt; or a proxy. These are often resources containing private data, such as a website displaying a user’s personal information.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cache-control: public&lt;/code&gt;: Conversely, the &lt;code&gt;public&lt;/code&gt; directive means the requested resource can be stored by any cache.&lt;/p&gt;
&lt;p&gt;When we access a web page, there may have multiple http requests being made, such as &lt;code&gt;favicon.ico&lt;/code&gt;, &lt;code&gt;xxx.js&lt;/code&gt;, &lt;code&gt;xxx.json&lt;/code&gt;, &lt;code&gt;xxx.png&lt;/code&gt;, for each of these resources there is a http request needed to be sent, and indeed there is a corresponding http response. These resourses are called &lt;strong&gt;the requested resources&lt;/strong&gt; above we mentioned. So each of the repsonse have their own http headers:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/001-http-headers/a.png&#34; alt=&#34;a&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jiyi27.com/001-http-headers/b.png&#34; alt=&#34;b&#34;&gt;&lt;/p&gt;
&lt;p&gt;Browser caching is a great way to both preserve resources and improve user experience on the Internet, but without cache-control, it would be very brittle. Every resource on every site would be bound by the same caching rules, meaning that sensitive information would be cached the same way as public information, and &lt;strong&gt;frequently-updated resources would be cached for the same amount of time as ones that rarely change&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The code below is written in Go which responsible for handle assets request from client, &lt;code&gt;favicon.ico&lt;/code&gt; for example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RenderAsset&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;assetPath&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cache-Control&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;public, max-age=0&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServeFile&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;filename&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Browser caching&lt;/strong&gt; is when a web browser saves website resources so it doesn’t have to fetch them again from a server. For example, a background image on a website might be saved locally in cache so that when a user visits that page for the second time, the image will load from the user’s local files and the page will load much faster.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Cookies are HTTP Headers&lt;/strong&gt;. The header is called &lt;code&gt;Cookie:&lt;/code&gt;, and it contains your cookie.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Learn more: &lt;a href=&#34;https://www.cloudflare.com/learning/cdn/glossary/what-is-cache-control/&#34;&gt;What is cache-control? | Cache explained | Cloudflare&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-authorization---www-authenticate&#34;&gt;5. &lt;code&gt;Authorization &lt;/code&gt; &amp;amp; &lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;HTTP supports the use of several authentication mechanisms to control access to pages and other resources. These mechanisms are all based around the use of the &lt;code&gt;401&lt;/code&gt; status code and the &lt;code&gt;WWW-Authenticate&lt;/code&gt; response header.&lt;/p&gt;
&lt;p&gt;The most widely used &lt;strong&gt;HTTP authentication mechanisms&lt;/strong&gt; are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Basic:&lt;/strong&gt; the client sends the user name and password as unencrypted base64 encoded text. It should only be used with HTTPS, as the password can be easily captured and reused over HTTP.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Digest:&lt;/strong&gt; the client sends a hashed form of the password to the server. Although, the password cannot be captured over HTTP, it may be possible to replay requests using the hashed password.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;NTLM:&lt;/strong&gt; this uses a secure challenge/response mechanism that prevents password capture or replay attacks over HTTP. However, the authentication is per connection and will only work with HTTP/1.1 persistent connections. For this reason, it may not work through all HTTP proxies and can introduce large numbers of network roundtrips if connections are regularly closed by the web server.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this section, we will just discuss the &lt;strong&gt;Basic authentication mechanism&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;If an HTTP receives an anonymous request for a protected resource it can force the use of Basic authentication by rejecting the request with a &lt;code&gt;401&lt;/code&gt; (Access Denied) status code and setting the &lt;code&gt;WWW-Authenticate&lt;/code&gt; response header as shown below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;401&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Access Denied&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WWW-Authenticate&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;Basic realm=&amp;#34;My Server&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Content-Length&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The word &lt;strong&gt;Basic&lt;/strong&gt; in the &lt;strong&gt;WWW-Authenticate&lt;/strong&gt; selects the authentication mechanism that the HTTP client must use to access the resource. The &lt;strong&gt;realm&lt;/strong&gt; string can be set to any value to identify the secure area and may used by HTTP clients to manage passwords. Most web browsers will display a login dialog when this response is received, allowing the user to enter a username and password. This information is then used to retry the request with an &lt;code&gt;Authorization&lt;/code&gt; request header:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt; /securefiles/ &lt;span style=&#34;color:#66d9ef&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;www.httpwatch.com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Authorization&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;Basic aHR0cHdhdGNoOmY=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;strong&gt;Authorization&lt;/strong&gt; specifies the authentication mechanism (in this case &lt;strong&gt;Basic&lt;/strong&gt;) followed by the username and password. Although, the string &lt;strong&gt;aHR0cHdhdGNoOmY=&lt;/strong&gt; may look encrypted it is simply a base64 encoded version of &lt;code&gt;&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;&lt;/code&gt; In this example, the un-encoded string &lt;strong&gt;&amp;ldquo;httpwatch:foo&amp;rdquo;&lt;/strong&gt; was used and would be readily available to anyone who could intercept the HTTP request.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The HTTP &lt;strong&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;request header&lt;/strong&gt; can be used to provide credentials that authenticate a user agent with a server, allowing access to a protected resource.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The HTTP &lt;strong&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;response header&lt;/strong&gt; defines the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication&#34;&gt;HTTP authentication&lt;/a&gt; methods (&amp;ldquo;challenges&amp;rdquo;) that might be used to gain access to a specific resource.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learn more: &lt;a href=&#34;http://www.httpwatch.com/httpgallery/authentication/&#34;&gt;http://www.httpwatch.com/httpgallery/authentication/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/strong&gt; header is usually, but not always, sent after the user agent first attempts to request a protected resource without credentials. The server responds with a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401&#34;&gt;&lt;code&gt;401&lt;/code&gt;&lt;/a&gt; &lt;code&gt;Unauthorized&lt;/code&gt; message that includes at least one &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/WWW-Authenticate&#34;&gt;&lt;code&gt;WWW-Authenticate&lt;/code&gt;&lt;/a&gt; header. This header indicates what authentication schemes can be used to access the resource (and any additional information needed by the client to use them).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; The &amp;ldquo;Basic&amp;rdquo; authentication scheme used in the diagram above sends the credentials &lt;strong&gt;encoded but not encrypted&lt;/strong&gt;. This would be completely insecure unless the exchange was over a secure connection (HTTPS/TLS).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BasicAuth&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;usernameMatch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;subtle&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ConstantTimeCompare&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;usernameHash&lt;/span&gt;[:], &lt;span style=&#34;color:#a6e22e&#34;&gt;expectedUsernameHash&lt;/span&gt;[:]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;passwordMatch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;subtle&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ConstantTimeCompare&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;passwordHash&lt;/span&gt;[:], &lt;span style=&#34;color:#a6e22e&#34;&gt;expectedPasswordHash&lt;/span&gt;[:]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;usernameMatch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;passwordMatch&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WWW-Authenticate&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;`Basic realm=&amp;#34;restricted&amp;#34;, charset=&amp;#34;UTF-8&amp;#34;`&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unauthorized&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusUnauthorized&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Basic realm=&amp;quot;restricted&amp;quot;&lt;/code&gt;, what does this mean?&lt;/p&gt;
&lt;p&gt;In short, endpoints in the same realm should share credentials. If your credentials work for a endpoint with the realm &lt;code&gt;&amp;quot;restricted&amp;quot;&lt;/code&gt;, it should be assumed that the same username and password combination should work for another endpoint with the same realm.&lt;/p&gt;
&lt;p&gt;How to group pages (endpoints) with realm?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;realm&lt;/code&gt; value doesn&amp;rsquo;t have magic, you still need apply the auth middleware for each endpoint at server side. But different value of realm will instruct browser use different credentials (username, password) for the different request url automatically. The concept of realms in the context of authentication is primarily used to instruct the client (typically a web browser) to send different credentials for different request URLs automatically. The server-side implementation still requires applying the authentication middleware to each endpoint.&lt;/p&gt;
&lt;p&gt;Code credit to: &lt;a href=&#34;https://www.alexedwards.net/blog/basic-authentication-in-go&#34;&gt;Go BasicAuth&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTP authentication framework: &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication&#34;&gt;HTTP authentication - HTTP | MDN&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Learn more: &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization&#34;&gt;Authorization - HTTP | MDN&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;6-cookie&#34;&gt;6. cookie&lt;/h2&gt;
&lt;p&gt;There are two headers related to cookie, one is &lt;code&gt;Set-Cookie&lt;/code&gt; header another is &lt;code&gt;Cookie&lt;/code&gt; header.&lt;/p&gt;
&lt;p&gt;After receiving an HTTP request, a server can send one or more &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie&#34;&gt;&lt;code&gt;Set-Cookie&lt;/code&gt;&lt;/a&gt; headers with the response. The browser usually stores the cookie and sends it with requests made to the same server inside a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cookie&#34;&gt;&lt;code&gt;Cookie&lt;/code&gt;&lt;/a&gt; HTTP header.&lt;/p&gt;
&lt;p&gt;For example, a response from server contains cookie headers may looks like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;HTTP/2.0 200 OK
Content-Type: text/html
Set-Cookie: yummy_cookie=choco
Set-Cookie: tasty_cookie=strawberry

[page content]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A HTTP request may looks like this below:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GET /sample_page.html HTTP/2.0
Host: www.example.org
Cookie: yummy_cookie=choco; tasty_cookie=strawberry
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Therefore, when I want set cookie manually for my http request, I&amp;rsquo;ll probably do something like this (I do this in Go):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewRequest&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MethodPost&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/chat&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;your_encoded_message&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// set content-type header&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/x-www-form-urlencoded&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// set cookie header (cookie is a key value data)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cookie&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;session_id=xxxxxxxxxxx&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If I want get cookie from repsonse, I&amp;rsquo;ll probably retrieve the cookie like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;makeRequest&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;my_cooke&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Set-Cookie&amp;#34;&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cookie is just a header which having no doubt resides in the header of HTTP mesages, don&amp;rsquo;t overthinking.&lt;/p&gt;
&lt;p&gt;Reference: &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#creating_cookies&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#creating_cookies&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>

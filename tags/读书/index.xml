<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>读书 on 为霜的博客</title>
    <link>https://blog.jiyi27.com/tags/%E8%AF%BB%E4%B9%A6/</link>
    <description>Recent content in 读书 on 为霜的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 03 Feb 2025 10:25:32 +0000</lastBuildDate><atom:link href="https://blog.jiyi27.com/tags/%E8%AF%BB%E4%B9%A6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>常见谬误</title>
      <link>https://blog.jiyi27.com/posts/reading/003-fallacies/</link>
      <pubDate>Mon, 03 Feb 2025 10:25:32 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/reading/003-fallacies/</guid>
      <description>&lt;p&gt;之后再补吧, 刚参加工作, 一直没时间看&amp;hellip;&lt;/p&gt;</description>
      <content>&lt;p&gt;之后再补吧, 刚参加工作, 一直没时间看&amp;hellip;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>论证的形式 - 演绎和归纳, 规范和事实</title>
      <link>https://blog.jiyi27.com/posts/reading/002-argument/</link>
      <pubDate>Sat, 01 Feb 2025 21:20:18 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/reading/002-argument/</guid>
      <description>&lt;h2 id=&#34;1-演绎推理deductive-reasoning&#34;&gt;1. 演绎推理（Deductive Reasoning）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;特点：如果前提为真，并且推理过程符合逻辑规则，则结论必定为真。&lt;/li&gt;
&lt;li&gt;推理方式：从一般性原则推导出具体结论（从大到小）。&lt;/li&gt;
&lt;li&gt;可靠性：结论的真实性完全依赖于前提的真实性和逻辑推理的正确性。&lt;/li&gt;
&lt;li&gt;示例：
&lt;ul&gt;
&lt;li&gt;大前提：所有人都会死。&lt;/li&gt;
&lt;li&gt;小前提：苏格拉底是人。&lt;/li&gt;
&lt;li&gt;结论：苏格拉底会死。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;✅ 结论100%可靠（如果前提为真，推理无误）。&lt;/p&gt;
&lt;h2 id=&#34;2-归纳推理inductive-reasoning&#34;&gt;2. 归纳推理（Inductive Reasoning）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;特点：基于大量观察的个别实例，归纳出一个普遍性结论，但不能保证结论一定为真，只能说“高度可能”为真。&lt;/li&gt;
&lt;li&gt;推理方式：从具体实例归纳出一般规律（从小到大）。&lt;/li&gt;
&lt;li&gt;可靠性：样本越多、代表性越强，结论越可靠，但仍可能有例外。&lt;/li&gt;
&lt;li&gt;示例：
&lt;ul&gt;
&lt;li&gt;观察 1：太阳今天从东边升起。&lt;/li&gt;
&lt;li&gt;观察 2：太阳昨天从东边升起。&lt;/li&gt;
&lt;li&gt;观察 3：过去几千年太阳都从东边升起。&lt;/li&gt;
&lt;li&gt;归纳结论：太阳总是从东边升起。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;❌ 结论不是100%可靠（虽然很可能为真，但可能有未知的例外，比如极端天文事件）。&lt;/p&gt;
&lt;h2 id=&#34;3-补充演绎-vs-归纳&#34;&gt;3. 补充：演绎 vs. 归纳&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;对比&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;演绎推理&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;归纳推理&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;逻辑结构&lt;/td&gt;
          &lt;td&gt;从一般到具体&lt;/td&gt;
          &lt;td&gt;从具体到一般&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;结论可靠性&lt;/td&gt;
          &lt;td&gt;100% 确定（前提为真，推理正确）&lt;/td&gt;
          &lt;td&gt;可能为真（有一定概率出错）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;适用场景&lt;/td&gt;
          &lt;td&gt;数学、逻辑、法律推理&lt;/td&gt;
          &lt;td&gt;科学研究、预测、统计分析&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;例子&lt;/td&gt;
          &lt;td&gt;“所有人都会死 → 苏格拉底是人 → 苏格拉底会死”&lt;/td&gt;
          &lt;td&gt;“看到1000只白天鹅 → 归纳结论：所有天鹅都是白色”&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意归纳推理的结论&lt;strong&gt;不是绝对真理，而是概率性的&lt;/strong&gt;，这与演绎推理的必然性不同。&lt;/p&gt;
&lt;h2 id=&#34;4-规范和事实论证&#34;&gt;4. 规范和事实论证&lt;/h2&gt;
&lt;p&gt;论证按推理方式分类: 演绎论证和归纳论证, 事实论证和规范论证也是论证的一种分类方式，主要运用于科学研究、法律事实认定、社会调查等领域。&lt;/p&gt;
&lt;h3 id=&#34;41-事实论证factual-argument&#34;&gt;4.1. 事实论证（Factual Argument）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;：事实论证是基于客观事实、数据、实验结果或观察到的现实情况来支持某一观点的论证方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;：以客观事实为依据，强调可验证性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;科学领域：“水在标准大气压下的沸点是100℃。”（实验验证）&lt;/li&gt;
&lt;li&gt;法律领域：“监控录像显示嫌疑人在案发现场。”（客观证据）&lt;/li&gt;
&lt;li&gt;社会研究：“过去十年，城市人口增长了20%。”（统计数据）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;42-规范论证normative-argument&#34;&gt;4.2. 规范论证（Normative Argument）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;：规范论证是基于道德、法律、社会规范或价值判断来支持某一主张的论证方式。&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-演绎推理deductive-reasoning&#34;&gt;1. 演绎推理（Deductive Reasoning）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;特点：如果前提为真，并且推理过程符合逻辑规则，则结论必定为真。&lt;/li&gt;
&lt;li&gt;推理方式：从一般性原则推导出具体结论（从大到小）。&lt;/li&gt;
&lt;li&gt;可靠性：结论的真实性完全依赖于前提的真实性和逻辑推理的正确性。&lt;/li&gt;
&lt;li&gt;示例：
&lt;ul&gt;
&lt;li&gt;大前提：所有人都会死。&lt;/li&gt;
&lt;li&gt;小前提：苏格拉底是人。&lt;/li&gt;
&lt;li&gt;结论：苏格拉底会死。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;✅ 结论100%可靠（如果前提为真，推理无误）。&lt;/p&gt;
&lt;h2 id=&#34;2-归纳推理inductive-reasoning&#34;&gt;2. 归纳推理（Inductive Reasoning）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;特点：基于大量观察的个别实例，归纳出一个普遍性结论，但不能保证结论一定为真，只能说“高度可能”为真。&lt;/li&gt;
&lt;li&gt;推理方式：从具体实例归纳出一般规律（从小到大）。&lt;/li&gt;
&lt;li&gt;可靠性：样本越多、代表性越强，结论越可靠，但仍可能有例外。&lt;/li&gt;
&lt;li&gt;示例：
&lt;ul&gt;
&lt;li&gt;观察 1：太阳今天从东边升起。&lt;/li&gt;
&lt;li&gt;观察 2：太阳昨天从东边升起。&lt;/li&gt;
&lt;li&gt;观察 3：过去几千年太阳都从东边升起。&lt;/li&gt;
&lt;li&gt;归纳结论：太阳总是从东边升起。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;❌ 结论不是100%可靠（虽然很可能为真，但可能有未知的例外，比如极端天文事件）。&lt;/p&gt;
&lt;h2 id=&#34;3-补充演绎-vs-归纳&#34;&gt;3. 补充：演绎 vs. 归纳&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;对比&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;演绎推理&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;归纳推理&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;逻辑结构&lt;/td&gt;
          &lt;td&gt;从一般到具体&lt;/td&gt;
          &lt;td&gt;从具体到一般&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;结论可靠性&lt;/td&gt;
          &lt;td&gt;100% 确定（前提为真，推理正确）&lt;/td&gt;
          &lt;td&gt;可能为真（有一定概率出错）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;适用场景&lt;/td&gt;
          &lt;td&gt;数学、逻辑、法律推理&lt;/td&gt;
          &lt;td&gt;科学研究、预测、统计分析&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;例子&lt;/td&gt;
          &lt;td&gt;“所有人都会死 → 苏格拉底是人 → 苏格拉底会死”&lt;/td&gt;
          &lt;td&gt;“看到1000只白天鹅 → 归纳结论：所有天鹅都是白色”&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意归纳推理的结论&lt;strong&gt;不是绝对真理，而是概率性的&lt;/strong&gt;，这与演绎推理的必然性不同。&lt;/p&gt;
&lt;h2 id=&#34;4-规范和事实论证&#34;&gt;4. 规范和事实论证&lt;/h2&gt;
&lt;p&gt;论证按推理方式分类: 演绎论证和归纳论证, 事实论证和规范论证也是论证的一种分类方式，主要运用于科学研究、法律事实认定、社会调查等领域。&lt;/p&gt;
&lt;h3 id=&#34;41-事实论证factual-argument&#34;&gt;4.1. 事实论证（Factual Argument）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;：事实论证是基于客观事实、数据、实验结果或观察到的现实情况来支持某一观点的论证方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;：以客观事实为依据，强调可验证性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;科学领域：“水在标准大气压下的沸点是100℃。”（实验验证）&lt;/li&gt;
&lt;li&gt;法律领域：“监控录像显示嫌疑人在案发现场。”（客观证据）&lt;/li&gt;
&lt;li&gt;社会研究：“过去十年，城市人口增长了20%。”（统计数据）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;42-规范论证normative-argument&#34;&gt;4.2. 规范论证（Normative Argument）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;：规范论证是基于道德、法律、社会规范或价值判断来支持某一主张的论证方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;：结论通常是规范性（normative）的，旨在说明“应该是什么”或“应当如何”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;道德伦理：“人们应当尊重他人的隐私权。”（道德原则）&lt;/li&gt;
&lt;li&gt;法律与政策：“政府应该提高最低工资，以改善劳动者的生活水平。”（政策规范）&lt;/li&gt;
&lt;li&gt;社会规范：“学生应当遵守学校纪律。”（社会规则）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-规范性论证属于演绎推理还是归纳&#34;&gt;5. 规范性论证属于演绎推理还是归纳&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;规范性论证&lt;/strong&gt;是一种以&lt;strong&gt;价值判断、道德原则、法律规定或行为规范&lt;/strong&gt;等作为前提的推理方式，而不仅仅基于事实（描述性论证）。这种论证的结论通常包含“应该”、“必须”、“有义务”等规范性词汇，强调对行为或决定的评价与指导。如果论证中所有的前提都是纯粹的事实性描述，那么这个论证就不会是规范性的，而是一个&lt;strong&gt;描述性论证&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;规范性论证通常属于演绎推理, 规范性论证 关注的是应当（ought）、必须（must）、应该（should）等规范性主张，而这些主张通常基于 既定规则、道德原则、法律条文或逻辑关系。&lt;/p&gt;
&lt;p&gt;大多数规范性论证属于演绎推理，因为它们基于既定规则（如法律、道德、逻辑）。如果规范性结论是基于统计数据、历史经验或观察推导出的，它可能属于归纳推理。&lt;/p&gt;
&lt;p&gt;📌 法律论证&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大前提：如果一个人未经允许侵入他人住宅，则他构成非法入侵。（法律规范）&lt;/li&gt;
&lt;li&gt;小前提：张三未经允许进入了李四的住宅。（具体事实）&lt;/li&gt;
&lt;li&gt;结论：因此，张三构成非法入侵。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;✅ 这就是典型的 演绎推理，如果前提为真，结论就一定为真。&lt;/p&gt;
&lt;p&gt;📌 道德论证&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大前提：所有欺骗行为都是不道德的。（道德原则）&lt;/li&gt;
&lt;li&gt;小前提：撒谎是一种欺骗行为。（事实）&lt;/li&gt;
&lt;li&gt;结论：因此，撒谎是不道德的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;✅ 也是演绎推理，因为结论必然来自前提。&lt;/p&gt;
&lt;p&gt;有些规范性论证并不是基于固定规则，而是基于经验、社会习惯或统计数据形成的“归纳性规范”。例如：&lt;/p&gt;
&lt;p&gt;📌 政策论证&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;观察 1：过去所有实行高税收的国家，经济增长率都较低。&lt;/li&gt;
&lt;li&gt;观察 2：高税收可能导致企业减少投资。&lt;/li&gt;
&lt;li&gt;归纳结论：因此，我们不应推行高税收政策。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;❌ 这个论证是基于经验数据的归纳，而不是严格的演绎逻辑，所以它属于 归纳推理（Inductive Reasoning），结论可能有例外情况。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>什么是一个好的论证</title>
      <link>https://blog.jiyi27.com/posts/reading/001-logic-claims/</link>
      <pubDate>Sat, 01 Feb 2025 20:30:17 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/reading/001-logic-claims/</guid>
      <description>&lt;h2 id=&#34;1-严谨的结构&#34;&gt;1. 严谨的结构&lt;/h2&gt;
&lt;p&gt;决定什么是良好的论证，第一项标准，是看它是否拥有坚牢的逻辑结构。它的结论必须由至少一个前提支持着，它的结构形式则必然是下面两种情况之一，如果是&lt;strong&gt;演绎&lt;/strong&gt;性的，结论必然地从前提导出，如果是&lt;strong&gt;归纳&lt;/strong&gt;性的，结论或然地从前提导出。另外，如果是&lt;strong&gt;规范性&lt;/strong&gt;论证，必须有一个规范性的前提。&lt;/p&gt;
&lt;p&gt;这样的论证，不使用相互冲突或与结论相矛盾的推理，也&lt;strong&gt;不预先假设结论的真实性&lt;/strong&gt;，更不进行不合逻辑的演绎推导。演绎逻辑的定律已经建立得相当完好，不论是在&lt;strong&gt;假言推理&lt;/strong&gt;还是&lt;strong&gt;三段论推理&lt;/strong&gt;中。违反其它的任何一种规则，都只会带来演绎性论证的结构缺陷。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;论证&lt;/strong&gt;可以按照推理方式分类: 演绎和归纳, 也就是说一个论证要么是演绎性的, 要么就是归纳性的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;论证&lt;/strong&gt;的另一种分类方式: 事实和规范性论证.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;演绎推理&lt;/strong&gt;可以分为常见的两种: 假言推理和三段论推理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;注意: 道德前提, 法律前提, 审美前提, 价值观前提这些东西往往在一个论证中属于隐含前提, 识别规范性论证并挖掘出这些隐藏前提, 可以清楚发现双方的意见的分歧, 辩论更有效率.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-相关性&#34;&gt;2. 相关性&lt;/h2&gt;
&lt;p&gt;判断论证是否良好的第二条原则，与前提的相关性有关。好论证的前提，一定与结论的价值或真实性有关，如果一个前提与结论的真实与否两不相涉，那么，有什么理由去花时间考虑前提是不是真实、能不能够接受呢？&lt;/p&gt;
&lt;p&gt;如果&lt;strong&gt;论证是演绎&lt;/strong&gt;的，结论与前提之间的关系是必然的，只要这一论证在逻辑上没有错误，形式正确。&lt;/p&gt;
&lt;p&gt;如果&lt;strong&gt;论证是归纳&lt;/strong&gt;性的，结论也由前提产生，只要那些前提支持或加强结论的真实性。&lt;/p&gt;
&lt;p&gt;📌 &lt;strong&gt;打游戏 vs. 影响学习&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前提1：玩游戏会占用大量时间，导致学习时间减少&lt;/li&gt;
&lt;li&gt;前提2：某个学习成绩好的同学也在玩游戏，所以游戏不会影响学习&lt;/li&gt;
&lt;li&gt;结论：玩游戏会影响学习&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;💭 &lt;strong&gt;分析&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前提1 → 结论 是一种演绎推理，因为“时间减少 → 学习效果下降”是一个可验证的逻辑因果关系&lt;/li&gt;
&lt;li&gt;前提2 试图使用个例反驳普遍命题，这是归纳推理，但它的错误在于“以偏概全”, 结论和前提不存在因果关系, 如果按照这个错误的逻辑我们还可以说: 上次新闻报道有人玩游戏玩入迷了, 直接厌学, 是不是说玩游戏一定会让人厌学呢?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;📌 编程一定要从 C 语言学起&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前提 1：很多老一辈程序员都是从 C 语言开始学的&lt;/li&gt;
&lt;li&gt;前提 2：老一辈程序员的编程能力很强。&lt;/li&gt;
&lt;li&gt;结论：所以学习 C 语言是成为优秀程序员的唯一途径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;💭 &lt;strong&gt;分析：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这也是&lt;strong&gt;归纳论证&lt;/strong&gt;，但它存在&lt;strong&gt;因果关系错误&lt;/strong&gt;（Correlation does not imply causation）&lt;/li&gt;
&lt;li&gt;也许老一辈程序员强并不是因为他们学了 C，而是因为他们有多年经验，或者当时的环境让他们必须学 C&lt;/li&gt;
&lt;li&gt;所以这个论证是不严密的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;📌 &lt;strong&gt;关于 iPhone 和安卓&lt;/strong&gt;&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-严谨的结构&#34;&gt;1. 严谨的结构&lt;/h2&gt;
&lt;p&gt;决定什么是良好的论证，第一项标准，是看它是否拥有坚牢的逻辑结构。它的结论必须由至少一个前提支持着，它的结构形式则必然是下面两种情况之一，如果是&lt;strong&gt;演绎&lt;/strong&gt;性的，结论必然地从前提导出，如果是&lt;strong&gt;归纳&lt;/strong&gt;性的，结论或然地从前提导出。另外，如果是&lt;strong&gt;规范性&lt;/strong&gt;论证，必须有一个规范性的前提。&lt;/p&gt;
&lt;p&gt;这样的论证，不使用相互冲突或与结论相矛盾的推理，也&lt;strong&gt;不预先假设结论的真实性&lt;/strong&gt;，更不进行不合逻辑的演绎推导。演绎逻辑的定律已经建立得相当完好，不论是在&lt;strong&gt;假言推理&lt;/strong&gt;还是&lt;strong&gt;三段论推理&lt;/strong&gt;中。违反其它的任何一种规则，都只会带来演绎性论证的结构缺陷。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;论证&lt;/strong&gt;可以按照推理方式分类: 演绎和归纳, 也就是说一个论证要么是演绎性的, 要么就是归纳性的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;论证&lt;/strong&gt;的另一种分类方式: 事实和规范性论证.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;演绎推理&lt;/strong&gt;可以分为常见的两种: 假言推理和三段论推理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;注意: 道德前提, 法律前提, 审美前提, 价值观前提这些东西往往在一个论证中属于隐含前提, 识别规范性论证并挖掘出这些隐藏前提, 可以清楚发现双方的意见的分歧, 辩论更有效率.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-相关性&#34;&gt;2. 相关性&lt;/h2&gt;
&lt;p&gt;判断论证是否良好的第二条原则，与前提的相关性有关。好论证的前提，一定与结论的价值或真实性有关，如果一个前提与结论的真实与否两不相涉，那么，有什么理由去花时间考虑前提是不是真实、能不能够接受呢？&lt;/p&gt;
&lt;p&gt;如果&lt;strong&gt;论证是演绎&lt;/strong&gt;的，结论与前提之间的关系是必然的，只要这一论证在逻辑上没有错误，形式正确。&lt;/p&gt;
&lt;p&gt;如果&lt;strong&gt;论证是归纳&lt;/strong&gt;性的，结论也由前提产生，只要那些前提支持或加强结论的真实性。&lt;/p&gt;
&lt;p&gt;📌 &lt;strong&gt;打游戏 vs. 影响学习&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前提1：玩游戏会占用大量时间，导致学习时间减少&lt;/li&gt;
&lt;li&gt;前提2：某个学习成绩好的同学也在玩游戏，所以游戏不会影响学习&lt;/li&gt;
&lt;li&gt;结论：玩游戏会影响学习&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;💭 &lt;strong&gt;分析&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前提1 → 结论 是一种演绎推理，因为“时间减少 → 学习效果下降”是一个可验证的逻辑因果关系&lt;/li&gt;
&lt;li&gt;前提2 试图使用个例反驳普遍命题，这是归纳推理，但它的错误在于“以偏概全”, 结论和前提不存在因果关系, 如果按照这个错误的逻辑我们还可以说: 上次新闻报道有人玩游戏玩入迷了, 直接厌学, 是不是说玩游戏一定会让人厌学呢?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;📌 编程一定要从 C 语言学起&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前提 1：很多老一辈程序员都是从 C 语言开始学的&lt;/li&gt;
&lt;li&gt;前提 2：老一辈程序员的编程能力很强。&lt;/li&gt;
&lt;li&gt;结论：所以学习 C 语言是成为优秀程序员的唯一途径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;💭 &lt;strong&gt;分析：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这也是&lt;strong&gt;归纳论证&lt;/strong&gt;，但它存在&lt;strong&gt;因果关系错误&lt;/strong&gt;（Correlation does not imply causation）&lt;/li&gt;
&lt;li&gt;也许老一辈程序员强并不是因为他们学了 C，而是因为他们有多年经验，或者当时的环境让他们必须学 C&lt;/li&gt;
&lt;li&gt;所以这个论证是不严密的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;📌 &lt;strong&gt;关于 iPhone 和安卓&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前提 1：更强的芯片性能能带来更流畅的使用体验&lt;/li&gt;
&lt;li&gt;前提 2：iPhone 的芯片性能比安卓手机更强&lt;/li&gt;
&lt;li&gt;结论：所以 iPhone 的使用体验比安卓手机更流畅&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;💭 &lt;strong&gt;分析：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这属于&lt;strong&gt;演绎论证&lt;/strong&gt;，这显然是个演绎三段推理, 只是 大前提 一定是对的吗? 是不是流畅度还受到 RAM, 系统优化设计的影响呢?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-可接受性&#34;&gt;3. 可接受性&lt;/h2&gt;
&lt;p&gt;判断论证是否良好的第三项规范，与前提的可接受性有关。要支持一个结论，那理由必须是可以接受的。理由是可以接受的，意思是说，对理智的人来说，在所有能够获得的相关证明面前，当能接受那 claims。&lt;/p&gt;
&lt;p&gt;对常识性声称的概念，要避免某些误解。多数人的看法，并不一定都是常识, 也不一定正确。即使是广泛接受的观点，也需要经过合理的论证和检验，否则可能会被后来的证据推翻。&lt;/p&gt;
&lt;h2 id=&#34;4-充分原则&#34;&gt;4. 充分原则&lt;/h2&gt;
&lt;p&gt;一个论证，还必须满足良好论证的第四项标准的要求，那便是充分原则。论证必须有数量和质量都充足的相关且可接受的前提，才能使我们觉得这论证足够有力，可以接受它的结论了。&lt;/p&gt;
&lt;p&gt;不走运的是，充分性规范与可接受性规范有时会发生混淆。但区别是明显的。可接受性规范是用以判断某一前提自身是否可接受，至于其分量能否构成对结论的充分支持并不在考虑之内。&lt;/p&gt;
&lt;p&gt;看一下这个例子：“汤娅，我们既然相爱，就该结婚。”假设在这里“相爱”的前提是相关且可接受的，对多数人来说，仍然会觉得充分原则没有得到满足。仅仅是相爱，不太像是足够的理由来合乎逻辑地导出结婚的结论；更多的情况下，除了“相爱”之外，还需要其它一些相关的、可接受的前提，才能让成熟、理智的汤娅得出应该结婚的结论。&lt;/p&gt;
&lt;h2 id=&#34;5-分析实践&#34;&gt;5. 分析实践&lt;/h2&gt;
&lt;h3 id=&#34;51-气候变化的成因&#34;&gt;5.1. &lt;strong&gt;气候变化的成因&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;支持方的论证：
&lt;ul&gt;
&lt;li&gt;前提 1：科学家通过气候模型和数据分析，发现自工业革命以来，全球气温显著上升&lt;/li&gt;
&lt;li&gt;前提 2：二氧化碳等温室气体的排放量与气温上升趋势高度相关&lt;/li&gt;
&lt;li&gt;前提 3：人类工业活动是二氧化碳排放量大幅增加的主要来源&lt;/li&gt;
&lt;li&gt;结论：因此，气候变化主要是由人类活动引起的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;反对方的论证：
&lt;ul&gt;
&lt;li&gt;前提 1：地球气候在历史上一直有自然变化，比如冰河期和间冰期的循环&lt;/li&gt;
&lt;li&gt;前提 2：太阳活动、火山喷发和海洋循环都会影响全球气温&lt;/li&gt;
&lt;li&gt;前提 3：这些自然因素在过去曾导致过气候剧变，而那时没有人类工业活动&lt;/li&gt;
&lt;li&gt;结论：因此，气候变化主要是由自然因素引起的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设因果关系错误（False Cause / Post Hoc Fallacy）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题描述：反对方似乎暗示“既然过去没有人类活动时自然因素也能导致气候剧变，那么当前的气候变化也应主要归因于自然因素”，这是一种典型的错误因果关系推理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;忽略关键差异（Oversimplification / Cherry Picking）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题描述：反对方利用历史上自然气候变化的例子，忽略了当前与历史之间在机制、时间尺度和外部条件（如人类工业活动）的根本区别。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;推理缺陷：虽然气候变化过去曾发生，并不意味着当前变暖一定也是自然因素主导&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隐含的假设：因为过去的气候变化是自然的，所以现在的也是，这种推理方式属于错误类比&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;反对方的论证存在逻辑上的漏洞，主要在于：&lt;strong&gt;跳跃式推理&lt;/strong&gt;：从“自然因素曾经引起过气候变化”直接推出“当前气候变化主要由自然因素引起”，中间缺乏对现有气候变化特征的充分解释和证据支持。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;判断的思路可以先从结构开始, 是规范性还是事实性论证, 规范性的话, 隐藏前提是什么? 分析是演绎推理还是归纳推理, 如果是演绎推理他用的什么形式, 三段式还是假言推理,&lt;/p&gt;
&lt;p&gt;假言推理, 假如的条件一定为真吗? 和结论有必要联系吗? 三段论, 大前提一定准确吗?&lt;/p&gt;
&lt;p&gt;如果是归纳推理: 样本足够可以接受吗, 有没有存在以偏概全的情况?&lt;/p&gt;
&lt;p&gt;注意判断论述的时候, 没必要按照每个步骤来分析, 活学活用, 经常看一些常见的逻辑谬误, 才是最有效的方法&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>MongoDB in Action Reading Note</title>
      <link>https://blog.jiyi27.com/posts/database/mongodb/002-mongodb-in-action/</link>
      <pubDate>Wed, 24 Apr 2024 18:29:30 +0000</pubDate>
      
      <guid>https://blog.jiyi27.com/posts/database/mongodb/002-mongodb-in-action/</guid>
      <description>&lt;h2 id=&#34;1-basic-theory&#34;&gt;1. Basic Theory&lt;/h2&gt;
&lt;p&gt;MongoDB stores its information in &lt;strong&gt;documents&lt;/strong&gt; rather than &lt;strong&gt;rows&lt;/strong&gt;. Where relational databases have &lt;strong&gt;tables&lt;/strong&gt;, MongoDB has &lt;em&gt;&lt;strong&gt;collections&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Every MongoDB document requires an &lt;code&gt;_id&lt;/code&gt;, and if one isn’t present when the document is created, a special MongoDB ObjectID will be generated and added to the document at that time. You can set your own &lt;code&gt;_id&lt;/code&gt; by setting it in the document you insert, the ObjectID is just MongoDB’s default.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;1-basic-theory&#34;&gt;1. Basic Theory&lt;/h2&gt;
&lt;p&gt;MongoDB stores its information in &lt;strong&gt;documents&lt;/strong&gt; rather than &lt;strong&gt;rows&lt;/strong&gt;. Where relational databases have &lt;strong&gt;tables&lt;/strong&gt;, MongoDB has &lt;em&gt;&lt;strong&gt;collections&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Every MongoDB document requires an &lt;code&gt;_id&lt;/code&gt;, and if one isn’t present when the document is created, a special MongoDB ObjectID will be generated and added to the document at that time. You can set your own &lt;code&gt;_id&lt;/code&gt; by setting it in the document you insert, the ObjectID is just MongoDB’s default.&lt;/p&gt;
&lt;p&gt;Indexes don’t come for free; they take up some space and can make your inserts slightly more expensive, but they are an essential tool for query optimization.&lt;/p&gt;
&lt;p&gt;MongoDB store documents in a collection in no particular order. To get documents in a particular order, you must can use the &lt;code&gt;sort()&lt;/code&gt; method or the &lt;code&gt;$sort&lt;/code&gt; aggregation pipeline stage. Learn more: &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/glossary/#std-term-natural-order&#34;&gt;natural order — MongoDB Manual&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于 foreign key 的概念常出现在 one to many 关系中, 比如评论表和用户, 一个用户可以有多个评论, 但一个评论只能有一个用户. 在传统数据库中, 评论表中会有一个 &lt;code&gt;user_id&lt;/code&gt; 字段, 我们叫它外键, 每次查询时可以通过 join 操作将用户信息和评论信息关联起来 (即获取写了这个评论的用户具体信息和评论的具体内容).&lt;/p&gt;
&lt;p&gt;MongoDB 没有传统数据库中 join 操作和 foreign key, 但可以通过 &lt;a href=&#34;https://www.mongodb.com/docs/manual/data-modeling/concepts/embedding-vs-references/#embedded-data-models&#34;&gt;embedded documents&lt;/a&gt; 或者 &lt;a href=&#34;https://www.mongodb.com/docs/manual/data-modeling/concepts/embedding-vs-references/#std-label-data-modeling-referencing&#34;&gt;reference&lt;/a&gt; 来表示一对多关系, 也可使用聚合来实现类似 Join 的功能. 具体官方文档有解释: &lt;a href=&#34;https://www.mongodb.com/docs/manual/tutorial/model-embedded-one-to-many-relationships-between-documents/&#34;&gt;Model One-to-Many Relationships with Embedded Documents&lt;/a&gt;, &lt;a href=&#34;https://www.mongodb.com/docs/manual/tutorial/model-referenced-one-to-many-relationships-between-documents/&#34;&gt;Model One-to-Many Relationships with Document References&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于一对多, 多对多关系参考: &lt;a href=&#34;https://www.youtube.com/watch?v=4q-keGvUnag&#34;&gt;SQL Server Tutorial - One-to-many and many-to-many table relationships&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于外键请参考: &lt;a href=&#34;https://www.youtube.com/watch?v=UQK9_gKQHZg&#34;&gt;Learning MySQL - FOREIGN KEY CONSTRAINTS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于 join 操作请参考: &lt;a href=&#34;https://www.youtube.com/watch?v=9yeOJ0ZMUYw&#34;&gt;SQL Joins Explained&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-examples-in-the-book&#34;&gt;2. Examples in the Book&lt;/h2&gt;
&lt;h3 id=&#34;21-reviews---one-to-many-relationship&#34;&gt;2.1. Reviews - One to Many Relationship&lt;/h3&gt;
&lt;p&gt;Each &lt;em&gt;product&lt;/em&gt; can have many &lt;em&gt;reviews&lt;/em&gt;, and you create this relationship by storing a &lt;code&gt;product_id&lt;/code&gt; in each &lt;em&gt;review&lt;/em&gt;, as shown in the sample document:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;_id:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;ObjectId(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;4c4b1476238d3b4dd5000041&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt;,   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;product_id:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;ObjectId(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;4c4b1476238d3b4dd5003981&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt;,   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;date:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Date(2010,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;5,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;7),&lt;/span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;title:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Amazing&amp;#34;&lt;/span&gt;,   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;text:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Has a squeaky wheel, but still a darn good wheelbarrow.&amp;#34;&lt;/span&gt;,   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;rating:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;4,&lt;/span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;user_id:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;ObjectId(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;4c4b1476238d3b4dd5000042&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt;,   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;username:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dgreenthumb&amp;#34;&lt;/span&gt;,   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;helpful_votes:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;3,&lt;/span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;voter_ids:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;ObjectId(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;4c4b1476238d3b4dd5000033&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt;,     
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;ObjectId(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;7a4f0376238d3b4dd5000003&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt;,     
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;ObjectId(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;92c21476238d3b4dd5000032&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But it may come as a surprise that you store the username as well. If this were an RDBMS, you’d be able to pull in the username with a join on the users table. Because you don’t have the join option with MongoDB, you can proceed in one of two ways: either query against the user collection for each review or accept some &lt;strong&gt;denormalization&lt;/strong&gt;. Issuing a query for every review might be unnecessarily costly when username is extremely unlikely to change, so here we’ve chosen to optimize for query speed rather than &lt;strong&gt;normalization&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Also noteworthy is the decision to store votes in the review document itself. It’s common for users to be able to vote on reviews. Here, you store the object ID of each voting user in an array of voter IDs. This allows you to prevent users from voting on a review more than once, and it also gives you the ability to query for all the reviews a user has voted on. You &lt;strong&gt;cache&lt;/strong&gt; the total number of helpful votes, which among other things allows you to sort reviews based on helpfulness. Caching is useful, a query to sort reviews by helpful votes, for example, is much easier if the size of the voting array is cached in the helpful_votes field.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用户名信息原本可以通过用户ID (&lt;code&gt;user_id&lt;/code&gt;) 在用户集合(users collection)中查到, 但这样每次刷新评论都要重新查一次用户名.&lt;/p&gt;
&lt;p&gt;这段提到了一个关键概念：缓存（Caching）, 这里的 “缓存” 是指在文档中直接存储一个额外的数据项（在这个例子中是“有帮助的投票数”），而不是每次查询时计算这个数值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;22-student--courses---many-to-many-relationship&#34;&gt;2.2. Student &amp;amp; Courses - Many to Many Relationship&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;student:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;_id:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;number&amp;gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;string&amp;gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;otherDetails:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt; }&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;courses:&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      { &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;courseId:&lt;/span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;number&amp;gt;,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;courseName:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      { &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;courseId:&lt;/span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;number&amp;gt;,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;courseName:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;course:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;_id:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;number&amp;gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;name:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;string&amp;gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;description:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;string&amp;gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;otherDetails:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, your application has some queries. To start with some queries I can think about is, get all students in a particular course and get all courses for a particular student. These are simple queries.&lt;/p&gt;
&lt;p&gt;To get all courses for a specific student, the query would be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;students&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;( { &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt; }, { &lt;span style=&#34;color:#a6e22e&#34;&gt;courses&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; } )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To get all students enrolled for a specific course, your query can be like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;students&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;( { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;courses.courseName&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Database Design&amp;#34;&lt;/span&gt; } )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This example is from &lt;a href=&#34;https://www.mongodb.com/community/forums/t/many-to-many-relationship-and-linked-table-collection/130305/2&#34;&gt;Many to many relationship and linked table/collection - Working with Data - MongoDB Developer Community Forums&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-query-operators&#34;&gt;3. Query Operators&lt;/h2&gt;
&lt;p&gt;前面介绍了find函数的基本用法和projection参数, 在实际查询中, 我们还需要使用一些操作符来构建更复杂的查询条件, 接下来一一介绍.&lt;/p&gt;
&lt;p&gt;Learn more: &lt;a href=&#34;https://www.mongodb.com/docs/manual/reference/operator/query/&#34;&gt;Query and Projection Operators — MongoDB Manual&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;31-set-operators&#34;&gt;3.1. Set operators&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;$in&lt;/code&gt;, &lt;code&gt;$nin&lt;/code&gt;, &lt;code&gt;$all&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// $in: Matches any of the values specified in an array.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;products&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;main_cat_id&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$in&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;ObjectId&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;6a5b1476238d3b4dd5000048&amp;#34;&lt;/span&gt;),         
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;ObjectId&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;6a5b1476238d3b4dd5000051&amp;#34;&lt;/span&gt;),         
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;ObjectId&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;6a5b1476238d3b4dd5000057&amp;#34;&lt;/span&gt;)       
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Query nested documents
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;products&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;details.color&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;$in&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Green&amp;#39;&lt;/span&gt;]}})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;32-boolean-operators&#34;&gt;3.2. Boolean operators&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;$or&lt;/code&gt;, &lt;code&gt;$and&lt;/code&gt;, &lt;code&gt;$not&lt;/code&gt;, &lt;code&gt;$nor&lt;/code&gt;, &lt;code&gt;$exists&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// $or: matches if any of the supplied set of query terms is true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Finding all products that are either blue or made by Acme requires:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;products&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$or&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;details.color&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;manufacturer&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Acme&amp;#39;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4-update-atomic-operations-and-delete---action-in-mongodb-chapter-7&#34;&gt;4. Update, atomic operations, and delete - Action in MongoDB chapter 7&lt;/h2&gt;
&lt;h3 id=&#34;41-update&#34;&gt;4.1. Update&lt;/h3&gt;
&lt;p&gt;You can either replace the document altogether, or you can use update operators to modify specific fields within the document.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;modify by replacement:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;user_id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ObjectId&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4c4b1476238d3b4dd5003981&amp;#34;&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;doc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;findOne&lt;/span&gt;({&lt;span style=&#34;color:#a6e22e&#34;&gt;_id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user_id&lt;/span&gt;}) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;doc&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mongodb-user@mongodb.com&amp;#39;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;updating &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user_id&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;({&lt;span style=&#34;color:#a6e22e&#34;&gt;_id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user_id&lt;/span&gt;}, &lt;span style=&#34;color:#a6e22e&#34;&gt;doc&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The final line says, “Find the document in the users collection with the given _id, and replace that document with the one we’ve provided.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;modify by operator:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;user_id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ObjectId&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4c4b1476238d3b4dd5000001&amp;#34;&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;({&lt;span style=&#34;color:#a6e22e&#34;&gt;_id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user_id&lt;/span&gt;},  {&lt;span style=&#34;color:#a6e22e&#34;&gt;$set&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mongodb-user2@mongodb.com&amp;#39;&lt;/span&gt;}})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Performance-conscious users may balk at the idea of re-aggregating all product reviews for each update. &lt;strong&gt;Much of this depends on the ratio of reads to writes&lt;/strong&gt;; it’s likely that more users will see product reviews than write their own, so it makes sense to re-aggregate on a write.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;42-standard-update-operators&#34;&gt;4.2. Standard update operators&lt;/h3&gt;
&lt;p&gt;Certainly! Let&amp;rsquo;s go through each MongoDB update operator with an explanation followed by a real-world example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$set&lt;/code&gt;&lt;/strong&gt;: Used to set the value of a field in a document. If the field does not exist, &lt;code&gt;$set&lt;/code&gt; will add a new field with the specified value.&lt;/p&gt;
&lt;p&gt;Example: Updating a user&amp;rsquo;s email address.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;johndoe&amp;#39;&lt;/span&gt; }, { &lt;span style=&#34;color:#a6e22e&#34;&gt;$set&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;johndoe@example.com&amp;#39;&lt;/span&gt; } });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$unset&lt;/code&gt;&lt;/strong&gt;: Removes the specified field from a document.&lt;/p&gt;
&lt;p&gt;Example: Removing a phone number field from a user&amp;rsquo;s profile.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;johndoe&amp;#39;&lt;/span&gt; }, { &lt;span style=&#34;color:#a6e22e&#34;&gt;$unset&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;phoneNumber&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; } });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$inc&lt;/code&gt;&lt;/strong&gt;: Increments the value of a field by the specified amount. If the field does not exist, it is set to the increment amount.&lt;/p&gt;
&lt;p&gt;Example: Incrementing a user&amp;rsquo;s reward points.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;johndoe&amp;#39;&lt;/span&gt; }, { &lt;span style=&#34;color:#a6e22e&#34;&gt;$inc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;rewardPoints&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; } });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$push&lt;/code&gt;&lt;/strong&gt;: Adds an element to an array. If the field is not an array, this operator will create an array with one element.&lt;/p&gt;
&lt;p&gt;Example: Adding a new product to a user&amp;rsquo;s wishlist.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;johndoe&amp;#39;&lt;/span&gt; }, { &lt;span style=&#34;color:#a6e22e&#34;&gt;$push&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;wishlist&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;productId1234&amp;#39;&lt;/span&gt; } });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$pull&lt;/code&gt;&lt;/strong&gt;: Removes all instances of a value from an existing array.&lt;/p&gt;
&lt;p&gt;Example: Removing an item from a user&amp;rsquo;s shopping cart.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;johndoe&amp;#39;&lt;/span&gt; }, { &lt;span style=&#34;color:#a6e22e&#34;&gt;$pull&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;shoppingCart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;itemId5678&amp;#39;&lt;/span&gt; } });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$addToSet&lt;/code&gt;&lt;/strong&gt;: Adds a value to an array unless the value is already present, in which case &lt;code&gt;$addToSet&lt;/code&gt; does nothing to ensure uniqueness.&lt;/p&gt;
&lt;p&gt;Example: Adding a tag to a blog post without creating duplicates.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;blogPosts&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MongoDB Tips&amp;#39;&lt;/span&gt; }, { &lt;span style=&#34;color:#a6e22e&#34;&gt;$addToSet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;tags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NoSQL&amp;#39;&lt;/span&gt; } });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$rename&lt;/code&gt;&lt;/strong&gt;: Renames a field.&lt;/p&gt;
&lt;p&gt;Example: Changing a field name in a contact document.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;contacts&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Jane Doe&amp;#39;&lt;/span&gt; }, { &lt;span style=&#34;color:#a6e22e&#34;&gt;$rename&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cellphone&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mobileNumber&amp;#39;&lt;/span&gt; } });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$mul&lt;/code&gt;&lt;/strong&gt;: Multiplies the value of the field by the specified amount. If the field does not exist, the operation sets the field to zero.&lt;/p&gt;
&lt;p&gt;Example: Updating the price of a product in inventory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;products&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;productId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A123&amp;#39;&lt;/span&gt; }, { &lt;span style=&#34;color:#a6e22e&#34;&gt;$mul&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;price&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; } });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-slow-queries---chapter-8-值得反复阅读&#34;&gt;5. Slow queries - Chapter 8 值得反复阅读&lt;/h2&gt;
&lt;p&gt;Finding slow queries is easy with MongoDB’s profiler. Discovering why these queries are slow is trickier and may require some detective work. As mentioned, the causes of slow queries are manifold. If you’re lucky, resolving a slow query may be as easy as adding an index. In more difficult cases, you might have to rearrange indexes, restructure the data model, or upgrade hardware.&lt;/p&gt;
&lt;p&gt;MongoDB’s explain command provides detailed information about a given query’s path.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;db.values.find(&lt;/span&gt;{}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;).sort(&lt;/span&gt;{&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;close:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-1&lt;/span&gt;}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;).limit(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;).explain()&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cursor&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BasicCursor&amp;#34;&lt;/span&gt;,              
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;isMultiKey&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,             
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;“&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,                    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#A&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Number&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;returned&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;nscannedObjects&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;4308303&lt;/span&gt;,           
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;nscanned&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;4308303&lt;/span&gt;,          &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#B&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Number&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;scanned&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;nscannedObjectsAllPlans&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;4308303&lt;/span&gt;,    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;scanAndOrder&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,                
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;millis&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;10927&lt;/span&gt;,              &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#C&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Time&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;milliseconds,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;seconds&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;took&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;                 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;cursor&lt;/code&gt; field tells you that you’ve been using a &lt;code&gt;BasicCursor&lt;/code&gt;, which only confirms that you’re scanning the collection itself and not an index. If you had used an index, the value would’ve been &lt;code&gt;BTreeCursor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A second datum here further explains the slowness of the query: the &lt;code&gt;scanAndOrder&lt;/code&gt; field. This indicator appears when the query optimizer can’t use an index to return a sorted result set. Therefore, in this case, not only does the query engine have to scan the collection, it also has to sort the result set manually.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Avoid &lt;code&gt;scanAndOrder&lt;/code&gt;. If the query includes a sort, attempt to sort using an index.&lt;/li&gt;
&lt;li&gt;Satisfy all fields with useful indexing constraints—attempt to use indexes for the fields in the query selector.&lt;/li&gt;
&lt;li&gt;If the query implies a range or includes a sort, choose an index where that last key used can help satisfy the range or sort.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当提到“last key used”这个术语，特别是在上下文中关于选择索引以优化范围查询或排序操作的讨论中，它指的是在复合索引中的最后一个字段。在复合索引中，字段的顺序是至关重要的，因为它决定了数据库如何组织和访问索引数据。让我们通过一个例子来解释这个概念。&lt;/p&gt;
&lt;p&gt;假设你有一个MongoDB集合，其中包含以下字段：&lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, 和 &lt;code&gt;c&lt;/code&gt;。现在，假设你创建了一个复合索引 &lt;code&gt;{ a: 1, b: 1, c: 1 }&lt;/code&gt;。在这个索引中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; 是第一个键，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; 是第二个键，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; 是“last key”或最后一个键。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在处理查询时，如果查询涉及到这三个字段中的任意一个的范围条件或排序要求，索引的效率将取决于这些条件是如何与索引中的键匹配的。在理想情况下，你希望查询中的范围或排序操作直接对应于复合索引中的最后一个键，因为这样可以最大化索引的效用。&lt;/p&gt;
&lt;p&gt;例如，考虑以下查询：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;collection&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;$gt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; } }).&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个查询中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; 是一个精确匹配条件，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; 是一个范围查询条件，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; 是一个排序条件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;索引 &lt;code&gt;{ a: 1, b: 1, c: 1 }&lt;/code&gt; 在这种情况下是高效的，因为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它首先使用 &lt;code&gt;a&lt;/code&gt; 来快速定位数据（第一个键），&lt;/li&gt;
&lt;li&gt;接着，利用 &lt;code&gt;b&lt;/code&gt; 来进一步过滤范围内的记录（第二个键），&lt;/li&gt;
&lt;li&gt;最后，使用 &lt;code&gt;c&lt;/code&gt; 进行排序（“last key”或最后一个键）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这里，“last key” (&lt;code&gt;c&lt;/code&gt;) 使得查询可以在使用索引的同时完成排序，从而避免了额外的排序步骤，提高了查询效率。所以，“last key”在复合索引中指的是最后一个被用来支持查询中的范围或排序条件的字段。&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
